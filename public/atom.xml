<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿甘的博客</title>
  <subtitle>一天进步一点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://978420544.github.io/"/>
  <updated>2017-12-29T09:18:50.874Z</updated>
  <id>http://978420544.github.io/</id>
  
  <author>
    <name>阿甘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>最近的一些实践和个人博客优化的计划</title>
    <link href="http://978420544.github.io/2017/12/29/%E6%9C%80%E8%BF%91%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E5%92%8C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E7%9A%84%E8%AE%A1%E5%88%92/"/>
    <id>http://978420544.github.io/2017/12/29/最近的一些实践和个人博客优化的计划/</id>
    <published>2017-12-29T09:16:59.000Z</published>
    <updated>2017-12-29T09:18:50.874Z</updated>
    
    <content type="html"><![CDATA[<h3 id="个人学习实践"><a href="#个人学习实践" class="headerlink" title="个人学习实践"></a>个人学习实践</h3><p>最近接收到宇宙的无线电波比较多，还记得年初找工作的时候，对一些大的方面的知识没有一个很好的概念，比如一些docker、微服务、分布式、集群等等。也是今年毕业的第二年，工作也快两年了，一些代码上面的，能够review解决的问题，也更仔细了，对java代码的熟悉程度更高了点。有感慨也有心酸，也有汗水，希望能给关注的人带来一些帮助！</p>
<h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><p>docker 是使用Go语言开发，基于Linux LXC的容器化技术, 一次封装到处运行。docker拥有服务打包和隔离运行等特性，解决了开发运维发布系统的诸多步骤，一个镜像可以从测试环境，预发布环境、再到生产环境流转，非常易用快速和稳定。</p>
<h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><p>微服务是将一个大型的单块架构拆分为多个细粒度服务的架构，没有脱离SOA，是一种基于SOA发展起来的更好的服务架构。当然，微服务有这一套的架构，并不是所有的系统都要用，适合一些业务和服务量成长起来的系统，相对而言，一些小规模的系统就没有必要用，要不然这么一大套架构里面的各种技术和工具都要拿来去实现，反而更加麻烦了。</p>
<h4 id="架构师"><a href="#架构师" class="headerlink" title="架构师"></a>架构师</h4><p>架构师的职责是指定规范并且指导落地。</p>
<h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p>架构是根据业务需求所制定的合理且可落地的技术规范。</p>
<h4 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h4><p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。基于垂直分层，并且可以并行运行。</p>
<h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><p>集群是一组相互独立的、通过高速网络互联的计算机，它们构成了一个组，并以单一系统的模式加以管理。集群是一组计算机组成，是物理层面，一台机器也可以组成一个伪集群。</p>
<h4 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h4><p>用于服务的注册和发现，比较典型的有zookeeper、Etcd、Consul、Netflix Eureka等</p>
<p>……..</p>
<h3 id="个人博客的未来优化"><a href="#个人博客的未来优化" class="headerlink" title="个人博客的未来优化"></a>个人博客的未来优化</h3><ol>
<li>对博客上分页组件的改动</li>
<li>加上对文章评论的支持</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;个人学习实践&quot;&gt;&lt;a href=&quot;#个人学习实践&quot; class=&quot;headerlink&quot; title=&quot;个人学习实践&quot;&gt;&lt;/a&gt;个人学习实践&lt;/h3&gt;&lt;p&gt;最近接收到宇宙的无线电波比较多，还记得年初找工作的时候，对一些大的方面的知识没有一个很好的概念，比如一些do
    
    </summary>
    
      <category term="Sum" scheme="http://978420544.github.io/categories/sum/"/>
    
    
      <category term="Sum" scheme="http://978420544.github.io/tags/sum/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库查询操作XML</title>
    <link href="http://978420544.github.io/2017/10/10/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9CXML/"/>
    <id>http://978420544.github.io/2017/10/10/MySQL数据库查询操作XML/</id>
    <published>2017-10-10T08:03:46.000Z</published>
    <updated>2017-10-10T08:07:46.964Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL里面有内置的操作xml的函数,分别是ExtractValue()和UpdateXML()函数。</p>
<h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><h4 id="EXTRACTVALUE-fiedname-XPathstring"><a href="#EXTRACTVALUE-fiedname-XPathstring" class="headerlink" title="EXTRACTVALUE (fiedname, XPathstring);"></a>EXTRACTVALUE (fiedname, XPathstring);</h4><p>第一个参数：fiedname是String格式，为表中的字段名第二个参数：XPathstring (<a href="http://www.w3school.com.cn/xpath/xpath_nodes.asp" target="_blank" rel="external">Xpath格式的字符串</a>) ，作用：从目标XML中返回包含所查询值的字符串</p>
<h4 id="UPDATEXML-fiedname-XPathstring-new-value"><a href="#UPDATEXML-fiedname-XPathstring-new-value" class="headerlink" title="UPDATEXML (fiedname, XPathstring,new_value)"></a>UPDATEXML (fiedname, XPathstring,new_value)</h4><p>第一个参数：fiedname是String格式，为表中的字段名第二个参数：XPathstring (Xpath格式的字符串)<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据 作用：改变文档中符合条件的节点的值。</p>
<h4 id="示例如下"><a href="#示例如下" class="headerlink" title="示例如下"></a>示例如下</h4><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> extractvalue(testxml,<span class="string">'/Student/Class/Name[self:text()="</span>zhangsan<span class="string">"]'</span></div><div class="line"></div><div class="line"><span class="number">2.</span> extractvalue(testxml,<span class="string">'/Student/Class/Name'</span>)=<span class="string">'zhangsan'</span></div><div class="line"></div><div class="line"><span class="number">3.</span> extractvalue(testxml,<span class="string">'/*/*/Name'</span>)=<span class="string">'zhangsan'</span></div></pre></td></tr></table></figure>
<p>方法作用如下：<br>1和2 找出Student节点下Class节点下的Name节点内容等于”zhangsan”的数据<br>3 找出所有的第三级节点Name等于”zhangsan”的数据</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Updatexml(<span class="name">testxml</span>,'/Student/Class/Name[self<span class="symbol">:text</span>()=<span class="string">"zhangsan"</span>]','&lt;Name&gt;updatename&lt;/Name&gt;')</div></pre></td></tr></table></figure>
<p>方法作用如下：替换对应符合条件数据节点的内容，注意替换的字符串要将对应的节点拼接进字符串中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL里面有内置的操作xml的函数,分别是ExtractValue()和UpdateXML()函数。&lt;/p&gt;
&lt;h3 id=&quot;函数语法&quot;&gt;&lt;a href=&quot;#函数语法&quot; class=&quot;headerlink&quot; title=&quot;函数语法&quot;&gt;&lt;/a&gt;函数语法&lt;/h3&gt;&lt;h4 i
    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="Xml" scheme="http://978420544.github.io/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>转【数据库事务与锁】浅谈@8：深入理解乐观锁与悲观锁</title>
    <link href="http://978420544.github.io/2017/10/10/%E8%BD%AC%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81%E3%80%91%E6%B5%85%E8%B0%88-8%EF%BC%9A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81/"/>
    <id>http://978420544.github.io/2017/10/10/转【数据库事务与锁】浅谈-8：深入理解乐观锁与悲观锁/</id>
    <published>2017-10-10T06:46:51.000Z</published>
    <updated>2017-10-10T08:25:02.690Z</updated>
    
    <content type="html"><![CDATA[<p>在深入理解乐观锁与悲观锁一文中我们介绍过锁。本文在这篇文章的基础上，深入分析一下乐观锁的实现机制，介绍什么是CAS、CAS的应用以及CAS存在的问题等。</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>众所周知，Java是多线程的。但是，Java对多线程的支持其实是一把双刃剑。一旦涉及到多个线程操作共享资源的情况时，处理不好就可能产生线程安全问题。线程安全性可能是非常复杂的，在没有充足的同步的情况下，多个线程中的操作执行顺序是不可预测的。</p>
<p>Java里面进行多线程通信的主要方式就是共享内存的方式，共享内存主要的关注点有两个：可见性和有序性。加上复合操作的原子性，我们可以认为Java的线程安全性问题主要关注点有3个：可见性、有序性和原子性。</p>
<p>Java内存模型（JMM）解决了可见性和有序性的问题，而锁解决了原子性的问题。这里不再详细介绍JMM及锁的其他相关知识。但是我们要讨论一个问题，那就是锁到底是不是有利无弊的？</p>
<h3 id="锁存在的问题"><a href="#锁存在的问题" class="headerlink" title="锁存在的问题"></a>锁存在的问题</h3><p>Java在JDK1.5之前都是靠synchronized关键字保证同步的，这种通过使用一致的锁定协议来协调对共享状态的访问，可以确保无论哪个线程持有共享变量的锁，都采用独占的方式来访问这些变量。独占锁其实就是一种悲观锁，所以可以说synchronized是悲观锁。</p>
<h4 id="悲观锁机制存在以下问题："><a href="#悲观锁机制存在以下问题：" class="headerlink" title="悲观锁机制存在以下问题："></a>悲观锁机制存在以下问题：</h4><pre><code>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题。
一个线程持有锁会导致其它所有需要此锁的线程挂起。
如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能风险。
而另一个更加有效的锁就是乐观锁。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。
</code></pre><p>与锁相比，volatile变量是一个更轻量级的同步机制，因为在使用这些变量时不会发生上下文切换和线程调度等操作，但是volatile不能解决原子性问题，因此当一个变量依赖旧值时就不能使用volatile变量。因此对于同步最终还是要回到锁机制上来。</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁（ Optimistic Locking）其实是一种思想。相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</p>
<p>上面提到的乐观锁的概念中其实已经阐述了他的具体实现细节：主要就是两个步骤：冲突检测和数据更新。其实现方式有一种比较典型的就是Compare and Swap(CAS)。</p>
<h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。</p>
<p>CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”这其实和乐观锁的冲突检查+数据更新的原理是一样的。</p>
<pre><code>这里再强调一下，乐观锁是一种思想。CAS是这种思想的一种实现方式。
</code></pre><h3 id="Java对CAS的支持"><a href="#Java对CAS的支持" class="headerlink" title="Java对CAS的支持"></a>Java对CAS的支持</h3><p>在JDK1.5 中新增java.util.concurrent(J.U.C)就是建立在CAS之上的。相对于对于synchronized这种阻塞算法，CAS是非阻塞算法的一种常见实现。所以J.U.C在性能上有了很大的提升。</p>
<p>我们以java.util.concurrent中的AtomicInteger为例，看一下在不使用锁的情况下是如何保证线程安全的。主要理解getAndIncrement方法，该方法的作用相当于 ++i 操作。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="title">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</div></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;  </div><div class="line"> </div><div class="line">     <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;  </div><div class="line">         <span class="keyword">return</span> value;  </div><div class="line">     &#125;  </div><div class="line"> </div><div class="line">     <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;  </div><div class="line">         <span class="keyword">for</span> (;;) &#123;  </div><div class="line">             <span class="keyword">int</span> current = get();  </div><div class="line">             <span class="keyword">int</span> next = current + <span class="number">1</span>;  </div><div class="line">            <span class="keyword">if</span> (compareAndSet(current, next))  </div><div class="line">                <span class="keyword">return</span> current;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;  </div><div class="line">        <span class="function"><span class="keyword">return</span> unsafe.<span class="title">compareAndSwapInt</span><span class="params">(<span class="keyword">this</span>, valueOffset, expect, update)</span></span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在没有锁的机制下需要字段value要借助volatile原语，保证线程间的数据是可见的。这样在获取变量的值的时候才能直接读取。然后来看看++i是怎么做到的。</p>
<p>getAndIncrement采用了CAS操作，每次从内存中读取数据然后将此数据和+1后的结果进行CAS操作，如果成功就返回结果，否则重试直到成功为止。而compareAndSet利用JNI来完成CPU指令的操作。</p>
<h3 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h3><p>CAS会导致“ABA问题”。</p>
<p>CAS算法实现一个重要前提需要取出内存中某时刻的数据，而在下时刻比较并替换，那么在这个时间差类会导致数据的变化。</p>
<p>比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的。</p>
<p>部分乐观锁的实现是通过版本号（version）的方式来解决ABA问题，乐观锁每次在执行数据的修改操作时，都会带上一个版本号，一旦版本号和数据的版本号一致就可以执行修改操作并对版本号执行+1操作，否则就执行失败。因为每次操作的版本号都会随之增加，所以不会出现ABA问题，因为版本号只会增加不会减少。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java中的线程安全问题至关重要，要想保证线程安全，就需要锁机制。锁机制包含两种：乐观锁与悲观锁。悲观锁是独占锁，阻塞锁。乐观锁是非独占锁，非阻塞锁。有一种乐观锁的实现方式就是CAS ，这种算法在JDK 1.5中引入的java.util.concurrent中有广泛应用。但是值得注意的是这种算法会存在ABA问题。</p>
<h3 id="CAS与对象创建"><a href="#CAS与对象创建" class="headerlink" title="CAS与对象创建"></a>CAS与对象创建</h3><p>另外，CAS还有一个应用，那就是在JVM创建对象的过程中。对象创建在虚拟机中是非常频繁的。即使是仅仅修改一个指针所指向的位置，在并发情况下也不是线程安全的，可能正在给对象A分配内存空间，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。解决这个问题的方案有两种，其中一种就是采用CAS配上失败重试的方式保证更新操作的原子性。</p>
<p>–转自 <a href="http://www.cnblogs.com/wang-meng/p/5506951.html" target="_blank" rel="external">《[数据库事务与锁]详解八:底理解数据库事务乐观锁的一种实现方式——CAS》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在深入理解乐观锁与悲观锁一文中我们介绍过锁。本文在这篇文章的基础上，深入分析一下乐观锁的实现机制，介绍什么是CAS、CAS的应用以及CAS存在的问题等。&lt;/p&gt;
&lt;h3 id=&quot;线程安全&quot;&gt;&lt;a href=&quot;#线程安全&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="事物与锁" scheme="http://978420544.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>转【数据库事务与锁】浅谈@7：深入理解乐观锁与悲观锁</title>
    <link href="http://978420544.github.io/2017/10/10/%E8%BD%AC%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81%E3%80%91%E6%B5%85%E8%B0%88-7%EF%BC%9A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81/"/>
    <id>http://978420544.github.io/2017/10/10/转【数据库事务与锁】浅谈-7：深入理解乐观锁与悲观锁/</id>
    <published>2017-10-10T06:46:41.000Z</published>
    <updated>2017-10-10T08:25:13.797Z</updated>
    
    <content type="html"><![CDATA[<p>在数据库的锁机制中介绍过，数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。</p>
<p>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p>
<p>无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想。其实不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像memcache、hibernate、tair等都有类似的概念。</p>
<p>针对于不同的业务场景，应该选用不同的并发控制方式。所以，不要把乐观并发控制和悲观并发控制狭义的理解为DBMS中的概念，更不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。</p>
<p>下面来分别学习一下悲观锁和乐观锁。</p>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>在关系数据库管理系统里，悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作都某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。<br>悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。</p>
<p>悲观锁，正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度(悲观)，因此，在整个数据处理过程中，将数据处于锁定状态。 悲观锁的实现，往往依靠数据库提供的锁机制 （也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）</p>
<p>在数据库中，悲观锁的流程如下：</p>
<p>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。</p>
<p>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。</p>
<p>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。</p>
<p>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</p>
<h4 id="MySQL-InnoDB中使用悲观锁"><a href="#MySQL-InnoDB中使用悲观锁" class="headerlink" title="MySQL InnoDB中使用悲观锁"></a>MySQL InnoDB中使用悲观锁</h4><p>要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//0.开始事务</div><div class="line"><span class="keyword">begin</span>;/<span class="keyword">begin</span> <span class="keyword">work</span>;/<span class="keyword">start</span> <span class="keyword">transaction</span>; (三者选一就可以)</div><div class="line">//1.查询出商品信息</div><div class="line"><span class="keyword">select</span> <span class="keyword">status</span> <span class="keyword">from</span> t_goods <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</div><div class="line">//2.根据商品信息生成订单</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_orders (<span class="keyword">id</span>,goods_id) <span class="keyword">values</span> (<span class="literal">null</span>,<span class="number">1</span>);</div><div class="line">//3.修改商品status为2</div><div class="line"><span class="keyword">update</span> t_goods <span class="keyword">set</span> <span class="keyword">status</span>=<span class="number">2</span>;</div><div class="line">//4.提交事务</div><div class="line"><span class="keyword">commit</span>;/<span class="keyword">commit</span> <span class="keyword">work</span>;</div></pre></td></tr></table></figure>
<p>上面的查询语句中，我们使用了select…for update的方式，这样就通过开启排他锁的方式实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。</p>
<p>上面我们提到，使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p>
<h4 id="优点与不足"><a href="#优点与不足" class="headerlink" title="优点与不足"></a>优点与不足</h4><p>悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数。</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><pre><code>在关系数据库管理系统里，乐观并发控制（又名“乐观锁”，Optimistic Concurrency Control，缩写“OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。乐观事务控制最早是由孔祥重（H.T.Kung）教授提出。
</code></pre><p>乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</p>
<p>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p>
<pre><code>数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。
</code></pre><p>实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。</p>
<h4 id="使用版本号实现乐观锁"><a href="#使用版本号实现乐观锁" class="headerlink" title="使用版本号实现乐观锁"></a>使用版本号实现乐观锁</h4><p>使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行+1操作。并判断当前版本号是不是该数据的最新的版本号。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.查询出商品信息</div><div class="line"><span class="keyword">select</span> (<span class="keyword">status</span>,<span class="keyword">status</span>,<span class="keyword">version</span>) <span class="keyword">from</span> t_goods <span class="keyword">where</span> <span class="keyword">id</span>=#&#123;<span class="keyword">id</span>&#125;</div><div class="line"><span class="number">2.</span>根据商品信息生成订单</div><div class="line"><span class="number">3.</span>修改商品<span class="keyword">status</span>为<span class="number">2</span></div><div class="line"><span class="keyword">update</span> t_goods </div><div class="line"><span class="keyword">set</span> <span class="keyword">status</span>=<span class="number">2</span>,<span class="keyword">version</span>=<span class="keyword">version</span>+<span class="number">1</span></div><div class="line"><span class="keyword">where</span> <span class="keyword">id</span>=#&#123;<span class="keyword">id</span>&#125; <span class="keyword">and</span> <span class="keyword">version</span>=#&#123;<span class="keyword">version</span>&#125;;</div></pre></td></tr></table></figure>
<h3 id="优点与不足-1"><a href="#优点与不足-1" class="headerlink" title="优点与不足"></a>优点与不足</h3><p>乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。但如果直接简单这么做，还是有可能会遇到不可预期的结果，例如两个事务都读取了数据库的某一行，经过修改以后写回数据库，这时就遇到了问题。</p>
<p>–转自 <a href="http://www.cnblogs.com/wang-meng/p/5506943.html" target="_blank" rel="external">《[数据库事务与锁]详解七: 深入理解乐观锁与悲观锁》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在数据库的锁机制中介绍过，数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。&lt;/p&gt;
&lt;p&gt;乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。&lt;/p&gt;
&lt;p&gt;无论是悲
    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="事物与锁" scheme="http://978420544.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>转【数据库事务与锁】浅谈@6：MySQL中的共享锁与排他锁</title>
    <link href="http://978420544.github.io/2017/10/10/%E8%BD%AC%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81%E3%80%91%E6%B5%85%E8%B0%88-6%EF%BC%9AMySQL%E4%B8%AD%E7%9A%84%E5%85%B1%E4%BA%AB%E9%94%81%E4%B8%8E%E6%8E%92%E4%BB%96%E9%94%81/"/>
    <id>http://978420544.github.io/2017/10/10/转【数据库事务与锁】浅谈-6：MySQL中的共享锁与排他锁/</id>
    <published>2017-10-10T06:46:25.000Z</published>
    <updated>2017-10-10T08:25:35.347Z</updated>
    
    <content type="html"><![CDATA[<p>在MySQL中的行级锁,表级锁,页级锁中介绍过，行级锁是Mysql中锁定粒度最细的一种锁，行级锁能大大减少数据库操作的冲突。行级锁分为共享锁和排他锁两种，本文将详细介绍共享锁及排他锁的概念、使用方式及注意事项等。</p>
<h3 id="共享锁-Share-Lock"><a href="#共享锁-Share-Lock" class="headerlink" title="共享锁(Share Lock)"></a>共享锁(Share Lock)</h3><p>共享锁又称读锁，是读取操作创建的锁。其他用户可以并发读取数据，但任何事务都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。</p>
<p>如果事务T对数据A加上共享锁后，则其他事务只能对A再加共享锁，不能加排他锁。获准共享锁的事务只能读数据，不能修改数据。</p>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><pre><code>SELECT ... LOCK IN SHARE MODE;
</code></pre><p>在查询语句后面增加LOCK IN SHARE MODE，Mysql会对查询结果中的每行都加共享锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请共享锁，否则会被阻塞。其他线程也可以读取使用了共享锁的表，而且这些线程读取的是同一个版本的数据。</p>
<h3 id="排他锁（eXclusive-Lock）"><a href="#排他锁（eXclusive-Lock）" class="headerlink" title="排他锁（eXclusive Lock）"></a>排他锁（eXclusive Lock）</h3><p>排他锁又称写锁，如果事务T对数据A加上排他锁后，则其他事务不能再对A加任任何类型的封锁。获准排他锁的事务既能读数据，又能修改数据。</p>
<h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><pre><code>SELECT ... FOR UPDATE;
</code></pre><p>在查询语句后面增加FOR UPDATE，Mysql会对查询结果中的每行都加排他锁，当没有其他线程对查询结果集中的任何一行使用排他锁时，可以成功申请排他锁，否则会被阻塞。</p>
<h3 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h3><p>InnoDB还有两个表锁：</p>
<pre><code>意向共享锁（IS）：表示事务准备给数据行加入共享锁，也就是说一个数据行加共享锁前必须先取得该表的IS锁

意向排他锁（IX）：类似上面，表示事务准备给数据行加入排他锁，说明事务在一个数据行加排他锁前必须先取得该表的IX锁。
</code></pre><p>意向锁是InnoDB自动加的，不需要用户干预。</p>
<p>对于insert、update、delete，InnoDB会自动给涉及的数据加排他锁（X）；对于一般的Select语句，InnoDB不会加任何锁，事务可以通过以下语句给显示加共享锁或排他锁。</p>
<pre><code>共享锁：SELECT ... LOCK IN SHARE MODE;

排他锁：SELECT ... FOR UPDATE;
</code></pre><p>–转自 <a href="http://www.cnblogs.com/wang-meng/p/5506934.html" target="_blank" rel="external">《[数据库事务与锁]详解六: MySQL中的共享锁与排他锁》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在MySQL中的行级锁,表级锁,页级锁中介绍过，行级锁是Mysql中锁定粒度最细的一种锁，行级锁能大大减少数据库操作的冲突。行级锁分为共享锁和排他锁两种，本文将详细介绍共享锁及排他锁的概念、使用方式及注意事项等。&lt;/p&gt;
&lt;h3 id=&quot;共享锁-Share-Lock&quot;&gt;&lt;a
    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="事物与锁" scheme="http://978420544.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>转【数据库事务与锁】浅谈@5：MySQL中的行级锁,表级锁,页级锁&#39;</title>
    <link href="http://978420544.github.io/2017/10/10/%E8%BD%AC%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81%E3%80%91%E6%B5%85%E8%B0%88-5%EF%BC%9AMySQL%E4%B8%AD%E7%9A%84%E8%A1%8C%E7%BA%A7%E9%94%81-%E8%A1%A8%E7%BA%A7%E9%94%81-%E9%A1%B5%E7%BA%A7%E9%94%81/"/>
    <id>http://978420544.github.io/2017/10/10/转【数据库事务与锁】浅谈-5：MySQL中的行级锁-表级锁-页级锁/</id>
    <published>2017-10-10T06:46:07.000Z</published>
    <updated>2017-10-10T08:25:27.474Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机科学中，锁是在执行多线程时用于强行限制资源访问的同步机制，即用于在并发控制中保证对互斥要求的满足。<br>在数据库的锁机制中介绍过，在DBMS中，可以按照锁的粒度把数据库锁分为行级锁(INNODB引擎)、表级锁(MYISAM引擎)和页级锁(BDB引擎 )。</p>
<h3 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h3><p>行级锁是Mysql中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。行级锁分为共享锁和排他锁.</p>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p>
<h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p>表级锁是MySQL中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分MySQL引擎支持。最常使用的MYISAM与INNODB都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。</p>
<h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><p>开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低。</p>
<h3 id="页级锁"><a href="#页级锁" class="headerlink" title="页级锁"></a>页级锁</h3><p>页级锁是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。BDB支持页级锁</p>
<h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><p>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</p>
<h2 id="MySQL常用存储引擎的锁机制"><a href="#MySQL常用存储引擎的锁机制" class="headerlink" title="MySQL常用存储引擎的锁机制"></a>MySQL常用存储引擎的锁机制</h2><pre><code>MyISAM和MEMORY采用表级锁(table-level locking)
BDB采用页面锁(page-level locking)或表级锁，默认为页面锁
InnoDB支持行级锁(row-level locking)和表级锁,默认为行级锁
</code></pre><h3 id="Innodb中的行锁与表锁"><a href="#Innodb中的行锁与表锁" class="headerlink" title="Innodb中的行锁与表锁"></a>Innodb中的行锁与表锁</h3><p>前面提到过，在Innodb引擎中既支持行锁也支持表锁，那么什么时候会锁住整张表，什么时候或只锁住一行呢？</p>
<p>InnoDB行锁是通过给索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！</p>
<p>在实际应用中，要特别注意InnoDB行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。</p>
<p>行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁。行级锁的缺点是：由于需要请求大量的锁资源，所以速度慢，内存消耗大。</p>
<h3 id="行级锁与死锁"><a href="#行级锁与死锁" class="headerlink" title="行级锁与死锁"></a>行级锁与死锁</h3><p>MyISAM中是不会产生死锁的，因为MyISAM总是一次性获得所需的全部锁，要么全部满足，要么全部等待。而在InnoDB中，锁是逐步获得的，就造成了死锁的可能。</p>
<p>在MySQL中，行级锁并不是直接锁记录，而是锁索引。索引分为主键索引和非主键索引两种，如果一条sql语句操作了主键索引，MySQL就会锁定这条主键索引；如果一条语句操作了非主键索引，MySQL会先锁定该非主键索引，再锁定相关的主键索引。 在UPDATE、DELETE操作时，MySQL不仅锁定WHERE条件扫描过的所有索引记录，而且会锁定相邻的键值，即所谓的next-key locking。</p>
<p>当两个事务同时执行，一个锁住了主键索引，在等待其他相关索引。另一个锁定了非主键索引，在等待主键索引。这样就会发生死锁。</p>
<p>发生死锁后，InnoDB一般都可以检测到，并使一个事务释放锁回退，另一个获取锁完成事务。</p>
<hr>
<p>有多种方法可以避免死锁，这里只介绍常见的三种</p>
<pre><code>1、如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。
2、在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；
3、对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；
</code></pre><p>–转自 <a href="http://www.cnblogs.com/wang-meng/p/5506927.html" target="_blank" rel="external">《[数据库事务与锁]详解五: MySQL中的行级锁,表级锁,页级锁》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在计算机科学中，锁是在执行多线程时用于强行限制资源访问的同步机制，即用于在并发控制中保证对互斥要求的满足。&lt;br&gt;在数据库的锁机制中介绍过，在DBMS中，可以按照锁的粒度把数据库锁分为行级锁(INNODB引擎)、表级锁(MYISAM引擎)和页级锁(BDB引擎 )。&lt;/p&gt;

    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="事物与锁" scheme="http://978420544.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>转【数据库事务与锁】浅谈@4：数据库的锁机制</title>
    <link href="http://978420544.github.io/2017/10/10/%E8%BD%AC%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81%E3%80%91%E6%B5%85%E8%B0%88-4%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <id>http://978420544.github.io/2017/10/10/转【数据库事务与锁】浅谈-4：数据库的锁机制/</id>
    <published>2017-10-10T06:45:51.000Z</published>
    <updated>2017-10-10T08:24:43.650Z</updated>
    
    <content type="html"><![CDATA[<p>数据库的读现象浅析中介绍过，在并发访问情况下，可能会出现脏读、不可重复读和幻读等读现象，为了应对这些问题，主流数据库都提供了锁机制，并引入了事务隔离级别的概念。</p>
<h3 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h3><pre><code>在计算机科学，特别是程序设计、操作系统、多处理机和数据库等领域，并发控制（Concurrency control）是确保及时纠正由并发操作导致的错误的一种机制。
</code></pre><p>数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。下面举例说明并发操作带来的数据不一致性问题：</p>
<p>现有两处火车票售票点，同时读取某一趟列车车票数据库中车票余额为 X。两处售票点同时卖出一张车票，同时修改余额为 X -1写回数据库，这样就造成了实际卖出两张火车票而数据库中的记录却只少了一张。 产生这种情况的原因是因为两个事务读入同一数据并同时修改，其中一个事务提交的结果破坏了另一个事务提交的结果，导致其数据的修改被丢失，破坏了事务的隔离性。并发控制要解决的就是这类问题。</p>
<p>封锁、时间戳、乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>当并发事务同时访问一个资源时，有可能导致数据不一致，因此需要一种机制来将数据访问顺序化，以保证数据库数据的一致性。锁就是其中的一种机制。</p>
<p>在计算机科学中，锁是在执行多线程时用于强行限制资源访问的同步机制，即用于在并发控制中保证对互斥要求的满足。</p>
<h4 id="锁的分类-oracle"><a href="#锁的分类-oracle" class="headerlink" title="锁的分类(oracle)"></a>锁的分类(oracle)</h4><pre><code>一 按操作划分，可分为DML锁、DDL锁
二 按锁的粒度划分，可分为表级锁, 页级锁, 行级锁（mysql）
三 按锁级别划分，可分为共享锁、排它锁
四 按加锁方式划分，可分为自动锁、显示锁
五 按使用方式划分，可分为乐观锁, 悲观锁
</code></pre><p>DML锁（data locks，数据锁），用于保护数据的完整性，其中包括行级锁(Row Locks (TX锁))、表级锁(table lock(TM锁))。 DDL锁（dictionary locks，数据字典锁），用于保护数据库对象的结构，如表、索引等的结构定义。其中包排他DDL锁（Exclusive DDL lock）、共享DDL锁（Share DDL lock）、可中断解析锁（Breakable parse locks）</p>
<p>–转自 <a href="http://www.cnblogs.com/wang-meng/p/5506823.html" target="_blank" rel="external">《[数据库事务与锁]详解四: 数据库的锁机制》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库的读现象浅析中介绍过，在并发访问情况下，可能会出现脏读、不可重复读和幻读等读现象，为了应对这些问题，主流数据库都提供了锁机制，并引入了事务隔离级别的概念。&lt;/p&gt;
&lt;h3 id=&quot;并发控制&quot;&gt;&lt;a href=&quot;#并发控制&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="事物与锁" scheme="http://978420544.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>转【数据库事物与锁】浅谈@3：深入分析事务的隔离级别</title>
    <link href="http://978420544.github.io/2017/10/10/%E8%BD%AC%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81%E3%80%91%E6%B5%85%E8%B0%88-3%EF%BC%9A%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://978420544.github.io/2017/10/10/转【数据库事务与锁】浅谈-3：深入分析事务的隔离级别/</id>
    <published>2017-10-10T06:04:45.000Z</published>
    <updated>2017-10-10T08:24:19.955Z</updated>
    
    <content type="html"><![CDATA[<p>在DBMS中，事务保证了一个操作序列可以全部都执行或者全部都不执行（原子性），从一个状态转变到另外一个状态（一致性）。由于事务满足久性。所以一旦事务被提交之后，数据就能够被持久化下来，又因为事务是满足隔离性的，所以，当多个事务同时处理同一个数据的时候，多个事务直接是互不影响的，所以，在多个事务并发操作的过程中，如果控制不好隔离级别，就有可能产生脏读、不可重复读或者幻读等读现象。</p>
<p>在数据库事务的ACID四个属性中，隔离性是一个最常放松的一个。可以在数据操作过程中利用数据库的锁机制或者多版本并发控制机制获取更高的隔离等级。但是，随着数据库隔离级别的提高，数据的并发能力也会有所下降。所以，如何在并发性和隔离性之间做一个很好的权衡就成了一个至关重要的问题。</p>
<p>在软件开发中，几乎每类这样的问题都会有多种最佳实践来供我们参考，很多DBMS定义了多个不同的“事务隔离等级”来控制锁的程度和并发能力。</p>
<p>ANSI/ISO SQL定义的标准隔离级别有四种，从高到底依次为：可序列化(Serializable)、可重复读(Repeatable reads)、提交读(Read committed)、未提交读(Read uncommitted)。</p>
<pre><code>本文详细介绍四种事务隔离级别，并通过举例的方式说明不同的级别能解决什么样的读现象。
并且介绍了在关系型数据库中不同的隔离级别的实现原理。

下面将依次介绍这四种事务隔离级别的概念、用法以及解决了哪些问题（读现象）
</code></pre><h3 id="未提交读-Read-uncommitted"><a href="#未提交读-Read-uncommitted" class="headerlink" title="未提交读(Read uncommitted)"></a>未提交读(Read uncommitted)</h3><p>未提交读(READ UNCOMMITTED)是最低的隔离级别。通过名字我们就可以知道，在这种事务隔离级别下，一个事务可以读到另外一个事务未提交的数据。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><pre><code>事务在读数据的时候并未对数据加锁。
事务在修改数据的时候只对数据增加行级共享锁。
</code></pre><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><pre><code>事务1读取某行记录时，事务2也能对这行记录进行读取、更新（因为事务一并未对数据增加任何锁）

当事务2对该记录进行更新时，事务1再次读取该记录，能读到事务2对该记录的修改版本（因为事务二只增加了共享读锁，事务一可以再增加共享读锁读取数据），即使该修改尚未被提交。

事务1更新某行记录时，事务2不能对这行记录做更新，直到事务1结束。（因为事务一对数据增加了共享读锁，事务二不能增加排他写锁进行数据的修改）
</code></pre><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><pre><code>事务一共查询了两次，在两次查询的过程中，事务二对数据进行了修改，并未提交（commit）。
但是事务一的第二次查询查到了事务二的修改结果。在数据库的读现象浅析中我们介绍过，这种现象我们称之为脏读。

所以，未提交读会导致脏读
</code></pre><h3 id="提交读-Read-committed"><a href="#提交读-Read-committed" class="headerlink" title="提交读(Read committed)"></a>提交读(Read committed)</h3><p>提交读(READ COMMITTED)也可以翻译成读已提交，通过名字也可以分析出，在一个事务修改数据过程中，如果事务还没提交，其他事务不能读该数据。</p>
<h4 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h4><pre><code>事务对当前被读取的数据加 行级共享锁（当读到时才加锁），一旦读完该行，立即释放该行级共享锁；

事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加 行级排他锁，直到事务结束才释放。
</code></pre><h4 id="现象-2"><a href="#现象-2" class="headerlink" title="现象"></a>现象</h4><pre><code>事务1在读取某行记录的整个过程中，事务2都可以对该行记录进行读取（因为事务一对该行记录增加行级共享锁的情况下，事务二同样可以对该数据增加共享锁来读数据。）。

事务1读取某行的一瞬间，事务2不能修改该行数据，但是，只要事务1读取完改行数据，事务2就可以对该行数据进行修改。（事务一在读取的一瞬间会对数据增加共享锁，任何其他事务都不能对该行数据增加排他锁。但是事务一只要读完该行数据，就会释放行级共享锁，一旦锁释放，事务二就可以对数据增加排他锁并修改数据）

事务1更新某行记录时，事务2不能对这行记录做更新，直到事务1结束。（事务一在更新数据的时候，会对该行数据增加排他锁，知道事务结束才会释放锁，所以，在事务二没有提交之前，事务一都能不对数据增加共享锁进行数据的读取。所以，提交读可以解决脏读的现象）
</code></pre><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p>提交读这种隔离级别保证了读到的任何数据都是提交的数据，避免了脏读(dirty reads)。但是不保证事务重新读的时候能读到相同的数据，因为在每次数据读完之后其他事务可以修改刚才读到的数据。</p>
<h3 id="可重复读-Repeatable-reads"><a href="#可重复读-Repeatable-reads" class="headerlink" title="可重复读(Repeatable reads)"></a>可重复读(Repeatable reads)</h3><p>可重复读(REPEATABLE READS),由于提交读隔离级别会产生不可重复读的读现象。所以，比提交读更高一个级别的隔离级别就可以解决不可重复读的问题。这种隔离级别就叫可重复读（这名字起的是不是很任性！！）</p>
<h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><pre><code>事务在读取某数据的瞬间（就是开始读取的瞬间），必须先对其加 行级共享锁，直到事务结束才释放；

事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加 行级排他锁，直到事务结束才释放。
</code></pre><h4 id="现象-3"><a href="#现象-3" class="headerlink" title="现象"></a>现象</h4><pre><code>事务1在读取某行记录的整个过程中，事务2都可以对该行记录进行读取（因为事务一对该行记录增加行级共享锁的情况下，事务二同样可以对该数据增加共享锁来读数据。）。

事务1在读取某行记录的整个过程中，事务2都不能修改该行数据（事务一在读取的整个过程会对数据增加共享锁，直到事务提交才会释放锁，所以整个过程中，任何其他事务都不能对该行数据增加排他锁。所以，可重复读能够解决不可重复读的读现象）

事务1更新某行记录时，事务2不能对这行记录做更新，直到事务1结束。（事务一在更新数据的时候，会对该行数据增加排他锁，知道事务结束才会释放锁，所以，在事务二没有提交之前，事务一都能不对数据增加共享锁进行数据的读取。所以，提交读可以解决脏读的现象）
</code></pre><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p>1.事务一的第一次查询条件是age BETWEEN 10 AND 30;如果这是有十条记录符合条件。这时，他会给符合条件的这十条记录增加行级共享锁。任何其他事务无法更改这十条记录。</p>
<p>2.事务二执行一条sql语句，语句的内容是向表中插入一条数据。因为此时没有任何事务对表增加表级锁，所以，该操作可以顺利执行。</p>
<p>3.事务一再次执行SELECT * FROM users WHERE age BETWEEN 10 AND 30;时，结果返回的记录变成了十一条，比刚刚增加了一条，增加的这条正是事务二刚刚插入的那条。</p>
<p>所以，事务一的两次范围查询结果并不相同。这也就是幻读。</p>
<h3 id="可序列化-Serializable"><a href="#可序列化-Serializable" class="headerlink" title="可序列化(Serializable)"></a>可序列化(Serializable)</h3><p>可序列化(Serializable)是最高的隔离级别，前面提到的所有的隔离级别都无法解决的幻读，在可序列化的隔离级别中可以解决。</p>
<p>我们说过，产生幻读的原因是事务一在进行范围查询的时候没有增加范围锁(range-locks：给SELECT 的查询中使用一个“WHERE”子句描述范围加锁），所以导致幻读。</p>
<h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><pre><code>事务在读取数据时，必须先对其加 表级共享锁 ，直到事务结束才释放；

事务在更新数据时，必须先对其加 表级排他锁 ，直到事务结束才释放。
</code></pre><h4 id="现象-4"><a href="#现象-4" class="headerlink" title="现象"></a>现象</h4><pre><code>事务1正在读取A表中的记录时，则事务2也能读取A表，但不能对A表做更新、新增、删除，直到事务1结束。(因为事务一对表增加了表级共享锁，其他事务只能增加共享锁读取数据，不能进行其他任何操作）

事务1正在更新A表中的记录时，则事务2不能读取A表的任意记录，更不可能对A表做更新、新增、删除，直到事务1结束。（事务一对表增加了表级排他锁，其他事务不能对表增加共享锁或排他锁，也就无法进行任何操作）
</code></pre><p>虽然可序列化解决了脏读、不可重复读、幻读等读现象。但是序列化事务会产生以下效果：</p>
<p>1.无法读取其它事务已修改但未提交的记录。</p>
<p>2.在当前事务完成之前，其它事务不能修改目前事务已读取的记录。</p>
<p>3.在当前事务完成之前，其它事务所插入的新记录，其索引键值不能在当前事务的任何语句所读取的索引键范围中。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>四种事务隔离级别从隔离程度上越来越高，但同时在并发性上也就越来越低。之所以有这么几种隔离级别，就是为了方便开发人员在开发过程中根据业务需要选择最合适的隔离级别。</p>
<p>–转自 <a href="http://www.cnblogs.com/wang-meng/p/5506755.html" target="_blank" rel="external">《[数据库事务与锁]详解三: 深入分析事务的隔离级别》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在DBMS中，事务保证了一个操作序列可以全部都执行或者全部都不执行（原子性），从一个状态转变到另外一个状态（一致性）。由于事务满足久性。所以一旦事务被提交之后，数据就能够被持久化下来，又因为事务是满足隔离性的，所以，当多个事务同时处理同一个数据的时候，多个事务直接是互不影响
    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="事物与锁" scheme="http://978420544.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>转【数据库事务与锁】浅谈@2：数据库的读现象</title>
    <link href="http://978420544.github.io/2017/10/10/%E8%BD%AC%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81%E3%80%91%E6%B5%85%E8%B0%88-2%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%BB%E7%8E%B0%E8%B1%A1/"/>
    <id>http://978420544.github.io/2017/10/10/转【数据库事务与锁】浅谈-2：数据库的读现象/</id>
    <published>2017-10-10T05:39:39.000Z</published>
    <updated>2017-10-10T08:24:34.914Z</updated>
    
    <content type="html"><![CDATA[<p>“读现象”是多个事务并发执行时，在读取数据方面可能碰到的状况。其中包括脏读、不可重复读和幻读。</p>
<h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>脏读又称无效数据的读出，是指在数据库访问中，事务T1将某一值修改，然后事务T2读取该值，此后T1因为某种原因撤销对该值的修改，这就导致了T2所读取到的数据是无效的。</p>
<p>脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交(commit)到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。</p>
<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>不可重复读，是指在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。</p>
<p>一种更易理解的说法是：在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问该同一数据。那么，在第一个事务的两次读数据之间。由于第二个事务的修改，那么第一个事务读到的数据可能不一样，这样就发生了在一个事务内两次读到的数据是不一样的，因此称为不可重复读，即原始读取不可重复。</p>
<h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><pre><code>幻读(phantom read)”是不可重复读(Non-repeatable reads)的一种特殊场景：当事务没有获取范围锁的情况下执行SELECT … WHERE操作可能会发生“幻影读(phantom read)”。
</code></pre><p>幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样.一般解决幻读的方法是增加范围锁RangeS，锁定检锁范围为只读，这样就避免了幻读。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>要想解决脏读、不可重复读、幻读等读现象，那么就需要提高事务的隔离级别。但与此同时，事务的隔离级别越高，并发能力也就越低。所以，还需要读者根据业务需要进行权衡。</p>
<p>–转自 <a href="http://www.cnblogs.com/wang-meng/p/5506755.html" target="_blank" rel="external">《[数据库事务与锁]详解二: 数据库的读现象浅析》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“读现象”是多个事务并发执行时，在读取数据方面可能碰到的状况。其中包括脏读、不可重复读和幻读。&lt;/p&gt;
&lt;h3 id=&quot;脏读&quot;&gt;&lt;a href=&quot;#脏读&quot; class=&quot;headerlink&quot; title=&quot;脏读&quot;&gt;&lt;/a&gt;脏读&lt;/h3&gt;&lt;p&gt;脏读又称无效数据的读出，是指在
    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="事物与锁" scheme="http://978420544.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>转【数据库事务与锁】浅谈@1：彻底理解数据库事务</title>
    <link href="http://978420544.github.io/2017/10/10/%E8%BD%AC%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81%E3%80%91%E6%B5%85%E8%B0%88-1%EF%BC%9A%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    <id>http://978420544.github.io/2017/10/10/转【数据库事务与锁】浅谈-1：彻底理解数据库事务/</id>
    <published>2017-10-10T04:49:28.000Z</published>
    <updated>2017-10-10T08:24:54.307Z</updated>
    
    <content type="html"><![CDATA[<p>事务(Transaction)，一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。在计算机术语中，事务通常就是指数据库事务。</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一个数据库事务通常包含对数据库进行读或写的一个操作序列。它的存在包含有以下两个目的：</p>
<pre><code>1、为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。
2、当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。
</code></pre><p>当一个事务被提交给了DBMS（数据库管理系统），则DBMS需要确保该事务中的所有操作都成功完成且其结果被永久保存在数据库中，如果事务中有的操作没有成功完成，则事务中的所有操作都需要被回滚，回到事务执行前的状态（要么全执行，要么全都不执行）;同时，该事务对数据库或者其他事务的执行无影响，所有的事务都好像在独立的运行。</p>
<p>但在现实情况下，失败的风险很高。在一个数据库事务的执行过程中，有可能会遇上事务操作失败、数据库系统/操作系统失败，甚至是存储介质失败等情况。这便需要DBMS对一个执行失败的事务执行恢复操作，将其数据库状态恢复到一致状态（数据的一致性得到保证的状态）。为了实现将数据库状态恢复到一致状态的功能，DBMS通常需要维护事务日志以追踪事务中所有影响数据库数据的操作。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>并非任意的对数据库的操作序列都是数据库事务。事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。</p>
<pre><code>原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。
一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。
隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。
持久性（Durability）：一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。
</code></pre><h4 id="原子性与隔离行"><a href="#原子性与隔离行" class="headerlink" title="原子性与隔离行"></a>原子性与隔离行</h4><p>一致性与原子性是密切相关的,原子性的破坏可能导致数据库的不一致，数据的一致性问题并不都和原子性有关。<br>比如刚刚的例子，在第五步的时候，对B账户做加法时只加了50元。那么该过程可以符合原子性，但是数据的一致性就出现了问题。</p>
<p>因此，事务的原子性与一致性缺一不可。</p>
<p>–转自 <a href="http://www.cnblogs.com/wang-meng/p/5506745.html" target="_blank" rel="external">《[数据库事务与锁]详解一: 彻底理解数据库事务》</a></p>
<h3 id="特性浅析"><a href="#特性浅析" class="headerlink" title="特性浅析"></a>特性浅析</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><pre><code>无论一个事务里有多少执行步骤，这所有的步骤合起来是一个最小的执行单元，要么不做，要么全做，不存在只做到一半情况。比如银行转账，转出跟转入这两个包含在一个事务里的动作就是原子的。要么不转出也不转入，转出了就要转入。
</code></pre><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><pre><code>事务执行前与执行后数据内在的逻辑始终是成立的。比如转账前与转账后两人存款的总和始终不变。
</code></pre><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><pre><code>虽说事务是原子的，要么不做，要么全做，不存在做一半的情况。但是从代码实现上来说，事务里的步骤还是一步一步执行的，还是存在事务做到一半的情况。比如转账，代码怎么写？就两行代码，是先转出扣钱，再转入加钱。两行代码中间，也就是转出之后，转入之前，此时数据是不一致的。那怎样始终保证数据一致？那就用一个类似自欺欺人的办法，让转账这个事务在完成之前对别人都不可见，事务完成之前别人看到的都是转账前的状态，看不到转账步骤中间不一致的状态，所谓”隔离”。
</code></pre><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><pre><code>事务做完了就是做完了，就生效了。就像钱转给别人后当前这比转账交易就结束了，不可能再倒回来。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事务(Transaction)，一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。在计算机术语中，事务通常就是指数据库事务。&lt;/p&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerl
    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="事物与锁" scheme="http://978420544.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>Java定时任务集群部署方式浅谈</title>
    <link href="http://978420544.github.io/2017/10/09/Java%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E6%B5%85%E8%B0%88/"/>
    <id>http://978420544.github.io/2017/10/09/Java定时任务集群部署方式浅谈/</id>
    <published>2017-10-09T06:22:22.000Z</published>
    <updated>2017-10-09T06:35:00.391Z</updated>
    
    <content type="html"><![CDATA[<p>本篇基于QUARTZ的定时任务，主要介绍一下定时任务的集群部署方式，方法一：QUARTZ支持的集群部署；方法二：通过HTTP调用的集群部署。</p>
<h3 id="任务调度-Job"><a href="#任务调度-Job" class="headerlink" title="任务调度 Job"></a>任务调度 Job</h3><p>任务调度 Job 如同数据库作业或 Windows计划任务，是分布式系统中异步和批处理的关键。我们的 Job分为 WinJob 和 HttpJob：WinJob是操作系统级别的定时任务，使用开源的框架Quartz 实现；而 HttpJob 则是采用 URL方式可定时调用微服务。HttpJob 借助集群巧妙地解决了 WinJob的单点和发布问题，并集中管理所有的调度规则，调度规则有简单规则和 Cron 表达式。HttpJob 它简单易用，但间隔时间不能低于 1分钟，毕竟通过 URL 方式来调度并不高效。</p>
<p>–转自 <a href="http://mp.weixin.qq.com/s/AbUGOWN27FEUPWgDQkF_Dw" target="_blank" rel="external">《可参考的才是有价值的：中小型研发团队架构落地实践18篇，含案例、代码》</a></p>
<h3 id="QUARTZ模式"><a href="#QUARTZ模式" class="headerlink" title="QUARTZ模式"></a>QUARTZ模式</h3><p>一个Quartz集群中的每个节点是一个独立的Quartz应用，它又管理着其他的节点。这就意味着你必须对每个节点分别启动或停止。Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一Quartz应用的。</p>
<p>　<br>Quartz Scheduler自身是察觉不到被集群的，只有配置给Scheduler的JDBC JobStore才知道。当QuartzScheduler启动时，它调用JobStore的schedulerStarted()方法，它告诉JobStoreScheduler已经启动了。schedulerStarted() 方法是在JobStoreSupport类中实现的。JobStoreSupport类会根据quartz.properties文件中的设置来确定Scheduler实例是否参与到集群中。假如配置了集群，一个新的ClusterManager类的实例就被创建、初始化并启动。ClusterManager是在JobStoreSupport类中的一个内嵌类，继承了java.lang.Thread，它会定期运行，并对Scheduler实例执行检入的功能。Scheduler也要查看是否有任何一个别的集群节点失败了。检入操作执行周期在quartz.properties中配置。</p>
<p>–转自 <a href="http://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html" target="_blank" rel="external">《Quartz集群原理及配置应用》</a></p>
<h3 id="HTTP模式"><a href="#HTTP模式" class="headerlink" title="HTTP模式"></a>HTTP模式</h3><p>HTTP模式，简而言之就是URL调用模式，通过发布的微服务调用来完成对应的任务，相应的定时可采用对应合适的调度工具，定时触发这些URL的调用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇基于QUARTZ的定时任务，主要介绍一下定时任务的集群部署方式，方法一：QUARTZ支持的集群部署；方法二：通过HTTP调用的集群部署。&lt;/p&gt;
&lt;h3 id=&quot;任务调度-Job&quot;&gt;&lt;a href=&quot;#任务调度-Job&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
      <category term="QUARTZ" scheme="http://978420544.github.io/categories/quartz/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
      <category term="Spring" scheme="http://978420544.github.io/tags/spring/"/>
    
      <category term="QUARTZ" scheme="http://978420544.github.io/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>JAVA中文编码和中文字符长度问题和解决方案</title>
    <link href="http://978420544.github.io/2017/07/28/JAVA%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E5%92%8C%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E9%95%BF%E5%BA%A6%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://978420544.github.io/2017/07/28/JAVA中文编码和中文字符长度问题和解决方案/</id>
    <published>2017-07-28T02:38:26.000Z</published>
    <updated>2017-07-28T02:39:56.145Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/u012506661/article/details/52752541" target="_blank" rel="external">【转】JAVA中文编码和中文字符长度问题和解决方案</a></p>
<p>本文说明了Java对中文问题产生的原因，并给出了对中文问题的解决方案。同时引发出了对中英文混和的字符串的长度问题，并且给出解决方案的实现。</p>
<h3 id="1-Java中文问题的产生"><a href="#1-Java中文问题的产生" class="headerlink" title="1.Java中文问题的产生"></a>1.Java中文问题的产生</h3><p>Java为了对全球的常用文字编码系统进行处理，采用了Unicode字符编码集。Unicode字符编码集是一种重要的交互和显示的通用字符编码标准，常见的有UTF-8、UTF-16、UCS-2、UCS-4等。国际标准组织为中文、日文和韩文字符（即CJK大字符集）对应的数据区间主要是4E00-9FFF，每一个字符对应惟一的一个编码。例如，“中文”这两个字对应的Unicode码分别是：0x4E2D、0x6587。下面这段代码System.out.println((char)0x4E2D + “” + (char)0x6587 ) ;就可以打印出“中文”来。我们通常使用的字符编码是一种双字节字符集（DBCS）。它与Unicode的编码机制有很大差别。Java语言的中文处理问题一般就是，如何将DBCS编码的字节串相互转换为正确的Unicode编码的字符串。所有中文问题的出现都是因为字节串没有被正确转换所至。中文问题的出现一般都是在几种不同语言的操作系统中交互信息的时候出现的。</p>
<h3 id="2-Java中文问题解决方案"><a href="#2-Java中文问题解决方案" class="headerlink" title="2.Java中文问题解决方案"></a>2.Java中文问题解决方案</h3><p>首先，请确保你的JDK的版本是稳定的新版本，这是正确处理Java中文问题的前提条件。</p>
<h4 id="2-1其他内码和Unicode码之间的转换"><a href="#2-1其他内码和Unicode码之间的转换" class="headerlink" title="2.1其他内码和Unicode码之间的转换"></a>2.1其他内码和Unicode码之间的转换</h4><p>解决问题的根源在于正确的处理各种内码和Unicode码进行相互转换。Java的String类提供了转换方法，具体用法是new String( byte[] , encoding ) ，即为用指定的字符编码方式转换指定的字节数组生成一个新的String。<br>比如：String abc = new String ( “hi…中文”.getBytes( “GB2312” ) , “GB2312” ) ;<br>其中，”hi…中文”.getBytes( “GB2312” )是按照GB2312的字符编码方式把该 String 转换成字节数组。然后再按照GB2312的方式生成一个abc的String对象。</p>
<h4 id="2-2让JDK用你指定的编码方式编译程序"><a href="#2-2让JDK用你指定的编码方式编译程序" class="headerlink" title="2.2让JDK用你指定的编码方式编译程序"></a>2.2让JDK用你指定的编码方式编译程序</h4><p>在用javac编译程序时，编译器会用系统的默认编码来编译Java程序。用如下命令编译javac -encoding GB2312 Xxx.java，则是指定用GB2312的编码来进行编译。</p>
<h4 id="2-3JDBC中的中文问题"><a href="#2-3JDBC中的中文问题" class="headerlink" title="2.3JDBC中的中文问题"></a>2.3JDBC中的中文问题</h4><p>JDBC（Java DataBase Connectivity）是Java程序访问数据库的一个统一的接口。JDBC在网络传输过程中，大多数会采用本地编码格式来传输中文字符，例如中文字符“0x4175”会被转成“0x41”和“0x75”进行传输。因此需要对 JDBC返回的字符以及要发给JDBC的字符进行转换。当用JDBC向数据库中插入数据和查询数据时，则需要作编码转换。所以当应用程序访问数据时，在入口和出口处都要作编码转换。对于中文数据，数据库字符编码的设置应当保证数据的完整性，比如GB2312、GBK、UTF-8 等都是可选的数据库编码。<br>比如：转换成UTF-8进行传输<br>sqlstr1 = new String(sqlstr1.getBytes(“GB2312”),” “UTF-8”);<br>转换成GB2312码进行显示<br>sqlstr2 = new String(sqlstr2.getBytes(“UTF-8”),”GB2312”);</p>
<h3 id="3-Java中文编码失败情况说明"><a href="#3-Java中文编码失败情况说明" class="headerlink" title="3.Java中文编码失败情况说明"></a>3.Java中文编码失败情况说明</h3><p>如果出现编码失败，在显示时会出现两种结果：“?”或者“□”。“?”表示转码错误；“□”表示转码失败。如果出现“?”，只有追本溯源查找问题所在才能解决问题；如果出现“□”，则表示可以在此基础上进一步进行转码操作直到成功。</p>
<h3 id="4-Java中文编码带来的字符串长度问题"><a href="#4-Java中文编码带来的字符串长度问题" class="headerlink" title="4.Java中文编码带来的字符串长度问题"></a>4.Java中文编码带来的字符串长度问题</h3><p>Java的中文问题处理系统除了在显示方面会出现问题外，还会对包含中文字符的字符串的长度的判断带来一定的问题。在C语言中，一个中文字符是2个字节，而在Java程序中，中文字符的长度是根据编码不同而不同的。下面的程序就可以看出问题所在。<br>测试程序如下，测试字符串为“中文abc”，测试平台为中文Win XP sp2。<br>public class ChineseCharacterTest<br>{<br>    public static void main( String [] args ) throws Exception<br>    {<br>        //按iso8859-1编码<br>        String iso = new String( “中文abc”.getBytes( “GB2312” ) , “ISO8859-1” );<br>        //按GB2312编码<br>        String gb = new String( iso.getBytes( “ISO8859-1” ) , “gb2312” ) ;<br>        //按utf-8编码<br>        String utf_8 = new String( iso.getBytes( “ISO8859-1” ) , “UTF-8” ) ;<br>//下面分别打印出编码后的字符串和长度<br>        System.out.println( “iso is :” + iso + “, the length is:” + iso.length() ) ;<br>        System.out.println( “gb is :” + gb + “, the length is :” + gb.length() ) ;<br>        System.out.println( “utf-8 is:” + utf_8 + “, the length is :” + utf_8.length() ) ;<br>    }<br>}<br>用GB2312编码进行编译程序，其运行结果是：<br>iso is :????????abc, the length is:7<br>gb is :中文abc, the length is :5<br>utf-8 is:????????abc, the length is :7<br>可以看出，在ISO8859-1和UTF-8中一个中文字符按照2个长度单位处理，在GB编码中一个中文字符按照1个长度单位处理。这样在进行字符截取时就要相当注意这个问题。如果在ISO8859-1或UTF-8中一不小心将中文截去半个，将会出现致命的错误。</p>
<h3 id="5-中文字符长度问题的解决方案"><a href="#5-中文字符长度问题的解决方案" class="headerlink" title="5.中文字符长度问题的解决方案"></a>5.中文字符长度问题的解决方案</h3><h4 id="5-1为了更好的解决中文字符的长度，我们设计并实现了下面的方法。基本思想是根据中文编码的编码区间，判断字符是否为中文字符，然后再作进一步的处理。"><a href="#5-1为了更好的解决中文字符的长度，我们设计并实现了下面的方法。基本思想是根据中文编码的编码区间，判断字符是否为中文字符，然后再作进一步的处理。" class="headerlink" title="5.1为了更好的解决中文字符的长度，我们设计并实现了下面的方法。基本思想是根据中文编码的编码区间，判断字符是否为中文字符，然后再作进一步的处理。"></a>5.1为了更好的解决中文字符的长度，我们设计并实现了下面的方法。基本思想是根据中文编码的编码区间，判断字符是否为中文字符，然后再作进一步的处理。</h4><p>程序如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> getChineseLength( <span class="keyword">String</span> name , <span class="keyword">String</span> endcoding )</div><div class="line">        <span class="keyword">throws</span> Exception&#123;</div><div class="line">    <span class="built_in">int</span> len = <span class="number">0</span> ; <span class="comment">//定义返回的字符串长度</span></div><div class="line">    <span class="built_in">int</span> j = <span class="number">0</span> ;</div><div class="line">    <span class="comment">//按照指定编码得到byte[]</span></div><div class="line">    <span class="built_in">byte</span> [] b_name = name.getBytes( endcoding ) ;</div><div class="line">    <span class="keyword">while</span> ( <span class="keyword">true</span> )&#123;</div><div class="line">        <span class="keyword">short</span> tmpst = (<span class="keyword">short</span>) ( b_name[ j ] &amp; <span class="number">0xF0</span> ) ;</div><div class="line">        <span class="keyword">if</span> ( tmpst &gt;= <span class="number">0xB0</span> )&#123;</div><div class="line">            <span class="keyword">if</span> ( tmpst &lt; <span class="number">0xC0</span> )&#123;</div><div class="line">                j += <span class="number">2</span> ;</div><div class="line">                len += <span class="number">2</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( ( tmpst == <span class="number">0xC0</span> ) || ( tmpst == <span class="number">0xD0</span> ) )&#123;</div><div class="line">                j += <span class="number">2</span> ;</div><div class="line">                len += <span class="number">2</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( tmpst == <span class="number">0xE0</span> )&#123;</div><div class="line">                j += <span class="number">3</span> ;</div><div class="line">                len += <span class="number">2</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( tmpst == <span class="number">0xF0</span> )&#123;</div><div class="line">                <span class="keyword">short</span> tmpst0 = (<span class="keyword">short</span>) ( ( (<span class="keyword">short</span>) b_name[ j ] ) &amp; <span class="number">0x0F</span> ) ;</div><div class="line">                <span class="keyword">if</span> ( tmpst0 == <span class="number">0</span> )&#123;</div><div class="line">                    j += <span class="number">4</span> ;</div><div class="line">                    len += <span class="number">2</span> ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( ( tmpst0 &gt; <span class="number">0</span> ) &amp;&amp; ( tmpst0 &lt; <span class="number">12</span> ) )&#123;</div><div class="line">                    j += <span class="number">5</span> ;</div><div class="line">                    len += <span class="number">2</span> ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( tmpst0 &gt; <span class="number">11</span> )&#123;</div><div class="line">                    j += <span class="number">6</span> ;</div><div class="line">                    len += <span class="number">2</span> ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            j += <span class="number">1</span> ;</div><div class="line">            len += <span class="number">1</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( j &gt; b_name.length - <span class="number">1</span> )&#123;</div><div class="line">            <span class="keyword">break</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-2-使用GBK编码解决"><a href="#5-2-使用GBK编码解决" class="headerlink" title="5.2 使用GBK编码解决"></a>5.2 使用GBK编码解决</h4><p>中文字符在Java中默认使用Unicode编码为一个字节，使用GBK编码则为两个字节，因此转出的Byte数组的长度和真是的中文格式的字符长度一致（包含中文特殊字符）</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">messageBody.getBytes(<span class="string">"GBK"</span>)<span class="selector-class">.length</span> <span class="comment">//中文字符长度都是两个字节</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/u012506661/article/details/52752541&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【转】JAVA中文编码和中文字符长度问题和解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文
    
    </summary>
    
      <category term="Java" scheme="http://978420544.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis批量insert总结</title>
    <link href="http://978420544.github.io/2017/05/27/Mybatis%E6%89%B9%E9%87%8Finsert%E6%80%BB%E7%BB%93/"/>
    <id>http://978420544.github.io/2017/05/27/Mybatis批量insert总结/</id>
    <published>2017-05-27T05:51:47.000Z</published>
    <updated>2017-05-27T05:53:09.740Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis的强大和方便，不用多说，原生的SQL编码可以让程序员几乎不用学习新的语法和模式，同时简化了大量的代码；同样批量处理的insert也是要靠原生的sql打出一片天地。</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBatchUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> &gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></div><div class="line">        insert into user(name,age) values(#<span class="template-variable">&#123;item.name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;item.age&#125;</span><span class="xml">)</span></div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBatchUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> &gt;</span></span></div><div class="line">insert into user(name,age) values</div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></div><div class="line">        (#<span class="template-variable">&#123;item.name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;item.age&#125;</span><span class="xml">)</span></div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<h6 id="注意：Mybatis并没有做集合容量的验证，如果集合参数为空或者size为0则生成的sql可能只有”insert-into-user-name-age-values”这样一段或者没有，所以说，写批量sql的时候注意在调用批量方法的地方加入对容量的验证"><a href="#注意：Mybatis并没有做集合容量的验证，如果集合参数为空或者size为0则生成的sql可能只有”insert-into-user-name-age-values”这样一段或者没有，所以说，写批量sql的时候注意在调用批量方法的地方加入对容量的验证" class="headerlink" title="注意：Mybatis并没有做集合容量的验证，如果集合参数为空或者size为0则生成的sql可能只有”insert into user(name,age) values”这样一段或者没有，所以说，写批量sql的时候注意在调用批量方法的地方加入对容量的验证"></a>注意：Mybatis并没有做集合容量的验证，如果集合参数为空或者size为0则生成的sql可能只有”insert into user(name,age) values”这样一段或者没有，所以说，写批量sql的时候注意在调用批量方法的地方加入对容量的验证</h6><h6 id="对Mybatis批量限制的一些想法，批量SQL使用事物提交，同时提交3万左右的数据量，并不会超出限制，因此感觉事物的提交，几万条数据或者更多都没有问题，只是处理时间会越来越长，同时提交3万左右的数据大概在3-4分钟左右，越多会越来越慢，越少则越来越快，如果数据量大的话，尽量考虑用分页的方式提交，分页的量，需要单独测试最合适的量，如果说3万数据量，1000条提交一次，处理的时间会远远小于一次提交的处理时间"><a href="#对Mybatis批量限制的一些想法，批量SQL使用事物提交，同时提交3万左右的数据量，并不会超出限制，因此感觉事物的提交，几万条数据或者更多都没有问题，只是处理时间会越来越长，同时提交3万左右的数据大概在3-4分钟左右，越多会越来越慢，越少则越来越快，如果数据量大的话，尽量考虑用分页的方式提交，分页的量，需要单独测试最合适的量，如果说3万数据量，1000条提交一次，处理的时间会远远小于一次提交的处理时间" class="headerlink" title="对Mybatis批量限制的一些想法，批量SQL使用事物提交，同时提交3万左右的数据量，并不会超出限制，因此感觉事物的提交，几万条数据或者更多都没有问题，只是处理时间会越来越长，同时提交3万左右的数据大概在3-4分钟左右，越多会越来越慢，越少则越来越快，如果数据量大的话，尽量考虑用分页的方式提交，分页的量，需要单独测试最合适的量，如果说3万数据量，1000条提交一次，处理的时间会远远小于一次提交的处理时间"></a>对Mybatis批量限制的一些想法，批量SQL使用事物提交，同时提交3万左右的数据量，并不会超出限制，因此感觉事物的提交，几万条数据或者更多都没有问题，只是处理时间会越来越长，同时提交3万左右的数据大概在3-4分钟左右，越多会越来越慢，越少则越来越快，如果数据量大的话，尽量考虑用分页的方式提交，分页的量，需要单独测试最合适的量，如果说3万数据量，1000条提交一次，处理的时间会远远小于一次提交的处理时间</h6><h5 id="foreach简介"><a href="#foreach简介" class="headerlink" title="foreach简介"></a>foreach简介</h5><p>对于foreach标签的解释参考了网上的资料，具体如下：<br>foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。<br>foreach元素的属性主要有 item，index，collection，open，separator，close。<br>item表示集合中每一个元素进行迭代时的别名，index指定一个名字，用于表示在迭代过程中，每次迭代到的位置，open表示该语句以什么开始，separator表示在每次进行迭代之间以什么符号作为分隔 符，close表示以什么结束，在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况 下，该属性的值是不一样的，主要有一下3种情况：</p>
<ul>
<li>1.如果传入的是单参数且参数类型是一个List的时候，collection属性值为list</li>
<li>2.如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array</li>
<li>3.如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis的强大和方便，不用多说，原生的SQL编码可以让程序员几乎不用学习新的语法和模式，同时简化了大量的代码；同样批量处理的insert也是要靠原生的sql打出一片天地。&lt;/p&gt;
&lt;h4 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="Mybatis" scheme="http://978420544.github.io/categories/mybatis/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
      <category term="Mybatis" scheme="http://978420544.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>关于FTP的上传下载（Java）</title>
    <link href="http://978420544.github.io/2017/05/27/%E5%85%B3%E4%BA%8EFTP%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%EF%BC%88Java%EF%BC%89/"/>
    <id>http://978420544.github.io/2017/05/27/关于FTP的上传下载（Java）/</id>
    <published>2017-05-27T03:47:41.000Z</published>
    <updated>2017-05-27T03:49:03.775Z</updated>
    
    <content type="html"><![CDATA[<p>最近，在做一个账单文件的业务，遇到了一些问题，几经周折，终于把功能业务完善，希望对大家有所帮助！</p>
<h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>调用某接口，接收一个文件，文件的传输形式为返回报文中的一个字段，字段值为文件内容，需要Base64解码，读取文件需要将这个文件内容字符串转化为zip读取？</p>
<h5 id="String转化Zip文件"><a href="#String转化Zip文件" class="headerlink" title="String转化Zip文件"></a>String转化Zip文件</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String</span> STR=<span class="string">""</span>;</div><div class="line">InputStream DateByte = <span class="keyword">new</span> ByteArrayInputStream(SecurityUtil.Base64Decode(STR));<span class="comment">//把获取的zip文件的byte放入输入流</span></div><div class="line"><span class="built_in">File</span> targetFile = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"F:\\XX.zip"</span>); </div><div class="line">targetFile.createNewFile(); <span class="comment">//创建文件</span></div><div class="line">OutputStream outStream = <span class="keyword">new</span> FileOutputStream(targetFile); </div><div class="line"><span class="keyword">byte</span>[] by = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; </div><div class="line"><span class="built_in">while</span> (DateByte.<span class="built_in">available</span>() &gt; <span class="number">0</span>) </div><div class="line">&#123; </div><div class="line">	DateByte.<span class="built_in">read</span>(by); <span class="comment">//读取接收的文件流</span></div><div class="line">	outStream.<span class="built_in">write</span>(by); <span class="comment">//写入文件</span></div><div class="line">&#125; </div><div class="line">DateByte.<span class="built_in">close</span>(); </div><div class="line">outStream.<span class="built_in">flush</span>(); </div><div class="line">outStream.<span class="built_in">close</span>();</div></pre></td></tr></table></figure>
<h5 id="解码为专用解码，如果转成的文件不对要看看解码的方式对不对"><a href="#解码为专用解码，如果转成的文件不对要看看解码的方式对不对" class="headerlink" title="解码为专用解码，如果转成的文件不对要看看解码的方式对不对"></a>解码为专用解码，如果转成的文件不对要看看解码的方式对不对</h5><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p>需要把文件上传至FTP，但是zip文件为二进制文件，需要做二进制传输方式的设置？</p>
<h5 id="FTP上传和下载（二进制形式）"><a href="#FTP上传和下载（二进制形式）" class="headerlink" title="FTP上传和下载（二进制形式）"></a>FTP上传和下载（二进制形式）</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPClient;</div><div class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPFile;</div><div class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPReply;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ftpUtil</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ftpUtil.class);</div><div class="line">	<span class="comment">/** </span></div><div class="line">	02. * Description: 从FTP服务器下载文件 </div><div class="line">	04. * <span class="doctag">@param</span> url FTP服务器hostname </div><div class="line">	05. * <span class="doctag">@param</span> port FTP服务器端口 </div><div class="line">	06. * <span class="doctag">@param</span> username FTP登录账号 </div><div class="line">	07. * <span class="doctag">@param</span> password FTP登录密码 </div><div class="line">	08. * <span class="doctag">@param</span> remotePath FTP服务器上的相对路径 </div><div class="line">	09. * <span class="doctag">@param</span> fileName 要下载的文件名 </div><div class="line">	10. * <span class="doctag">@param</span> localPath 下载后保存到本地的路径 </div><div class="line">	11. * <span class="doctag">@return</span> </div><div class="line">	12. */  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">downFile</span><span class="params">(String url, <span class="keyword">int</span> port, String username,</span></span></div><div class="line">			String password, String remotePath, String fileName,</div><div class="line">			String localPath) &#123;</div><div class="line">		<span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">		FTPClient ftp = <span class="keyword">new</span> FTPClient();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">int</span> reply;</div><div class="line">			ftp.connect(url, port);</div><div class="line">			<span class="comment">// 如果采用默认端口，可以使用ftp.connect(url)的方式直接连接FTP服务器</span></div><div class="line">			ftp.login(username, password);<span class="comment">// 登录</span></div><div class="line">			ftp.setFileType(FTPClient.BINARY_FILE_TYPE);<span class="comment">//文件类型		</span></div><div class="line">			reply = ftp.getReplyCode();</div><div class="line">			<span class="keyword">if</span> (!FTPReply.isPositiveCompletion(reply)) &#123;</div><div class="line">				ftp.disconnect();</div><div class="line">				<span class="keyword">return</span> success;</div><div class="line">			&#125;</div><div class="line">			ftp.changeWorkingDirectory(remotePath);<span class="comment">// 转移到FTP服务器目录</span></div><div class="line">			ftp.enterLocalPassiveMode();</div><div class="line">			 </div><div class="line">			FTPFile[] fs = ftp.listFiles();</div><div class="line">			<span class="keyword">for</span> (FTPFile ff : fs) &#123;</div><div class="line">				<span class="keyword">if</span> (ff.getName().equals(fileName)) &#123;</div><div class="line">					File localFile = <span class="keyword">new</span> File(localPath + ff.getName());</div><div class="line">					OutputStream is = <span class="keyword">new</span> FileOutputStream(localFile);</div><div class="line">					ftp.retrieveFile(ff.getName(), is);</div><div class="line">					is.close();</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			ftp.logout();</div><div class="line">			success = <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			logger.<span class="keyword">error</span>(e.getMessage());</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (ftp.isConnected()) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					ftp.disconnect();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> success;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Description: 向FTP服务器上传文件</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@Version</span>1.0 Jul 27, 2008 4:31:09 PM by  创建</div><div class="line">	 * <span class="doctag">@param</span> url</div><div class="line">	 *            FTP服务器hostname</div><div class="line">	 * <span class="doctag">@param</span> port</div><div class="line">	 *            FTP服务器端口</div><div class="line">	 * <span class="doctag">@param</span> username</div><div class="line">	 *            FTP登录账号</div><div class="line">	 * <span class="doctag">@param</span> password</div><div class="line">	 *            FTP登录密码</div><div class="line">	 * <span class="doctag">@param</span> path</div><div class="line">	 *            FTP服务器保存目录</div><div class="line">	 * <span class="doctag">@param</span> filename</div><div class="line">	 *            上传到FTP服务器上的文件名</div><div class="line">	 * <span class="doctag">@param</span> input</div><div class="line">	 *            输入流</div><div class="line">	 * <span class="doctag">@return</span> 成功返回true，否则返回false</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">uploadFile</span><span class="params">(String url, <span class="keyword">int</span> port, String username,</span></span></div><div class="line">			String password, String path, String filename, InputStream input) &#123;</div><div class="line">		<span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">		FTPClient ftp = <span class="keyword">new</span> FTPClient();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">int</span> reply;</div><div class="line">			ftp.connect(url, port);<span class="comment">// 连接FTP服务器</span></div><div class="line">			<span class="comment">// 如果采用默认端口，可以使用ftp.connect(url)的方式直接连接FTP服务器</span></div><div class="line">			ftp.login(username, password);<span class="comment">// 登录</span></div><div class="line">			reply = ftp.getReplyCode();</div><div class="line">			<span class="keyword">if</span> (!FTPReply.isPositiveCompletion(reply)) &#123;</div><div class="line">				ftp.disconnect();</div><div class="line">				<span class="keyword">return</span> success;</div><div class="line">			&#125;</div><div class="line">			ftp.setFileType(FTPClient.BINARY_FILE_TYPE);</div><div class="line">			ftp.changeWorkingDirectory(path);</div><div class="line">			ftp.enterLocalPassiveMode();</div><div class="line">			ftp.storeFile(filename, input);</div><div class="line"></div><div class="line">			input.close();</div><div class="line">			ftp.logout();</div><div class="line">			success = <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			logger.<span class="keyword">error</span>(e.getMessage());</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (ftp.isConnected()) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					ftp.disconnect();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> success;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="注意：二进制不仅代码中要设置，对应的FTP服务器也需要设置对应的传输方式"><a href="#注意：二进制不仅代码中要设置，对应的FTP服务器也需要设置对应的传输方式" class="headerlink" title="注意：二进制不仅代码中要设置，对应的FTP服务器也需要设置对应的传输方式"></a>注意：二进制不仅代码中要设置，对应的FTP服务器也需要设置对应的传输方式</h5><h5 id="二进制设置"><a href="#二进制设置" class="headerlink" title="二进制设置"></a>二进制设置</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ftp</span><span class="selector-class">.setFileType</span>(<span class="selector-tag">FTPClient</span><span class="selector-class">.BINARY_FILE_TYPE</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，在做一个账单文件的业务，遇到了一些问题，几经周折，终于把功能业务完善，希望对大家有所帮助！&lt;/p&gt;
&lt;h4 id=&quot;问题1&quot;&gt;&lt;a href=&quot;#问题1&quot; class=&quot;headerlink&quot; title=&quot;问题1&quot;&gt;&lt;/a&gt;问题1&lt;/h4&gt;&lt;p&gt;调用某接口，接收一个
    
    </summary>
    
      <category term="Java" scheme="http://978420544.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
      <category term="FTP" scheme="http://978420544.github.io/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>Github2Hexo搭建</title>
    <link href="http://978420544.github.io/2017/05/12/Github2Hexo%E6%90%AD%E5%BB%BA/"/>
    <id>http://978420544.github.io/2017/05/12/Github2Hexo搭建/</id>
    <published>2017-05-12T04:57:48.000Z</published>
    <updated>2017-05-12T05:08:38.102Z</updated>
    
    <content type="html"><![CDATA[<p>在github社区越来越火的时代，越来越多的人在github上去做研究开发，它的博客也慢慢的兴起，并且为了在以后的求职中有更大的优势，我们需要在互联网上展现自己的优势和经验，那么一份个人的博客绝对是一个很好的选择，在这篇文章，我会给大家介绍github账户主页的创建和基于hexo的静态博客页面的生成，我们可以在markdown的语法的基础上上传我们的博客，更快更高效率的去展现自己文章的内容！</p>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><h3 id="1-github-SSL配置"><a href="#1-github-SSL配置" class="headerlink" title="1. github SSL配置"></a>1. github SSL配置</h3><h4 id="1-1-登录github社区，进入账户设置页面"><a href="#1-1-登录github社区，进入账户设置页面" class="headerlink" title="1.1 登录github社区，进入账户设置页面"></a>1.1 登录github社区，进入账户设置页面</h4><p>注册并登录github设置，点击个人账户图像进入如图的下拉菜单，点击<span style="color:red;">Setting</span>,进入个人账户设置的页面。</p>
<h5 id="1-1-1-账户菜单"><a href="#1-1-1-账户菜单" class="headerlink" title="1.1.1 账户菜单"></a>1.1.1 账户菜单</h5><center><img src="/images/git/git-setting.png" alt="hello"></center>

<h5 id="1-1-2-账户设置"><a href="#1-1-2-账户设置" class="headerlink" title="1.1.2 账户设置"></a>1.1.2 账户设置</h5><center><img src="/images/git/git-setting2.png" alt="hello"></center>

<h4 id="1-2-配置SSl-keys"><a href="#1-2-配置SSl-keys" class="headerlink" title="1.2  配置SSl keys"></a>1.2  配置SSl keys</h4><h5 id="1-2-1-本地安装GitBash"><a href="#1-2-1-本地安装GitBash" class="headerlink" title="1.2.1 本地安装GitBash"></a>1.2.1 本地安装<a href="https://git-scm.com/downloads" target="_blank" rel="external">GitBash</a></h5><p>仅需要点击exe文件安装，下一步即可，可选项可按照自己情况来选择</p>
<h5 id="1-2-2-设置Git的username和email"><a href="#1-2-2-设置Git的username和email" class="headerlink" title="1.2.2 设置Git的username和email"></a>1.2.2 设置Git的username和email</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"xuhaiyan"</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"haiyan.xu.vip@gmail.com"</span></span></div></pre></td></tr></table></figure>
<h5 id="1-2-3-生成SSH秘钥"><a href="#1-2-3-生成SSH秘钥" class="headerlink" title="1.2.3 生成SSH秘钥"></a>1.2.3 生成SSH秘钥</h5><h6 id="查看是否已经有了ssh密钥"><a href="#查看是否已经有了ssh密钥" class="headerlink" title="查看是否已经有了ssh密钥"></a>查看是否已经有了ssh密钥</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span></div></pre></td></tr></table></figure>
<h6 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -<span class="selector-tag">b</span> <span class="number">4096</span> -C <span class="string">"your_email@example.com"</span></div></pre></td></tr></table></figure>
<p>如果你不需要给秘钥另外设置存储位置的话，请以此按下Enter键：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Enter <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">in</span> which <span class="built_in">to</span> save <span class="keyword">the</span> key (/c/Users/you/.ssh/id_rsa):[Press enter]</div><div class="line">Enter passphrase (<span class="literal">empty</span> <span class="keyword">for</span> no passphrase): [Type <span class="keyword">a</span> passphrase]</div><div class="line">Enter same passphrase again: [Type passphrase again]</div></pre></td></tr></table></figure></p>
<h5 id="1-2-4-github账户配置SSH秘钥"><a href="#1-2-4-github账户配置SSH秘钥" class="headerlink" title="1.2.4 github账户配置SSH秘钥"></a>1.2.4 github账户配置SSH秘钥</h5><h6 id="粘贴生成的SSH秘钥到github上面"><a href="#粘贴生成的SSH秘钥到github上面" class="headerlink" title="粘贴生成的SSH秘钥到github上面"></a>粘贴生成的SSH秘钥到github上面</h6><ul>
<li>账户菜单-账户设置-SSH and GPG keys</li>
<li>新建SSH keys</li>
<li>把粘贴的秘钥放进去</li>
<li></li>
</ul>
<center><img src="/images/git/git-ssh.png" alt="hello"></center>

<center><img src="/images/git/git-ssh-new.png" alt="hello"></center>

<center><img src="/images/git/git-ssh-save.png" alt="hello"></center>




<h3 id="2-github-博客项目"><a href="#2-github-博客项目" class="headerlink" title="2. github 博客项目"></a>2. github 博客项目</h3><h4 id="2-1-创建博客项目"><a href="#2-1-创建博客项目" class="headerlink" title="2.1 创建博客项目"></a>2.1 创建博客项目</h4><p>博客项目创建应该按照这样的规范：username.github.io的项目命名规范，生成的主页可以使用域名:username.github.io访问；</p>
<h4 id="2-2-个人主页分支设置"><a href="#2-2-个人主页分支设置" class="headerlink" title="2.2 个人主页分支设置"></a>2.2 个人主页分支设置</h4><p>设置github访问的分支，用来存放生成的静态页面；<br>进入项目–setting，设置GitHub Pages分支，默认可以选择master分支，点击Save保存；</p>
<h5 id="2-2-1-setting"><a href="#2-2-1-setting" class="headerlink" title="2.2.1 setting"></a>2.2.1 setting</h5><center><img src="/images/git/git-project-setting.jpg" alt="hello"></center>

<h5 id="2-2-2-Repository"><a href="#2-2-2-Repository" class="headerlink" title="2.2.2 Repository"></a>2.2.2 Repository</h5><center><img src="/images/git/git-project-repository.jpg" alt="hello"></center>

<h5 id="2-2-3-GitHub-Pages"><a href="#2-2-3-GitHub-Pages" class="headerlink" title="2.2.3 GitHub Pages"></a>2.2.3 GitHub Pages</h5><center><img src="/images/git/git-project-pages.jpg" alt="hello"></center>


<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>依赖git和nodeJs，安装好git，可以在git上面执行对应的安装指令</p>
<h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1. 安装 Node.js"></a>1. 安装 Node.js</h3><p>hexo生成架构师基于Node.js的，需要安装Node.js;如果不对其进行其他的学习的话，只需要根据小白法则，进行下一步一次安装即可；如果需要学习就需要找对应的教程进行学习，这里不对安装过程赘述。</p>
<h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h3><h4 id="2-1-验证git和nodeJs的安装"><a href="#2-1-验证git和nodeJs的安装" class="headerlink" title="2.1 验证git和nodeJs的安装"></a>2.1 验证git和nodeJs的安装</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git --<span class="keyword">version</span></div><div class="line"><span class="keyword">node</span> <span class="title">-v</span></div></pre></td></tr></table></figure>
<h4 id="2-2-通过淘宝镜像安装hexo"><a href="#2-2-通过淘宝镜像安装hexo" class="headerlink" title="2.2 通过淘宝镜像安装hexo"></a>2.2 通过淘宝镜像安装hexo</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g cnpm <span class="comment">--registry=https://registry.npm.taobao.org</span></div><div class="line">cnpm <span class="keyword">install</span> -g hexo-cli</div><div class="line">cnpm <span class="keyword">install</span> hexo <span class="comment">--save</span></div></pre></td></tr></table></figure>
<p>注意：不需要理会出现的警告即可</p>
<h4 id="2-3-查看hexo版本"><a href="#2-3-查看hexo版本" class="headerlink" title="2.3 查看hexo版本"></a>2.3 查看hexo版本</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo -v</span></div></pre></td></tr></table></figure>
<h3 id="3-hexo博客搭建"><a href="#3-hexo博客搭建" class="headerlink" title="3. hexo博客搭建"></a>3. hexo博客搭建</h3><h4 id="3-1-hexo初始化"><a href="#3-1-hexo初始化" class="headerlink" title="3.1 hexo初始化"></a>3.1 hexo初始化</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo init</span></div></pre></td></tr></table></figure>
<h4 id="3-2-生成器的安装和博客简单介绍"><a href="#3-2-生成器的安装和博客简单介绍" class="headerlink" title="3.2 生成器的安装和博客简单介绍"></a>3.2 生成器的安装和博客简单介绍</h4><h5 id="3-2-1-生成器的安装"><a href="#3-2-1-生成器的安装" class="headerlink" title="3.2.1 生成器的安装"></a>3.2.1 生成器的安装</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm <span class="keyword">install</span></div></pre></td></tr></table></figure>
<h5 id="3-2-2-本地简单测试运行"><a href="#3-2-2-本地简单测试运行" class="headerlink" title="3.2.2 本地简单测试运行"></a>3.2.2 本地简单测试运行</h5><p>运行命令<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo s -g</span></div></pre></td></tr></table></figure></p>
<p>测试地址<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">localhost:</span><span class="number">4000</span></div></pre></td></tr></table></figure></p>
<h5 id="3-2-3-根目录下配置实例"><a href="#3-2-3-根目录下配置实例" class="headerlink" title="3.2.3 根目录下配置实例"></a>3.2.3 根目录下配置实例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#博客名称</span></div><div class="line"><span class="attr">title:</span> <span class="string">我的博客</span></div><div class="line"><span class="comment">#副标题</span></div><div class="line"><span class="attr">subtitle:</span> <span class="string">一天进步一点</span></div><div class="line"><span class="comment">#简介</span></div><div class="line"><span class="attr">description:</span> <span class="string">记录生活点滴</span></div><div class="line"><span class="comment">#博客作者</span></div><div class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></div><div class="line"><span class="comment">#博客语言</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></div><div class="line"><span class="comment">#时区</span></div><div class="line"><span class="attr">timezone:</span></div><div class="line"></div><div class="line"><span class="comment">#博客地址,与申请的GitHub一致</span></div><div class="line"><span class="attr">url:</span> <span class="attr">http://elfwalk.github.io</span></div><div class="line"><span class="attr">root:</span> <span class="string">/</span></div><div class="line"><span class="comment">#博客链接格式</span></div><div class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></div><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"></div><div class="line"><span class="attr">source_dir:</span> <span class="string">source</span></div><div class="line"><span class="attr">public_dir:</span> <span class="string">public</span></div><div class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></div><div class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></div><div class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></div><div class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></div><div class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></div><div class="line"><span class="attr">skip_render:</span></div><div class="line"></div><div class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></div><div class="line"><span class="attr">default_layout:</span> <span class="string">post</span></div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span></div><div class="line"><span class="attr">highlight:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  tab_replace:</span></div><div class="line"></div><div class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></div><div class="line"><span class="attr">category_map:</span></div><div class="line"><span class="attr">tag_map:</span></div><div class="line"></div><div class="line"><span class="comment">#日期格式</span></div><div class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></div><div class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></div><div class="line"></div><div class="line"><span class="comment">#分页，每页文章数量</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span></div><div class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></div><div class="line"></div><div class="line"><span class="comment">#博客主题</span></div><div class="line"><span class="attr">theme:</span> <span class="string">landscape</span></div><div class="line"></div><div class="line"><span class="comment">#发布设置</span></div><div class="line"><span class="attr">deploy:</span> </div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line">  <span class="comment">#elfwalk改为你的github用户名</span></div><div class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/elfwalk/elfwalk.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<h5 id="3-2-4-md文件实例"><a href="#3-2-4-md文件实例" class="headerlink" title="3.2.4 md文件实例"></a>3.2.4 md文件实例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">hello</span></div><div class="line"><span class="attr">date:</span> <span class="number">2015</span><span class="bullet">-07</span><span class="bullet">-01</span> <span class="number">22</span><span class="string">:37:23</span></div><div class="line"><span class="attr">categories:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">日志</span></div><div class="line"><span class="bullet">  -</span> <span class="string">二级目录</span></div><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">hello</span></div><div class="line"><span class="meta">---</span></div><div class="line"></div><div class="line"><span class="string">摘要:</span></div><div class="line"><span class="string">&lt;!--more--&gt;</span></div><div class="line"><span class="string">正文:</span></div></pre></td></tr></table></figure>
<h5 id="3-2-5-博客发布"><a href="#3-2-5-博客发布" class="headerlink" title="3.2.5 博客发布"></a>3.2.5 博客发布</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo d -g</span></div></pre></td></tr></table></figure>
<h4 id="3-3-hexo命令简介"><a href="#3-3-hexo命令简介" class="headerlink" title="3.3 hexo命令简介"></a>3.3 hexo命令简介</h4><h5 id="3-3-1-命令简写"><a href="#3-3-1-命令简写" class="headerlink" title="3.3.1 命令简写"></a>3.3.1 命令简写</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo <span class="keyword">generate</span></div><div class="line">hexo n <span class="string">"我的博客"</span> == hexo <span class="keyword">new</span> <span class="string">"我的博客"</span> #新建文章</div><div class="line">hexo p == hexo publish</div><div class="line">hexo g == hexo <span class="keyword">generate</span>#生成</div><div class="line">hexo s == hexo server #启动服务预览</div><div class="line">hexo d == hexo deploy#部署</div></pre></td></tr></table></figure>
<h5 id="3-3-2-服务器"><a href="#3-3-2-服务器" class="headerlink" title="3.3.2 服务器"></a>3.3.2 服务器</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span> <span class="meta">#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span></div><div class="line">hexo <span class="keyword">server</span> -s <span class="meta">#静态模式</span></div><div class="line">hexo <span class="keyword">server</span> -p <span class="number">5000</span> <span class="meta">#更改端口</span></div><div class="line">hexo <span class="keyword">server</span> -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> <span class="meta">#自定义 IP</span></div><div class="line"></div><div class="line">hexo clean <span class="meta">#清除缓存 网页正常情况下可以忽略此条命令</span></div><div class="line">hexo g <span class="meta">#生成静态网页</span></div><div class="line">hexo d <span class="meta">#开始部署</span></div></pre></td></tr></table></figure>
<h5 id="3-3-3-监视文件变动"><a href="#3-3-3-监视文件变动" class="headerlink" title="3.3.3 监视文件变动"></a>3.3.3 监视文件变动</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span> #使用 Hexo 生成静态文件快速而且简单</div><div class="line">hexo <span class="keyword">generate</span> --watch #监视文件变动</div></pre></td></tr></table></figure>
<h5 id="3-3-4-部署命令"><a href="#3-3-4-部署命令" class="headerlink" title="3.3.4 部署命令"></a>3.3.4 部署命令</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span> --deploy</div><div class="line">hexo deploy --<span class="keyword">generate</span></div></pre></td></tr></table></figure>
<p>等效于<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo deploy -g</div><div class="line">hexo <span class="keyword">server</span> -g</div></pre></td></tr></table></figure></p>
<h5 id="3-3-5-页面的创建"><a href="#3-3-5-页面的创建" class="headerlink" title="3.3.5 页面的创建"></a>3.3.5 页面的创建</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] &lt;<span class="built_in">title</span>&gt; <span class="meta">#草稿</span></div><div class="line"></div><div class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="meta">#新建文章</span></div><div class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="meta">#新建页面</span></div><div class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></div><div class="line">hexo server <span class="meta">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy <span class="meta">#将.deploy目录部署到GitHub</span></div><div class="line"></div><div class="line">hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</div><div class="line">hexo <span class="keyword">new</span> photo <span class="string">"My Gallery"</span></div><div class="line">hexo <span class="keyword">new</span> <span class="string">"Hello World"</span> --lang tw</div></pre></td></tr></table></figure>
<h4 id="3-4-FAQ"><a href="#3-4-FAQ" class="headerlink" title="3.4 FAQ"></a>3.4 FAQ</h4><h5 id="3-4-1-ERROR-Deployer-not-found-git"><a href="#3-4-1-ERROR-Deployer-not-found-git" class="headerlink" title="3.4.1 ERROR Deployer not found: git"></a>3.4.1 ERROR Deployer not found: git</h5><p>解决方法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<h5 id="3-4-2-部署类型设置git"><a href="#3-4-2-部署类型设置git" class="headerlink" title="3.4.2 部署类型设置git"></a>3.4.2 部署类型设置git</h5><p>hexo 3.0 部署类型不再是github，_config.yml 中修改<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Deployment</span></div><div class="line"><span class="meta">## Docs: http:<span class="comment">//hexo.io/docs/deployment.html</span></span></div><div class="line"><span class="symbol">deploy:</span></div><div class="line"><span class="symbol">  type:</span> git</div><div class="line"><span class="symbol">  repository:</span> git@***.github.com:***<span class="comment">/***.github.io.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h5 id="3-4-3-xcodebuild"><a href="#3-4-3-xcodebuild" class="headerlink" title="3.4.3 xcodebuild"></a>3.4.3 xcodebuild</h5><p>xcode-select: error: tool ‘xcodebuild’ requires Xcode, but active developer directory ‘/Library/Developer/CommandLineTools’ is a command line tools instance<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> bcrypt</div></pre></td></tr></table></figure></p>
<h5 id="3-4-4-RSS不显示"><a href="#3-4-4-RSS不显示" class="headerlink" title="3.4.4 RSS不显示"></a>3.4.4 RSS不显示</h5><p>安装RSS插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<h5 id="3-4-5-关于摘要"><a href="#3-4-5-关于摘要" class="headerlink" title="3.4.5 关于摘要"></a>3.4.5 关于摘要</h5><p>有的主题可能自带摘要，但是有的需要自己安装摘要或者修改源码</p>
<h5 id="3-4-6-关于网页计数器的使用"><a href="#3-4-6-关于网页计数器的使用" class="headerlink" title="3.4.6 关于网页计数器的使用"></a>3.4.6 关于网页计数器的使用</h5><p>建议使用不蒜子计数器，简单使用</p>
<h5 id="3-4-7-关于开启评论"><a href="#3-4-7-关于开启评论" class="headerlink" title="3.4.7 关于开启评论"></a>3.4.7 关于开启评论</h5><p>可以通过配置或者该源码，使用第三方插件进行开启</p>
<h5 id="3-4-8-关于google和百度的收录"><a href="#3-4-8-关于google和百度的收录" class="headerlink" title="3.4.8 关于google和百度的收录"></a>3.4.8 关于google和百度的收录</h5><p>google和百度站点地图的安装<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>根目录配置文件配置<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 自动生成sitemap</span></div><div class="line"><span class="symbol">sitemap:</span></div><div class="line"><span class="symbol">path:</span> sitemap.xml</div><div class="line"><span class="symbol">baidusitemap:</span></div><div class="line"><span class="symbol">path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>
<p>生成结果：sitemap.xml跟baidusitemap.xml<br>对应平台收录可以去谷歌和百度的站长平台去进行录入，提交使用站点地图提交的方式即可（使用sitemap提交）<br>注意：github禁止百度爬虫访问博客，可以采用其他的代码托管网站，比如说coding，进行提交<br>需要注意的是，baidusitemap.xml有可能是生成的github的链接，需要到node_modules文件夹下面的百度插件修改对应的链接的获取，重新生成即可</p>
<h5 id="3-4-9-关于md文件的提交"><a href="#3-4-9-关于md文件的提交" class="headerlink" title="3.4.9 关于md文件的提交"></a>3.4.9 关于md文件的提交</h5><p>可以在username.github.io的项目里面新建一个分支用于存放md文件</p>
<h5 id="3-4-10-关于-config-yml的修改"><a href="#3-4-10-关于-config-yml的修改" class="headerlink" title="3.4.10 关于_config.yml的修改"></a>3.4.10 关于_config.yml的修改</h5><p>需要注意的是根目录和主题目录下的_config.yml文件，视情况而定</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在github社区越来越火的时代，越来越多的人在github上去做研究开发，它的博客也慢慢的兴起，并且为了在以后的求职中有更大的优势，我们需要在互联网上展现自己的优势和经验，那么一份个人的博客绝对是一个很好的选择，在这篇文章，我会给大家介绍github账户主页的创建和基于h
    
    </summary>
    
      <category term="Hexo" scheme="http://978420544.github.io/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://978420544.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>JAVA解析xml的五种方式对比</title>
    <link href="http://978420544.github.io/2017/05/09/JAVA%E8%A7%A3%E6%9E%90xml%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/"/>
    <id>http://978420544.github.io/2017/05/09/JAVA解析xml的五种方式对比/</id>
    <published>2017-05-09T07:34:05.000Z</published>
    <updated>2017-05-09T07:35:21.134Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要对比Java即系xml的五种方式，这五种方式各有利弊，大家可以看情况采用哪一种。</p>
<h3 id="1-DOM解析"><a href="#1-DOM解析" class="headerlink" title="1. DOM解析"></a>1. DOM解析</h3><p>DOM是html和xml的应用程序接口(API)，以层次结构（类似于树型）来组织节点和信息片段，映射XML文档的结构，允许获取和操作文档的任意部分，是W3C的官方标准</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>①允许应用程序对数据和结构做出更改。</p>
<p>②访问是双向的，可以在任何时候在树中上下导航，获取和操作任意部分的数据。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>①通常需要加载整个XML文档来构造层次结构，消耗资源大。</p>
<h3 id="2-SAX-Simple-API-for-XML-解析"><a href="#2-SAX-Simple-API-for-XML-解析" class="headerlink" title="2. SAX(Simple API for XML)解析"></a>2. SAX(Simple API for XML)解析</h3><p>流模型中的”推”模型分析方式。通过事件驱动，每发现一个节点就引发一个事件，事件推给事件处理器，通过回调方法完成解析工作，解析XML文档的逻辑需要应用程序完成</p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>①不需要等待所有数据都被处理，分析就能立即开始。</p>
<p>②只在读取数据时检查数据，不需要保存在内存中。</p>
<p>③可以在某个条件得到满足时停止解析，不必解析整个文档。</p>
<p>④效率和性能较高，能解析大于系统内存的文档。</p>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>①需要应用程序自己负责TAG的处理逻辑（例如维护父/子关系等），文档越复杂程序就越复杂。</p>
<p>②单向导航，无法定位文档层次，很难同时访问同一文档的不同部分数据，不支持XPath。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>简单的说就是对文档进行顺序扫描，当扫描到文档(document)开始与结束、元素(element)开始与结束时通知事件处理函数(回调函数)，进行相应处理，直到文档结束</p>
<h3 id="3-JDOM-Java-based-Document-Object-Model"><a href="#3-JDOM-Java-based-Document-Object-Model" class="headerlink" title="3. JDOM(Java-based Document Object Model)"></a>3. JDOM(Java-based Document Object Model)</h3><p>Java特定的文档对象模型，自身不包含解析器，使用SAX</p>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>①使用具体类而不是接口，简化了DOM的API。</p>
<p>②大量使用了Java集合类，方便了Java开发人员。</p>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>①没有较好的灵活性。</p>
<p>②性能较差。</p>
<h3 id="4-DOM4J-Document-Object-Model-for-Java"><a href="#4-DOM4J-Document-Object-Model-for-Java" class="headerlink" title="4. DOM4J(Document Object Model for Java)"></a>4. DOM4J(Document Object Model for Java)</h3><p>简单易用，采用Java集合框架，并完全支持DOM、SAX和JAXP</p>
<h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><p>①大量使用了Java集合类，方便Java开发人员，同时提供一些提高性能的替代方法。</p>
<p>②支持XPath。</p>
<p>③有很好的性能。</p>
<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>①大量使用了接口，API较为复杂。</p>
<h3 id="5-StAX-Streaming-API-for-XML"><a href="#5-StAX-Streaming-API-for-XML" class="headerlink" title="5. StAX(Streaming API for XML)"></a>5. StAX(Streaming API for XML)</h3><p>流模型中的拉模型分析方式，提供基于指针和基于迭代器两种方式的支持,JDK1.6特性</p>
<p>StAX API的实现是使用了Java Web服务开发（JWSDP）1.6，并结合了Sun Java流式XML分析器(SJSXP)-它位于javax.xml.stream包中。XMLStreamReader接口用于分析一个XML文档，而XMLStreamWriter接口用于生成一个XML文档。XMLEventReader负责使用一个对象事件迭代子分析XML事件-这与XMLStreamReader所使用的光标机制形成对照。</p>
<h4 id="和推式解析相比的优点"><a href="#和推式解析相比的优点" class="headerlink" title="和推式解析相比的优点"></a>和推式解析相比的优点</h4><p>①在拉式解析中，事件是由解析应用产生的，因此拉式解析中向客户端提供的是解析规则，而不是解析器。</p>
<p>②同推式解析相比，拉式解析的代码更简单，而且不用那么多库。</p>
<p>③拉式解析客户端能够一次读取多个XML文件。</p>
<p>④拉式解析允许你过滤XML文件和跳过解析事件。</p>
<h3 id="DOM4J的Java-Object2Xml互相转化实例"><a href="#DOM4J的Java-Object2Xml互相转化实例" class="headerlink" title="DOM4J的Java-Object2Xml互相转化实例"></a>DOM4J的Java-Object2Xml互相转化实例</h3><h4 id="Object2Xml"><a href="#Object2Xml" class="headerlink" title="Object2Xml"></a>Object2Xml</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line">     * DMO4J写入XML  </div><div class="line">     * @param obj        泛型对象  </div><div class="line">     * @param entityPropertys 泛型对象的List集合  </div><div class="line">     * @param Encode     XML自定义编码类型(推荐使用GBK)  </div><div class="line">     * @param XMLPathAndName    XML文件的路径及文件名  </div><div class="line">     */  </div><div class="line">    public void writeXmlDocument(T obj, List&lt;T&gt; entityPropertys, <span class="keyword">String</span> Encode,   </div><div class="line">            <span class="keyword">String</span> XMLPathAndName) &#123;   </div><div class="line">        long lasting = <span class="keyword">System</span>.currentTimeMillis();<span class="comment">//效率检测   </span></div><div class="line">  </div><div class="line">        try &#123;   </div><div class="line">            XMLWriter <span class="built_in">writer</span> = <span class="built_in">null</span>;<span class="comment">// 声明写XML的对象    </span></div><div class="line">            OutputFormat <span class="keyword">format</span> = OutputFormat.createPrettyPrint();   </div><div class="line">            <span class="keyword">format</span>.setEncoding(Encode);<span class="comment">// 设置XML文件的编码格式   </span></div><div class="line">  </div><div class="line">            <span class="keyword">String</span> filePath = XMLPathAndName;<span class="comment">//获得文件地址   </span></div><div class="line">            File file = <span class="keyword">new</span> File(filePath);<span class="comment">//获得文件     </span></div><div class="line">  </div><div class="line">            <span class="keyword">if</span> (file.exists()) &#123;   </div><div class="line">                file.<span class="keyword">delete</span>();   </div><div class="line">  </div><div class="line">            &#125;   </div><div class="line">            <span class="comment">// 新建student.xml文件并新增内容   </span></div><div class="line">            Document document = DocumentHelper.createDocument();   </div><div class="line">            <span class="keyword">String</span> rootname = obj.getClass().getSimpleName();<span class="comment">//获得类名   </span></div><div class="line">            Element root = document.addElement(rootname + <span class="string">"s"</span>);<span class="comment">//添加根节点   </span></div><div class="line">            Field[] properties = obj.getClass().getDeclaredFields();<span class="comment">//获得实体类的所有属性   </span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> (T t : entityPropertys) &#123;                                <span class="comment">//递归实体   </span></div><div class="line">                Element secondRoot = root.addElement(rootname);            <span class="comment">//二级节点   </span></div><div class="line">                </div><div class="line">                <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; properties.length; i++) &#123;                      </div><div class="line">                    <span class="comment">//反射get方法       </span></div><div class="line">                    Method meth = t.getClass().getMethod(                      </div><div class="line">                            <span class="string">"get"</span>  </div><div class="line">                                    + properties[i].<span class="built_in">getName</span>().substring(<span class="number">0</span>, <span class="number">1</span>)   </div><div class="line">                                            .toUpperCase()   </div><div class="line">                                    + properties[i].<span class="built_in">getName</span>().substring(<span class="number">1</span>));   </div><div class="line">                    <span class="comment">//为二级节点添加属性，属性值为对应属性的值   </span></div><div class="line">                    secondRoot.addElement(properties[i].<span class="built_in">getName</span>()).setText(   </div><div class="line">                            meth.invoke(t).toString());   </div><div class="line">  </div><div class="line">                &#125;   </div><div class="line">            &#125;   </div><div class="line">            <span class="comment">//生成XML文件   </span></div><div class="line">            <span class="built_in">writer</span> = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileWriter(file), <span class="keyword">format</span>);   </div><div class="line">            <span class="built_in">writer</span>.write(document);   </div><div class="line">            <span class="built_in">writer</span>.<span class="built_in">close</span>();   </div><div class="line">            long lasting2 = <span class="keyword">System</span>.currentTimeMillis();   </div><div class="line">            <span class="keyword">System</span>.out.println(<span class="string">"写入XML文件结束,用时"</span>+(lasting2 - lasting)+<span class="string">"ms"</span>);   </div><div class="line">        &#125; catch (Exception e) &#123;   </div><div class="line">            <span class="keyword">System</span>.out.println(<span class="string">"XML文件写入失败"</span>);   </div><div class="line">        &#125;   </div><div class="line">  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="Xml2Object"><a href="#Xml2Object" class="headerlink" title="Xml2Object"></a>Xml2Object</h4><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line"> *   </div><div class="line"> * @param XMLPathAndName XML文件的路径和地址  </div><div class="line"> * @param t     泛型对象  </div><div class="line"> * @return  </div><div class="line"> */  </div><div class="line">       </div><div class="line">  </div><div class="line">    @<span class="type">SuppressWarnings</span>(<span class="string">"unchecked"</span>)   </div><div class="line">    public <span class="type">List</span>&lt;<span class="type">T</span>&gt; readXML(<span class="type">String</span> <span class="type">XMLPathAndName</span>, <span class="type">T</span> t) &#123;   </div><div class="line">        long lasting = <span class="type">System</span>.currentTimeMillis();<span class="comment">//效率检测   </span></div><div class="line">        <span class="type">List</span>&lt;<span class="type">T</span>&gt; list = <span class="function"><span class="keyword">new</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt;();<span class="comment">//创建list集合   </span></span></div><div class="line">        <span class="title">try</span> &#123;   </div><div class="line">            <span class="title">File</span> <span class="title">f</span> = <span class="title">new</span> <span class="title">File</span>(<span class="type">XMLPathAndName</span>);<span class="comment">//读取文件   </span></div><div class="line">            <span class="title">SAXReader</span> <span class="title">reader</span> = <span class="title">new</span> <span class="title">SAXReader</span>();   </div><div class="line">            <span class="title">Document</span> <span class="title">doc</span> = <span class="title">reader</span>.<span class="title">read</span>(f);<span class="comment">//dom4j读取   </span></div><div class="line">            <span class="title">Element</span> <span class="title">root</span> = <span class="title">doc</span>.<span class="title">getRootElement</span>();<span class="comment">//获得根节点   </span></div><div class="line">            <span class="title">Element</span> <span class="title">foo</span>;<span class="comment">//二级节点   </span></div><div class="line">            <span class="title">Field</span>[] <span class="title">properties</span> = <span class="title">t</span>.<span class="title">getClass</span>().<span class="title">getDeclaredFields</span>();<span class="comment">//获得实例的属性   </span></div><div class="line">            <span class="comment">//实例的get方法   </span></div><div class="line">            <span class="title">Method</span> <span class="title">getmeth</span>;   </div><div class="line">            <span class="comment">//实例的set方法   </span></div><div class="line">            <span class="title">Method</span> <span class="title">setmeth</span>;   </div><div class="line">               </div><div class="line">            <span class="title">for</span> (<span class="type">Iterator</span> i = root.elementIterator(t.getClass().<span class="title">getSimpleName</span>()); <span class="title">i</span>.<span class="title">hasNext</span>();) &#123;<span class="comment">//遍历t.getClass().getSimpleName()节点   </span></div><div class="line">                <span class="title">foo</span> = (<span class="type">Element</span>) <span class="title">i</span>.<span class="title">next</span>();<span class="comment">//下一个二级节点   </span></div><div class="line">                   </div><div class="line">               <span class="title">t</span>=(<span class="type">T</span>)<span class="title">t</span>.<span class="title">getClass</span>().<span class="title">newInstance</span>();<span class="comment">//获得对象的新的实例   </span></div><div class="line">  </div><div class="line">               <span class="title">for</span> (int j = <span class="number">0</span>; j &lt; properties.length; j++) &#123;<span class="comment">//遍历所有孙子节点   </span></div><div class="line">                       </div><div class="line">  </div><div class="line">                    <span class="comment">//实例的set方法   </span></div><div class="line">                      <span class="title">setmeth</span> = <span class="title">t</span>.<span class="title">getClass</span>().<span class="title">getMethod</span>(   </div><div class="line">                            "set"  </div><div class="line">                                    + properties[j].getName().<span class="title">substring</span>(<span class="number">0</span>, <span class="number">1</span>)   </div><div class="line">                                            .<span class="title">toUpperCase</span>()   </div><div class="line">                                    + <span class="title">properties</span>[<span class="title">j</span>].<span class="title">getName</span>().<span class="title">substring</span>(<span class="number">1</span>),<span class="title">properties</span>[<span class="title">j</span>].<span class="title">getType</span>());   </div><div class="line">                  <span class="comment">//properties[j].getType()为set方法入口参数的参数类型(Class类型)   </span></div><div class="line">                    <span class="title">setmeth</span>.<span class="title">invoke</span>(t, foo.elementText(properties[j].getName()));<span class="comment">//将对应节点的值存入   </span></div><div class="line">                    </div><div class="line">           </div><div class="line">                &#125;   </div><div class="line">       </div><div class="line">                   </div><div class="line">                <span class="title">list</span>.<span class="title">add</span>(t);   </div><div class="line">            &#125;   </div><div class="line">        &#125; <span class="title">catch</span> (<span class="type">Exception</span> e) &#123;   </div><div class="line">            <span class="title">e</span>.<span class="title">printStackTrace</span>();   </div><div class="line">        &#125;   </div><div class="line">        <span class="title">long</span> <span class="title">lasting2</span> = <span class="title">System</span>.<span class="title">currentTimeMillis</span>();   </div><div class="line">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>("读取<span class="type">XML</span>文件结束,用时"+(lasting2 - lasting)+"<span class="title">ms</span>");   </div><div class="line">        <span class="title">return</span> <span class="title">list</span>;   </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要对比Java即系xml的五种方式，这五种方式各有利弊，大家可以看情况采用哪一种。&lt;/p&gt;
&lt;h3 id=&quot;1-DOM解析&quot;&gt;&lt;a href=&quot;#1-DOM解析&quot; class=&quot;headerlink&quot; title=&quot;1. DOM解析&quot;&gt;&lt;/a&gt;1. DOM解析&lt;/
    
    </summary>
    
      <category term="Java" scheme="http://978420544.github.io/categories/java/"/>
    
    
      <category term="Xml" scheme="http://978420544.github.io/tags/xml/"/>
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>不蒜子小白网页计数器使用教程</title>
    <link href="http://978420544.github.io/2017/05/09/%E4%B8%8D%E8%92%9C%E5%AD%90%E5%B0%8F%E7%99%BD%E7%BD%91%E9%A1%B5%E8%AE%A1%E6%95%B0%E5%99%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://978420544.github.io/2017/05/09/不蒜子小白网页计数器使用教程/</id>
    <published>2017-05-09T05:45:23.000Z</published>
    <updated>2017-05-09T05:54:38.295Z</updated>
    
    <content type="html"><![CDATA[<p>不蒜子是一个极简的网页计数器，因为自己做的静态博客需要用到就把他的js给集成进去，简单说下原理，总访问量和总访客数基于域名一对一对应通过远程的js集成，将数据通过/busuanzi.ibruce.info/busuanzi的访问持久化，即便在次生成文章或者网站，只要链接没有变浏览量还是可以在原有的基础上在次往上加的。</p>
<h4 id="1-脚本安装"><a href="#1-脚本安装" class="headerlink" title="1. 脚本安装"></a>1. 脚本安装</h4><p>在需要的页面引入这个脚本即可：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-总访问量（算法A）"><a href="#2-总访问量（算法A）" class="headerlink" title="2. 总访问量（算法A）"></a>2. 总访问量（算法A）</h4><p>要显示站点总访问量，复制以下代码添加到你需要显示的位置</p>
<p>算法A：pv的方式，单个用户连续点击n篇文章，记录n次访问量</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></div><div class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>美化及其他嵌入的改动，其实只要内层的span就可以，然后用css美化或者做嵌入</p>
<h4 id="3-总访客数（算法B）"><a href="#3-总访客数（算法B）" class="headerlink" title="3. 总访客数（算法B）"></a>3. 总访客数（算法B）</h4><p>要显示站点总访客数，复制以下代码添加到你需要显示的位置</p>
<p>算法B：uv的方式，单个用户连续点击n篇文章，只记录1次访客数</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></div><div class="line">  本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>美化及其他嵌入的改动，其实只要内层的span就可以，然后用css美化或者做嵌入</p>
<h4 id="4-页面或者文章访问量"><a href="#4-页面或者文章访问量" class="headerlink" title="4. 页面或者文章访问量"></a>4. 页面或者文章访问量</h4><p>要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置。</p>
<p>算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_page_pv"</span>&gt;</span></div><div class="line">  本文总阅读量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>美化及其他嵌入的改动，其实只要内层的span就可以，然后用css美化或者做嵌入</p>
<h4 id="5-代码中文字是可以修改的，只要保留id正确即可"><a href="#5-代码中文字是可以修改的，只要保留id正确即可" class="headerlink" title="5. 代码中文字是可以修改的，只要保留id正确即可"></a>5. 代码中文字是可以修改的，只要保留id正确即可</h4><h4 id="6-只计数不显示-只安装脚本代码，不安装标签代码"><a href="#6-只计数不显示-只安装脚本代码，不安装标签代码" class="headerlink" title="6. 只计数不显示,只安装脚本代码，不安装标签代码"></a>6. 只计数不显示,只安装脚本代码，不安装标签代码</h4><h4 id="7-注意"><a href="#7-注意" class="headerlink" title="7. 注意"></a>7. 注意</h4><p>暂时的话，像首页这样的会出现好多文章，不蒜子暂时满足不了这样的需求，原因是同样的文章技术器用的id选择器，一个页面只能有一个，多个也只能显示一个；但是不蒜子正在改进，希望可以越来越好。</p>
<h4 id="不蒜子交流群（419260983）"><a href="#不蒜子交流群（419260983）" class="headerlink" title="不蒜子交流群（419260983）"></a><a href="http://busuanzi.ibruce.info/" target="_blank" rel="external">不蒜子交流群（419260983）</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不蒜子是一个极简的网页计数器，因为自己做的静态博客需要用到就把他的js给集成进去，简单说下原理，总访问量和总访客数基于域名一对一对应通过远程的js集成，将数据通过/busuanzi.ibruce.info/busuanzi的访问持久化，即便在次生成文章或者网站，只要链接没有
    
    </summary>
    
      <category term="Hexo" scheme="http://978420544.github.io/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://978420544.github.io/tags/hexo/"/>
    
      <category term="Simpleblock" scheme="http://978420544.github.io/tags/simpleblock/"/>
    
  </entry>
  
  <entry>
    <title>支付平台开发--IOException : DerInputStream.getLength(): lengthTag=127, too big.</title>
    <link href="http://978420544.github.io/2017/05/05/%E6%94%AF%E4%BB%98%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91-IOException-DerInputStream-getLength-lengthTag-127-too-big/"/>
    <id>http://978420544.github.io/2017/05/05/支付平台开发-IOException-DerInputStream-getLength-lengthTag-127-too-big/</id>
    <published>2017-05-05T03:45:03.000Z</published>
    <updated>2017-05-05T03:48:38.313Z</updated>
    
    <content type="html"><![CDATA[<p>支付平台开发：IOException : DerInputStream.getLength(): lengthTag=127, too big.</p>
<p>原因：加密的私钥没有设置</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;支付平台开发：IOException : DerInputStream.getLength(): lengthTag=127, too big.&lt;/p&gt;
&lt;p&gt;原因：加密的私钥没有设置&lt;/p&gt;

    
    </summary>
    
      <category term="Bug笔记" scheme="http://978420544.github.io/categories/bug/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
      <category term="Bug" scheme="http://978420544.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Gradle学习笔记@2</title>
    <link href="http://978420544.github.io/2017/04/27/Gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
    <id>http://978420544.github.io/2017/04/27/Gradle学习笔记-2/</id>
    <published>2017-04-27T10:02:16.000Z</published>
    <updated>2017-05-08T08:33:12.319Z</updated>
    
    <content type="html"><![CDATA[<p>Gradle中有两个基本的概念：project和task。每个Gradle的构建由一个project构成，它代表着需要被构建的组件或者构建的整个项目。每个project由一个或者多个task组成。task代表着Gradle构建过程中可执行的最小单元。例如当构建一个组件时，可能需要先编译、打包、然后再生成文档或者发布等，这其中的每个步骤都可以定义成一个task。</p>
<h3 id="1-Task创建及应用"><a href="#1-Task创建及应用" class="headerlink" title="1.Task创建及应用"></a>1.Task创建及应用</h3><h4 id="1-1-HelloWorld创建及源码详解"><a href="#1-1-HelloWorld创建及源码详解" class="headerlink" title="1.1 HelloWorld创建及源码详解"></a>1.1 HelloWorld创建及源码详解</h4><p>task的doLast、doFirst、及&lt;&lt;使用;doLast意思是定义一个行为(映射Gradle中的Action类)，放在当前task的最后，类似的，还有doFirst,表示将定义的行为放在当前task最前面,&lt;&lt;仅仅是doLast的一个别名。</p>
<h5 id="新建build-gradle文件，在文件中添加下方代码："><a href="#新建build-gradle文件，在文件中添加下方代码：" class="headerlink" title="新建build.gradle文件，在文件中添加下方代码："></a>新建build.gradle文件，在文件中添加下方代码：</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> helloWorld &lt;&lt; &#123;</div><div class="line">     <span class="keyword">println</span> <span class="string">"Hello World!"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-hello.png" alt="hello"></center>

<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> helloWorld1 &#123;</div><div class="line">     <span class="keyword">doLast</span>&#123;</div><div class="line">	   <span class="keyword">println</span> <span class="string">"doLast!"</span></div><div class="line">     &#125;</div><div class="line">     <span class="keyword">doFirst</span>&#123;</div><div class="line">	    <span class="keyword">println</span> <span class="string">"doFirst!"</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-hello1.png" alt="hello1"></center>

<h5 id="doLast-doFirst-lt-lt-——Java源码详解"><a href="#doLast-doFirst-lt-lt-——Java源码详解" class="headerlink" title="doLast,doFirst,&lt;&lt;——Java源码详解"></a>doLast,doFirst,&lt;&lt;——Java源码详解</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> AbstractTask <span class="keyword">implements</span> TaskInternal, DynamicObjectAware &#123;</div><div class="line">   <span class="keyword">private</span> List&lt;Action&lt;? <span class="keyword">super</span> <span class="keyword">Task</span>&gt;&gt; actions = <span class="keyword">new</span> ArrayList&lt;Action&lt;?   <span class="keyword">super</span> <span class="keyword">Task</span>&gt;&gt;();</div><div class="line"> </div><div class="line">   <span class="keyword">public</span> <span class="keyword">Task</span> <span class="keyword">doFirst</span>(Action&lt;? <span class="keyword">super</span> <span class="keyword">Task</span>&gt; action) &#123;</div><div class="line">         <span class="keyword">if</span> (action == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidUserDataException(<span class="string">"Action must not be null!"</span>);</div><div class="line">        &#125;</div><div class="line">        actions.add(<span class="number">0</span>, wrap(action));</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">     &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">Task</span> <span class="keyword">doLast</span>(Action&lt;? <span class="keyword">super</span> <span class="keyword">Task</span>&gt; action) &#123;</div><div class="line">         <span class="keyword">if</span> (action == <span class="keyword">null</span>) &#123;</div><div class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> InvalidUserDataException(<span class="string">"Action must not be null!"</span>);</div><div class="line">         &#125;</div><div class="line">         actions.add(wrap(action));</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>Task类里面实际执行部分都会转化成Action，支持动态DSL语言，动态添加到对应的集合中，最后执行该任务的所有Action。</p>
<h4 id="1-2-Task实现简单Java实例"><a href="#1-2-Task实现简单Java实例" class="headerlink" title="1.2 Task实现简单Java实例"></a>1.2 Task实现简单Java实例</h4><h5 id="英文字符串转成大写英文字符串"><a href="#英文字符串转成大写英文字符串" class="headerlink" title="英文字符串转成大写英文字符串"></a>英文字符串转成大写英文字符串</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> upper&#123;</div><div class="line">     <span class="keyword">doLast</span>&#123;</div><div class="line">        String inits=<span class="string">"mjy hello World"</span>;</div><div class="line">        <span class="keyword">println</span> <span class="string">"origin:"</span>+inits</div><div class="line">        <span class="keyword">println</span> <span class="string">"upperCase:"</span>+inits.toUpperCase()</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-upper.png" alt="upper"></center>

<h5 id="数字循环输出"><a href="#数字循环输出" class="headerlink" title="数字循环输出"></a>数字循环输出</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> <span class="keyword">count</span>&#123;</div><div class="line">     <span class="keyword">doLast</span>&#123;</div><div class="line">        <span class="number">4</span>.<span class="keyword">times</span> &#123; <span class="keyword">print</span> <span class="string">"$it "</span>&#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-count.png" alt="count"></center>


<h4 id="1-3-Task-dependencies"><a href="#1-3-Task-dependencies" class="headerlink" title="1.3 Task dependencies"></a>1.3 Task dependencies</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> helloWorld &lt;&lt; &#123;</div><div class="line">     <span class="keyword">println</span> <span class="string">"Hello World!"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">task</span> child(dependsOn: helloWorld)&#123;</div><div class="line">    <span class="keyword">doLast</span>&#123;</div><div class="line">	<span class="keyword">println</span> <span class="string">"I'm HelloWorld of child!"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-child.png" alt="child"></center>


<h5 id="dependsOn用来声明要依赖的对象，但是依赖的对象并不一定存在"><a href="#dependsOn用来声明要依赖的对象，但是依赖的对象并不一定存在" class="headerlink" title="dependsOn用来声明要依赖的对象，但是依赖的对象并不一定存在"></a>dependsOn用来声明要依赖的对象，但是依赖的对象并不一定存在</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> nochild(dependsOn: <span class="string">'nomjy'</span>)&#123;</div><div class="line">    <span class="keyword">doLast</span>&#123;</div><div class="line">	  <span class="keyword">println</span> <span class="string">"I'm nomjy of nochild!"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">task</span> nomjy&#123;</div><div class="line">     <span class="keyword">doLast</span>&#123;</div><div class="line">	  <span class="keyword">println</span> <span class="string">"I'm nomjy!"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-nochild.png" alt="nochild"></center>


<h4 id="1-4-动态创建任务"><a href="#1-4-动态创建任务" class="headerlink" title="1.4 动态创建任务"></a>1.4 动态创建任务</h4><h5 id="动态创建任务的两种方式"><a href="#动态创建任务的两种方式" class="headerlink" title="动态创建任务的两种方式"></a>动态创建任务的两种方式</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span>.<span class="keyword">times</span> &#123; counter -&gt;</div><div class="line">    <span class="keyword">task</span> <span class="string">"task$counter"</span> &#123;</div><div class="line">        <span class="keyword">doLast</span> &#123;</div><div class="line">            <span class="keyword">println</span> <span class="string">"task $name"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">(<span class="number">5</span>..<span class="number">6</span>).<span class="keyword">each</span> &#123;</div><div class="line">    <span class="keyword">task</span> <span class="string">"task$it"</span> &lt;&lt; &#123;</div><div class="line">        <span class="keyword">println</span> <span class="string">"task $name"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-dynamic.png" alt="dynamic"></center>


<h5 id="动态创建任务间的依赖关系"><a href="#动态创建任务间的依赖关系" class="headerlink" title="动态创建任务间的依赖关系"></a>动态创建任务间的依赖关系</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span>.<span class="keyword">times</span> &#123; counter -&gt;</div><div class="line">    <span class="keyword">task</span> <span class="string">"task$counter"</span> &#123;</div><div class="line">        <span class="keyword">doLast</span> &#123;</div><div class="line">            <span class="keyword">println</span> <span class="string">"task $name"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">task0.dependsOn task2, task3</div><div class="line">(<span class="number">5</span>..<span class="number">6</span>).<span class="keyword">each</span> &#123;</div><div class="line">    <span class="keyword">task</span> <span class="string">"task$it"</span> &lt;&lt; &#123;</div><div class="line">        <span class="keyword">println</span> <span class="string">"task $name"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-multi.png" alt="multi"></center>


<h4 id="1-5-定义默认任务"><a href="#1-5-定义默认任务" class="headerlink" title="1.5 定义默认任务"></a>1.5 定义默认任务</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">defaultTasks <span class="string">'clean'</span>, <span class="string">'run'</span></div><div class="line"></div><div class="line"><span class="keyword">task</span> clean &#123;</div><div class="line">    <span class="keyword">doLast</span> &#123;</div><div class="line">        <span class="keyword">println</span> <span class="string">'Default Cleaning!'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">task</span> run &#123;</div><div class="line">    <span class="keyword">doLast</span> &#123;</div><div class="line">        <span class="keyword">println</span> <span class="string">'Default Running!'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">task</span> other &#123;</div><div class="line">    <span class="keyword">doLast</span> &#123;</div><div class="line">        <span class="keyword">println</span> <span class="string">"I'm not a default task!"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Gradle构建基础（Build-Script-Basics）"><a href="#Gradle构建基础（Build-Script-Basics）" class="headerlink" title="Gradle构建基础（Build Script Basics）"></a>Gradle构建基础（<a href="https://docs.gradle.org/3.5/userguide/tutorial_using_tasks.html" target="_blank" rel="external">Build Script Basics</a>）</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gradle中有两个基本的概念：project和task。每个Gradle的构建由一个project构成，它代表着需要被构建的组件或者构建的整个项目。每个project由一个或者多个task组成。task代表着Gradle构建过程中可执行的最小单元。例如当构建一个组件时，可
    
    </summary>
    
      <category term="Gradle" scheme="http://978420544.github.io/categories/gradle/"/>
    
    
      <category term="Gradle" scheme="http://978420544.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle学习笔记@1</title>
    <link href="http://978420544.github.io/2017/04/27/Gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://978420544.github.io/2017/04/27/Gradle学习笔记-1/</id>
    <published>2017-04-27T07:21:33.000Z</published>
    <updated>2017-04-27T07:26:14.605Z</updated>
    
    <content type="html"><![CDATA[<p>Gradle是一个基于JVM的构建工具，是一款通用灵活的构建工具，支持maven， Ivy仓库，支持传递性依赖管理，而不需要远程仓库或者是pom.xml和ivy.xml配置文件，基于Groovy，build脚本使用Groovy编写。</p>
<p>和Maven一样，Gradle只是提供了构建项目的一个框架，真正起作用的是Plugin。Gradle在默认情况下为我们提供了许多常用的Plugin，其中包括有构建Java项目的Plugin，还有War，Ear等。与Maven不同的是，Gradle不提供内建的项目生命周期管理，只是java Plugin向Project中添加了许多Task，这些Task依次执行，为我们营造了一种如同Maven般项目构建周期。</p>
<h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h3><h4 id="Gradle下载地址"><a href="#Gradle下载地址" class="headerlink" title="Gradle下载地址"></a><a href="https://gradle.org/releases" target="_blank" rel="external">Gradle下载地址</a></h4><center><img src="/images/gradle-download.png" alt="Complete图文"></center>

<h4 id="解压gradle-3-5-all-zip"><a href="#解压gradle-3-5-all-zip" class="headerlink" title="解压gradle-3.5-all.zip"></a>解压gradle-3.5-all.zip</h4><center><img src="/images/gradle-zip.png" alt="zip"></center>

<center><img src="/images/gradle-dir.png" alt="dir"></center>

<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><h5 id="添加GRADLE-HOME环境变量"><a href="#添加GRADLE-HOME环境变量" class="headerlink" title="添加GRADLE_HOME环境变量"></a>添加GRADLE_HOME环境变量</h5><center><img src="/images/gradle-home.png" alt="home"></center>

<h5 id="环境变量Path追加-GRADLE-HOME-bin"><a href="#环境变量Path追加-GRADLE-HOME-bin" class="headerlink" title="环境变量Path追加%GRADLE_HOME%\bin;"></a>环境变量Path追加%GRADLE_HOME%\bin;</h5><center><img src="/images/gradle-path.png" alt="path"></center>

<h3 id="2-简单测试"><a href="#2-简单测试" class="headerlink" title="2.简单测试"></a>2.简单测试</h3><h4 id="vesion查看"><a href="#vesion查看" class="headerlink" title="vesion查看"></a>vesion查看</h4><center><img src="/images/gradle-version.png" alt="version"></center>

<h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h4><h5 id="新建build-gradle文件，在文件中添加下方代码："><a href="#新建build-gradle文件，在文件中添加下方代码：" class="headerlink" title="新建build.gradle文件，在文件中添加下方代码："></a>新建build.gradle文件，在文件中添加下方代码：</h5><p>task helloWorld &lt;&lt; {<br>     println “Hello World!”<br>}</p>
<center><img src="/images/gradle-hello.png" alt="hello"></center>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gradle是一个基于JVM的构建工具，是一款通用灵活的构建工具，支持maven， Ivy仓库，支持传递性依赖管理，而不需要远程仓库或者是pom.xml和ivy.xml配置文件，基于Groovy，build脚本使用Groovy编写。&lt;/p&gt;
&lt;p&gt;和Maven一样，Grad
    
    </summary>
    
      <category term="Gradle" scheme="http://978420544.github.io/categories/gradle/"/>
    
    
      <category term="Gradle" scheme="http://978420544.github.io/tags/gradle/"/>
    
  </entry>
  
</feed>
