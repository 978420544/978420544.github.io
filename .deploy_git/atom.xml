<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿甘的博客</title>
  <subtitle>一天进步一点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://978420544.github.io/"/>
  <updated>2017-10-10T05:41:40.235Z</updated>
  <id>http://978420544.github.io/</id>
  
  <author>
    <name>阿甘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【数据库事物与锁】浅谈@2：数据库的读现象</title>
    <link href="http://978420544.github.io/2017/10/10/%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E7%89%A9%E4%B8%8E%E9%94%81%E3%80%91%E6%B5%85%E8%B0%88-2%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%BB%E7%8E%B0%E8%B1%A1/"/>
    <id>http://978420544.github.io/2017/10/10/【数据库事物与锁】浅谈-2：数据库的读现象/</id>
    <published>2017-10-10T05:39:39.000Z</published>
    <updated>2017-10-10T05:41:40.235Z</updated>
    
    <content type="html"><![CDATA[<p>“读现象”是多个事务并发执行时，在读取数据方面可能碰到的状况。其中包括脏读、不可重复读和幻读。</p>
<h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>脏读又称无效数据的读出，是指在数据库访问中，事务T1将某一值修改，然后事务T2读取该值，此后T1因为某种原因撤销对该值的修改，这就导致了T2所读取到的数据是无效的。</p>
<p>脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交(commit)到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。</p>
<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>不可重复读，是指在数据库访问中，一个事务范围内两个相同的查询却返回了不同数据。这是由于查询时系统中其他事务修改的提交而引起的。比如事务T1读取某一数据，事务T2读取并修改了该数据，T1为了对读取值进行检验而再次读取该数据，便得到了不同的结果。</p>
<p>一种更易理解的说法是：在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问该同一数据。那么，在第一个事务的两次读数据之间。由于第二个事务的修改，那么第一个事务读到的数据可能不一样，这样就发生了在一个事务内两次读到的数据是不一样的，因此称为不可重复读，即原始读取不可重复。</p>
<h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><pre><code>幻读(phantom read)”是不可重复读(Non-repeatable reads)的一种特殊场景：当事务没有获取范围锁的情况下执行SELECT … WHERE操作可能会发生“幻影读(phantom read)”。
</code></pre><p>幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样.一般解决幻读的方法是增加范围锁RangeS，锁定检锁范围为只读，这样就避免了幻读。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>要想解决脏读、不可重复读、幻读等读现象，那么就需要提高事务的隔离级别。但与此同时，事务的隔离级别越高，并发能力也就越低。所以，还需要读者根据业务需要进行权衡。</p>
<p>–转自 <a href="http://www.cnblogs.com/wang-meng/p/5506755.html" target="_blank" rel="external">《[数据库事务与锁]详解一: 数据库的读现象浅析》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“读现象”是多个事务并发执行时，在读取数据方面可能碰到的状况。其中包括脏读、不可重复读和幻读。&lt;/p&gt;
&lt;h3 id=&quot;脏读&quot;&gt;&lt;a href=&quot;#脏读&quot; class=&quot;headerlink&quot; title=&quot;脏读&quot;&gt;&lt;/a&gt;脏读&lt;/h3&gt;&lt;p&gt;脏读又称无效数据的读出，是指在
    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="事物与锁" scheme="http://978420544.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>【数据库事物与锁】浅谈@1：彻底理解数据库事务</title>
    <link href="http://978420544.github.io/2017/10/10/%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E7%89%A9%E4%B8%8E%E9%94%81%E3%80%91%E6%B5%85%E8%B0%88-1%EF%BC%9A%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    <id>http://978420544.github.io/2017/10/10/【数据库事物与锁】浅谈-1：彻底理解数据库事务/</id>
    <published>2017-10-10T04:49:28.000Z</published>
    <updated>2017-10-10T04:55:01.481Z</updated>
    
    <content type="html"><![CDATA[<p>事务(Transaction)，一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。在计算机术语中，事务通常就是指数据库事务。</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一个数据库事务通常包含对数据库进行读或写的一个操作序列。它的存在包含有以下两个目的：</p>
<pre><code>1、为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。
2、当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。
</code></pre><p>当一个事务被提交给了DBMS（数据库管理系统），则DBMS需要确保该事务中的所有操作都成功完成且其结果被永久保存在数据库中，如果事务中有的操作没有成功完成，则事务中的所有操作都需要被回滚，回到事务执行前的状态（要么全执行，要么全都不执行）;同时，该事务对数据库或者其他事务的执行无影响，所有的事务都好像在独立的运行。</p>
<p>但在现实情况下，失败的风险很高。在一个数据库事务的执行过程中，有可能会遇上事务操作失败、数据库系统/操作系统失败，甚至是存储介质失败等情况。这便需要DBMS对一个执行失败的事务执行恢复操作，将其数据库状态恢复到一致状态（数据的一致性得到保证的状态）。为了实现将数据库状态恢复到一致状态的功能，DBMS通常需要维护事务日志以追踪事务中所有影响数据库数据的操作。</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>并非任意的对数据库的操作序列都是数据库事务。事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。</p>
<pre><code>原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。
一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。
隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。
持久性（Durability）：一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。
</code></pre><h4 id="原子性与隔离行"><a href="#原子性与隔离行" class="headerlink" title="原子性与隔离行"></a>原子性与隔离行</h4><p>一致性与原子性是密切相关的,原子性的破坏可能导致数据库的不一致，数据的一致性问题并不都和原子性有关。<br>比如刚刚的例子，在第五步的时候，对B账户做加法时只加了50元。那么该过程可以符合原子性，但是数据的一致性就出现了问题。</p>
<p>因此，事务的原子性与一致性缺一不可。</p>
<p>–转自 <a href="http://www.cnblogs.com/wang-meng/p/5506745.html" target="_blank" rel="external">《[数据库事务与锁]详解一: 彻底理解数据库事务》</a></p>
<h3 id="特性浅析"><a href="#特性浅析" class="headerlink" title="特性浅析"></a>特性浅析</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><pre><code>无论一个事务里有多少执行步骤，这所有的步骤合起来是一个最小的执行单元，要么不做，要么全做，不存在只做到一半情况。比如银行转账，转出跟转入这两个包含在一个事务里的动作就是原子的。要么不转出也不转入，转出了就要转入。
</code></pre><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><pre><code>事务执行前与执行后数据内在的逻辑始终是成立的。比如转账前与转账后两人存款的总和始终不变。
</code></pre><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><pre><code>虽说事务是原子的，要么不做，要么全做，不存在做一半的情况。但是从代码实现上来说，事务里的步骤还是一步一步执行的，还是存在事务做到一半的情况。比如转账，代码怎么写？就两行代码，是先转出扣钱，再转入加钱。两行代码中间，也就是转出之后，转入之前，此时数据是不一致的。那怎样始终保证数据一致？那就用一个类似自欺欺人的办法，让转账这个事务在完成之前对别人都不可见，事务完成之前别人看到的都是转账前的状态，看不到转账步骤中间不一致的状态，所谓”隔离”。
</code></pre><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><pre><code>事务做完了就是做完了，就生效了。就像钱转给别人后当前这比转账交易就结束了，不可能再倒回来。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事务(Transaction)，一般是指要做的或所做的事情。在计算机术语中是指访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。在计算机术语中，事务通常就是指数据库事务。&lt;/p&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerl
    
    </summary>
    
      <category term="MYSQL" scheme="http://978420544.github.io/categories/mysql/"/>
    
    
      <category term="事物与锁" scheme="http://978420544.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>Java定时任务集群部署方式浅谈</title>
    <link href="http://978420544.github.io/2017/10/09/Java%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E6%B5%85%E8%B0%88/"/>
    <id>http://978420544.github.io/2017/10/09/Java定时任务集群部署方式浅谈/</id>
    <published>2017-10-09T06:22:22.000Z</published>
    <updated>2017-10-09T06:35:00.391Z</updated>
    
    <content type="html"><![CDATA[<p>本篇基于QUARTZ的定时任务，主要介绍一下定时任务的集群部署方式，方法一：QUARTZ支持的集群部署；方法二：通过HTTP调用的集群部署。</p>
<h3 id="任务调度-Job"><a href="#任务调度-Job" class="headerlink" title="任务调度 Job"></a>任务调度 Job</h3><p>任务调度 Job 如同数据库作业或 Windows计划任务，是分布式系统中异步和批处理的关键。我们的 Job分为 WinJob 和 HttpJob：WinJob是操作系统级别的定时任务，使用开源的框架Quartz 实现；而 HttpJob 则是采用 URL方式可定时调用微服务。HttpJob 借助集群巧妙地解决了 WinJob的单点和发布问题，并集中管理所有的调度规则，调度规则有简单规则和 Cron 表达式。HttpJob 它简单易用，但间隔时间不能低于 1分钟，毕竟通过 URL 方式来调度并不高效。</p>
<p>–转自 <a href="http://mp.weixin.qq.com/s/AbUGOWN27FEUPWgDQkF_Dw" target="_blank" rel="external">《可参考的才是有价值的：中小型研发团队架构落地实践18篇，含案例、代码》</a></p>
<h3 id="QUARTZ模式"><a href="#QUARTZ模式" class="headerlink" title="QUARTZ模式"></a>QUARTZ模式</h3><p>一个Quartz集群中的每个节点是一个独立的Quartz应用，它又管理着其他的节点。这就意味着你必须对每个节点分别启动或停止。Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一Quartz应用的。</p>
<p>　<br>Quartz Scheduler自身是察觉不到被集群的，只有配置给Scheduler的JDBC JobStore才知道。当QuartzScheduler启动时，它调用JobStore的schedulerStarted()方法，它告诉JobStoreScheduler已经启动了。schedulerStarted() 方法是在JobStoreSupport类中实现的。JobStoreSupport类会根据quartz.properties文件中的设置来确定Scheduler实例是否参与到集群中。假如配置了集群，一个新的ClusterManager类的实例就被创建、初始化并启动。ClusterManager是在JobStoreSupport类中的一个内嵌类，继承了java.lang.Thread，它会定期运行，并对Scheduler实例执行检入的功能。Scheduler也要查看是否有任何一个别的集群节点失败了。检入操作执行周期在quartz.properties中配置。</p>
<p>–转自 <a href="http://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html" target="_blank" rel="external">《Quartz集群原理及配置应用》</a></p>
<h3 id="HTTP模式"><a href="#HTTP模式" class="headerlink" title="HTTP模式"></a>HTTP模式</h3><p>HTTP模式，简而言之就是URL调用模式，通过发布的微服务调用来完成对应的任务，相应的定时可采用对应合适的调度工具，定时触发这些URL的调用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇基于QUARTZ的定时任务，主要介绍一下定时任务的集群部署方式，方法一：QUARTZ支持的集群部署；方法二：通过HTTP调用的集群部署。&lt;/p&gt;
&lt;h3 id=&quot;任务调度-Job&quot;&gt;&lt;a href=&quot;#任务调度-Job&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
      <category term="QUARTZ" scheme="http://978420544.github.io/categories/quartz/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
      <category term="Spring" scheme="http://978420544.github.io/tags/spring/"/>
    
      <category term="QUARTZ" scheme="http://978420544.github.io/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>JAVA中文编码和中文字符长度问题和解决方案</title>
    <link href="http://978420544.github.io/2017/07/28/JAVA%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E5%92%8C%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E9%95%BF%E5%BA%A6%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://978420544.github.io/2017/07/28/JAVA中文编码和中文字符长度问题和解决方案/</id>
    <published>2017-07-28T02:38:26.000Z</published>
    <updated>2017-07-28T02:39:56.145Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/u012506661/article/details/52752541" target="_blank" rel="external">【转】JAVA中文编码和中文字符长度问题和解决方案</a></p>
<p>本文说明了Java对中文问题产生的原因，并给出了对中文问题的解决方案。同时引发出了对中英文混和的字符串的长度问题，并且给出解决方案的实现。</p>
<h3 id="1-Java中文问题的产生"><a href="#1-Java中文问题的产生" class="headerlink" title="1.Java中文问题的产生"></a>1.Java中文问题的产生</h3><p>Java为了对全球的常用文字编码系统进行处理，采用了Unicode字符编码集。Unicode字符编码集是一种重要的交互和显示的通用字符编码标准，常见的有UTF-8、UTF-16、UCS-2、UCS-4等。国际标准组织为中文、日文和韩文字符（即CJK大字符集）对应的数据区间主要是4E00-9FFF，每一个字符对应惟一的一个编码。例如，“中文”这两个字对应的Unicode码分别是：0x4E2D、0x6587。下面这段代码System.out.println((char)0x4E2D + “” + (char)0x6587 ) ;就可以打印出“中文”来。我们通常使用的字符编码是一种双字节字符集（DBCS）。它与Unicode的编码机制有很大差别。Java语言的中文处理问题一般就是，如何将DBCS编码的字节串相互转换为正确的Unicode编码的字符串。所有中文问题的出现都是因为字节串没有被正确转换所至。中文问题的出现一般都是在几种不同语言的操作系统中交互信息的时候出现的。</p>
<h3 id="2-Java中文问题解决方案"><a href="#2-Java中文问题解决方案" class="headerlink" title="2.Java中文问题解决方案"></a>2.Java中文问题解决方案</h3><p>首先，请确保你的JDK的版本是稳定的新版本，这是正确处理Java中文问题的前提条件。</p>
<h4 id="2-1其他内码和Unicode码之间的转换"><a href="#2-1其他内码和Unicode码之间的转换" class="headerlink" title="2.1其他内码和Unicode码之间的转换"></a>2.1其他内码和Unicode码之间的转换</h4><p>解决问题的根源在于正确的处理各种内码和Unicode码进行相互转换。Java的String类提供了转换方法，具体用法是new String( byte[] , encoding ) ，即为用指定的字符编码方式转换指定的字节数组生成一个新的String。<br>比如：String abc = new String ( “hi…中文”.getBytes( “GB2312” ) , “GB2312” ) ;<br>其中，”hi…中文”.getBytes( “GB2312” )是按照GB2312的字符编码方式把该 String 转换成字节数组。然后再按照GB2312的方式生成一个abc的String对象。</p>
<h4 id="2-2让JDK用你指定的编码方式编译程序"><a href="#2-2让JDK用你指定的编码方式编译程序" class="headerlink" title="2.2让JDK用你指定的编码方式编译程序"></a>2.2让JDK用你指定的编码方式编译程序</h4><p>在用javac编译程序时，编译器会用系统的默认编码来编译Java程序。用如下命令编译javac -encoding GB2312 Xxx.java，则是指定用GB2312的编码来进行编译。</p>
<h4 id="2-3JDBC中的中文问题"><a href="#2-3JDBC中的中文问题" class="headerlink" title="2.3JDBC中的中文问题"></a>2.3JDBC中的中文问题</h4><p>JDBC（Java DataBase Connectivity）是Java程序访问数据库的一个统一的接口。JDBC在网络传输过程中，大多数会采用本地编码格式来传输中文字符，例如中文字符“0x4175”会被转成“0x41”和“0x75”进行传输。因此需要对 JDBC返回的字符以及要发给JDBC的字符进行转换。当用JDBC向数据库中插入数据和查询数据时，则需要作编码转换。所以当应用程序访问数据时，在入口和出口处都要作编码转换。对于中文数据，数据库字符编码的设置应当保证数据的完整性，比如GB2312、GBK、UTF-8 等都是可选的数据库编码。<br>比如：转换成UTF-8进行传输<br>sqlstr1 = new String(sqlstr1.getBytes(“GB2312”),” “UTF-8”);<br>转换成GB2312码进行显示<br>sqlstr2 = new String(sqlstr2.getBytes(“UTF-8”),”GB2312”);</p>
<h3 id="3-Java中文编码失败情况说明"><a href="#3-Java中文编码失败情况说明" class="headerlink" title="3.Java中文编码失败情况说明"></a>3.Java中文编码失败情况说明</h3><p>如果出现编码失败，在显示时会出现两种结果：“?”或者“□”。“?”表示转码错误；“□”表示转码失败。如果出现“?”，只有追本溯源查找问题所在才能解决问题；如果出现“□”，则表示可以在此基础上进一步进行转码操作直到成功。</p>
<h3 id="4-Java中文编码带来的字符串长度问题"><a href="#4-Java中文编码带来的字符串长度问题" class="headerlink" title="4.Java中文编码带来的字符串长度问题"></a>4.Java中文编码带来的字符串长度问题</h3><p>Java的中文问题处理系统除了在显示方面会出现问题外，还会对包含中文字符的字符串的长度的判断带来一定的问题。在C语言中，一个中文字符是2个字节，而在Java程序中，中文字符的长度是根据编码不同而不同的。下面的程序就可以看出问题所在。<br>测试程序如下，测试字符串为“中文abc”，测试平台为中文Win XP sp2。<br>public class ChineseCharacterTest<br>{<br>    public static void main( String [] args ) throws Exception<br>    {<br>        //按iso8859-1编码<br>        String iso = new String( “中文abc”.getBytes( “GB2312” ) , “ISO8859-1” );<br>        //按GB2312编码<br>        String gb = new String( iso.getBytes( “ISO8859-1” ) , “gb2312” ) ;<br>        //按utf-8编码<br>        String utf_8 = new String( iso.getBytes( “ISO8859-1” ) , “UTF-8” ) ;<br>//下面分别打印出编码后的字符串和长度<br>        System.out.println( “iso is :” + iso + “, the length is:” + iso.length() ) ;<br>        System.out.println( “gb is :” + gb + “, the length is :” + gb.length() ) ;<br>        System.out.println( “utf-8 is:” + utf_8 + “, the length is :” + utf_8.length() ) ;<br>    }<br>}<br>用GB2312编码进行编译程序，其运行结果是：<br>iso is :????????abc, the length is:7<br>gb is :中文abc, the length is :5<br>utf-8 is:????????abc, the length is :7<br>可以看出，在ISO8859-1和UTF-8中一个中文字符按照2个长度单位处理，在GB编码中一个中文字符按照1个长度单位处理。这样在进行字符截取时就要相当注意这个问题。如果在ISO8859-1或UTF-8中一不小心将中文截去半个，将会出现致命的错误。</p>
<h3 id="5-中文字符长度问题的解决方案"><a href="#5-中文字符长度问题的解决方案" class="headerlink" title="5.中文字符长度问题的解决方案"></a>5.中文字符长度问题的解决方案</h3><h4 id="5-1为了更好的解决中文字符的长度，我们设计并实现了下面的方法。基本思想是根据中文编码的编码区间，判断字符是否为中文字符，然后再作进一步的处理。"><a href="#5-1为了更好的解决中文字符的长度，我们设计并实现了下面的方法。基本思想是根据中文编码的编码区间，判断字符是否为中文字符，然后再作进一步的处理。" class="headerlink" title="5.1为了更好的解决中文字符的长度，我们设计并实现了下面的方法。基本思想是根据中文编码的编码区间，判断字符是否为中文字符，然后再作进一步的处理。"></a>5.1为了更好的解决中文字符的长度，我们设计并实现了下面的方法。基本思想是根据中文编码的编码区间，判断字符是否为中文字符，然后再作进一步的处理。</h4><p>程序如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> getChineseLength( <span class="keyword">String</span> name , <span class="keyword">String</span> endcoding )</div><div class="line">        <span class="keyword">throws</span> Exception&#123;</div><div class="line">    <span class="built_in">int</span> len = <span class="number">0</span> ; <span class="comment">//定义返回的字符串长度</span></div><div class="line">    <span class="built_in">int</span> j = <span class="number">0</span> ;</div><div class="line">    <span class="comment">//按照指定编码得到byte[]</span></div><div class="line">    <span class="built_in">byte</span> [] b_name = name.getBytes( endcoding ) ;</div><div class="line">    <span class="keyword">while</span> ( <span class="keyword">true</span> )&#123;</div><div class="line">        <span class="keyword">short</span> tmpst = (<span class="keyword">short</span>) ( b_name[ j ] &amp; <span class="number">0xF0</span> ) ;</div><div class="line">        <span class="keyword">if</span> ( tmpst &gt;= <span class="number">0xB0</span> )&#123;</div><div class="line">            <span class="keyword">if</span> ( tmpst &lt; <span class="number">0xC0</span> )&#123;</div><div class="line">                j += <span class="number">2</span> ;</div><div class="line">                len += <span class="number">2</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( ( tmpst == <span class="number">0xC0</span> ) || ( tmpst == <span class="number">0xD0</span> ) )&#123;</div><div class="line">                j += <span class="number">2</span> ;</div><div class="line">                len += <span class="number">2</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( tmpst == <span class="number">0xE0</span> )&#123;</div><div class="line">                j += <span class="number">3</span> ;</div><div class="line">                len += <span class="number">2</span> ;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( tmpst == <span class="number">0xF0</span> )&#123;</div><div class="line">                <span class="keyword">short</span> tmpst0 = (<span class="keyword">short</span>) ( ( (<span class="keyword">short</span>) b_name[ j ] ) &amp; <span class="number">0x0F</span> ) ;</div><div class="line">                <span class="keyword">if</span> ( tmpst0 == <span class="number">0</span> )&#123;</div><div class="line">                    j += <span class="number">4</span> ;</div><div class="line">                    len += <span class="number">2</span> ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( ( tmpst0 &gt; <span class="number">0</span> ) &amp;&amp; ( tmpst0 &lt; <span class="number">12</span> ) )&#123;</div><div class="line">                    j += <span class="number">5</span> ;</div><div class="line">                    len += <span class="number">2</span> ;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( tmpst0 &gt; <span class="number">11</span> )&#123;</div><div class="line">                    j += <span class="number">6</span> ;</div><div class="line">                    len += <span class="number">2</span> ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            j += <span class="number">1</span> ;</div><div class="line">            len += <span class="number">1</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( j &gt; b_name.length - <span class="number">1</span> )&#123;</div><div class="line">            <span class="keyword">break</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> len ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="5-2-使用GBK编码解决"><a href="#5-2-使用GBK编码解决" class="headerlink" title="5.2 使用GBK编码解决"></a>5.2 使用GBK编码解决</h4><p>中文字符在Java中默认使用Unicode编码为一个字节，使用GBK编码则为两个字节，因此转出的Byte数组的长度和真是的中文格式的字符长度一致（包含中文特殊字符）</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">messageBody.getBytes(<span class="string">"GBK"</span>)<span class="selector-class">.length</span> <span class="comment">//中文字符长度都是两个字节</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/u012506661/article/details/52752541&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【转】JAVA中文编码和中文字符长度问题和解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文
    
    </summary>
    
      <category term="Java" scheme="http://978420544.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis批量insert总结</title>
    <link href="http://978420544.github.io/2017/05/27/Mybatis%E6%89%B9%E9%87%8Finsert%E6%80%BB%E7%BB%93/"/>
    <id>http://978420544.github.io/2017/05/27/Mybatis批量insert总结/</id>
    <published>2017-05-27T05:51:47.000Z</published>
    <updated>2017-05-27T05:53:09.740Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis的强大和方便，不用多说，原生的SQL编码可以让程序员几乎不用学习新的语法和模式，同时简化了大量的代码；同样批量处理的insert也是要靠原生的sql打出一片天地。</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBatchUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> &gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></div><div class="line">        insert into user(name,age) values(#<span class="template-variable">&#123;item.name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;item.age&#125;</span><span class="xml">)</span></div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBatchUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> &gt;</span></span></div><div class="line">insert into user(name,age) values</div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></div><div class="line">        (#<span class="template-variable">&#123;item.name&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;item.age&#125;</span><span class="xml">)</span></div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<h6 id="注意：Mybatis并没有做集合容量的验证，如果集合参数为空或者size为0则生成的sql可能只有”insert-into-user-name-age-values”这样一段或者没有，所以说，写批量sql的时候注意在调用批量方法的地方加入对容量的验证"><a href="#注意：Mybatis并没有做集合容量的验证，如果集合参数为空或者size为0则生成的sql可能只有”insert-into-user-name-age-values”这样一段或者没有，所以说，写批量sql的时候注意在调用批量方法的地方加入对容量的验证" class="headerlink" title="注意：Mybatis并没有做集合容量的验证，如果集合参数为空或者size为0则生成的sql可能只有”insert into user(name,age) values”这样一段或者没有，所以说，写批量sql的时候注意在调用批量方法的地方加入对容量的验证"></a>注意：Mybatis并没有做集合容量的验证，如果集合参数为空或者size为0则生成的sql可能只有”insert into user(name,age) values”这样一段或者没有，所以说，写批量sql的时候注意在调用批量方法的地方加入对容量的验证</h6><h6 id="对Mybatis批量限制的一些想法，批量SQL使用事物提交，同时提交3万左右的数据量，并不会超出限制，因此感觉事物的提交，几万条数据或者更多都没有问题，只是处理时间会越来越长，同时提交3万左右的数据大概在3-4分钟左右，越多会越来越慢，越少则越来越快，如果数据量大的话，尽量考虑用分页的方式提交，分页的量，需要单独测试最合适的量，如果说3万数据量，1000条提交一次，处理的时间会远远小于一次提交的处理时间"><a href="#对Mybatis批量限制的一些想法，批量SQL使用事物提交，同时提交3万左右的数据量，并不会超出限制，因此感觉事物的提交，几万条数据或者更多都没有问题，只是处理时间会越来越长，同时提交3万左右的数据大概在3-4分钟左右，越多会越来越慢，越少则越来越快，如果数据量大的话，尽量考虑用分页的方式提交，分页的量，需要单独测试最合适的量，如果说3万数据量，1000条提交一次，处理的时间会远远小于一次提交的处理时间" class="headerlink" title="对Mybatis批量限制的一些想法，批量SQL使用事物提交，同时提交3万左右的数据量，并不会超出限制，因此感觉事物的提交，几万条数据或者更多都没有问题，只是处理时间会越来越长，同时提交3万左右的数据大概在3-4分钟左右，越多会越来越慢，越少则越来越快，如果数据量大的话，尽量考虑用分页的方式提交，分页的量，需要单独测试最合适的量，如果说3万数据量，1000条提交一次，处理的时间会远远小于一次提交的处理时间"></a>对Mybatis批量限制的一些想法，批量SQL使用事物提交，同时提交3万左右的数据量，并不会超出限制，因此感觉事物的提交，几万条数据或者更多都没有问题，只是处理时间会越来越长，同时提交3万左右的数据大概在3-4分钟左右，越多会越来越慢，越少则越来越快，如果数据量大的话，尽量考虑用分页的方式提交，分页的量，需要单独测试最合适的量，如果说3万数据量，1000条提交一次，处理的时间会远远小于一次提交的处理时间</h6><h5 id="foreach简介"><a href="#foreach简介" class="headerlink" title="foreach简介"></a>foreach简介</h5><p>对于foreach标签的解释参考了网上的资料，具体如下：<br>foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。<br>foreach元素的属性主要有 item，index，collection，open，separator，close。<br>item表示集合中每一个元素进行迭代时的别名，index指定一个名字，用于表示在迭代过程中，每次迭代到的位置，open表示该语句以什么开始，separator表示在每次进行迭代之间以什么符号作为分隔 符，close表示以什么结束，在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况 下，该属性的值是不一样的，主要有一下3种情况：</p>
<ul>
<li>1.如果传入的是单参数且参数类型是一个List的时候，collection属性值为list</li>
<li>2.如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array</li>
<li>3.如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis的强大和方便，不用多说，原生的SQL编码可以让程序员几乎不用学习新的语法和模式，同时简化了大量的代码；同样批量处理的insert也是要靠原生的sql打出一片天地。&lt;/p&gt;
&lt;h4 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlin
    
    </summary>
    
      <category term="Mybatis" scheme="http://978420544.github.io/categories/mybatis/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
      <category term="Mybatis" scheme="http://978420544.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>关于FTP的上传下载（Java）</title>
    <link href="http://978420544.github.io/2017/05/27/%E5%85%B3%E4%BA%8EFTP%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%EF%BC%88Java%EF%BC%89/"/>
    <id>http://978420544.github.io/2017/05/27/关于FTP的上传下载（Java）/</id>
    <published>2017-05-27T03:47:41.000Z</published>
    <updated>2017-05-27T03:49:03.775Z</updated>
    
    <content type="html"><![CDATA[<p>最近，在做一个账单文件的业务，遇到了一些问题，几经周折，终于把功能业务完善，希望对大家有所帮助！</p>
<h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>调用某接口，接收一个文件，文件的传输形式为返回报文中的一个字段，字段值为文件内容，需要Base64解码，读取文件需要将这个文件内容字符串转化为zip读取？</p>
<h5 id="String转化Zip文件"><a href="#String转化Zip文件" class="headerlink" title="String转化Zip文件"></a>String转化Zip文件</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String</span> STR=<span class="string">""</span>;</div><div class="line">InputStream DateByte = <span class="keyword">new</span> ByteArrayInputStream(SecurityUtil.Base64Decode(STR));<span class="comment">//把获取的zip文件的byte放入输入流</span></div><div class="line"><span class="built_in">File</span> targetFile = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"F:\\XX.zip"</span>); </div><div class="line">targetFile.createNewFile(); <span class="comment">//创建文件</span></div><div class="line">OutputStream outStream = <span class="keyword">new</span> FileOutputStream(targetFile); </div><div class="line"><span class="keyword">byte</span>[] by = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; </div><div class="line"><span class="built_in">while</span> (DateByte.<span class="built_in">available</span>() &gt; <span class="number">0</span>) </div><div class="line">&#123; </div><div class="line">	DateByte.<span class="built_in">read</span>(by); <span class="comment">//读取接收的文件流</span></div><div class="line">	outStream.<span class="built_in">write</span>(by); <span class="comment">//写入文件</span></div><div class="line">&#125; </div><div class="line">DateByte.<span class="built_in">close</span>(); </div><div class="line">outStream.<span class="built_in">flush</span>(); </div><div class="line">outStream.<span class="built_in">close</span>();</div></pre></td></tr></table></figure>
<h5 id="解码为专用解码，如果转成的文件不对要看看解码的方式对不对"><a href="#解码为专用解码，如果转成的文件不对要看看解码的方式对不对" class="headerlink" title="解码为专用解码，如果转成的文件不对要看看解码的方式对不对"></a>解码为专用解码，如果转成的文件不对要看看解码的方式对不对</h5><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p>需要把文件上传至FTP，但是zip文件为二进制文件，需要做二进制传输方式的设置？</p>
<h5 id="FTP上传和下载（二进制形式）"><a href="#FTP上传和下载（二进制形式）" class="headerlink" title="FTP上传和下载（二进制形式）"></a>FTP上传和下载（二进制形式）</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPClient;</div><div class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPFile;</div><div class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPReply;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ftpUtil</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ftpUtil.class);</div><div class="line">	<span class="comment">/** </span></div><div class="line">	02. * Description: 从FTP服务器下载文件 </div><div class="line">	04. * <span class="doctag">@param</span> url FTP服务器hostname </div><div class="line">	05. * <span class="doctag">@param</span> port FTP服务器端口 </div><div class="line">	06. * <span class="doctag">@param</span> username FTP登录账号 </div><div class="line">	07. * <span class="doctag">@param</span> password FTP登录密码 </div><div class="line">	08. * <span class="doctag">@param</span> remotePath FTP服务器上的相对路径 </div><div class="line">	09. * <span class="doctag">@param</span> fileName 要下载的文件名 </div><div class="line">	10. * <span class="doctag">@param</span> localPath 下载后保存到本地的路径 </div><div class="line">	11. * <span class="doctag">@return</span> </div><div class="line">	12. */  </div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">downFile</span><span class="params">(String url, <span class="keyword">int</span> port, String username,</span></span></div><div class="line">			String password, String remotePath, String fileName,</div><div class="line">			String localPath) &#123;</div><div class="line">		<span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">		FTPClient ftp = <span class="keyword">new</span> FTPClient();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">int</span> reply;</div><div class="line">			ftp.connect(url, port);</div><div class="line">			<span class="comment">// 如果采用默认端口，可以使用ftp.connect(url)的方式直接连接FTP服务器</span></div><div class="line">			ftp.login(username, password);<span class="comment">// 登录</span></div><div class="line">			ftp.setFileType(FTPClient.BINARY_FILE_TYPE);<span class="comment">//文件类型		</span></div><div class="line">			reply = ftp.getReplyCode();</div><div class="line">			<span class="keyword">if</span> (!FTPReply.isPositiveCompletion(reply)) &#123;</div><div class="line">				ftp.disconnect();</div><div class="line">				<span class="keyword">return</span> success;</div><div class="line">			&#125;</div><div class="line">			ftp.changeWorkingDirectory(remotePath);<span class="comment">// 转移到FTP服务器目录</span></div><div class="line">			ftp.enterLocalPassiveMode();</div><div class="line">			 </div><div class="line">			FTPFile[] fs = ftp.listFiles();</div><div class="line">			<span class="keyword">for</span> (FTPFile ff : fs) &#123;</div><div class="line">				<span class="keyword">if</span> (ff.getName().equals(fileName)) &#123;</div><div class="line">					File localFile = <span class="keyword">new</span> File(localPath + ff.getName());</div><div class="line">					OutputStream is = <span class="keyword">new</span> FileOutputStream(localFile);</div><div class="line">					ftp.retrieveFile(ff.getName(), is);</div><div class="line">					is.close();</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			ftp.logout();</div><div class="line">			success = <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			logger.<span class="keyword">error</span>(e.getMessage());</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (ftp.isConnected()) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					ftp.disconnect();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> success;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Description: 向FTP服务器上传文件</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@Version</span>1.0 Jul 27, 2008 4:31:09 PM by  创建</div><div class="line">	 * <span class="doctag">@param</span> url</div><div class="line">	 *            FTP服务器hostname</div><div class="line">	 * <span class="doctag">@param</span> port</div><div class="line">	 *            FTP服务器端口</div><div class="line">	 * <span class="doctag">@param</span> username</div><div class="line">	 *            FTP登录账号</div><div class="line">	 * <span class="doctag">@param</span> password</div><div class="line">	 *            FTP登录密码</div><div class="line">	 * <span class="doctag">@param</span> path</div><div class="line">	 *            FTP服务器保存目录</div><div class="line">	 * <span class="doctag">@param</span> filename</div><div class="line">	 *            上传到FTP服务器上的文件名</div><div class="line">	 * <span class="doctag">@param</span> input</div><div class="line">	 *            输入流</div><div class="line">	 * <span class="doctag">@return</span> 成功返回true，否则返回false</div><div class="line">	 */</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">uploadFile</span><span class="params">(String url, <span class="keyword">int</span> port, String username,</span></span></div><div class="line">			String password, String path, String filename, InputStream input) &#123;</div><div class="line">		<span class="keyword">boolean</span> success = <span class="keyword">false</span>;</div><div class="line">		FTPClient ftp = <span class="keyword">new</span> FTPClient();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">int</span> reply;</div><div class="line">			ftp.connect(url, port);<span class="comment">// 连接FTP服务器</span></div><div class="line">			<span class="comment">// 如果采用默认端口，可以使用ftp.connect(url)的方式直接连接FTP服务器</span></div><div class="line">			ftp.login(username, password);<span class="comment">// 登录</span></div><div class="line">			reply = ftp.getReplyCode();</div><div class="line">			<span class="keyword">if</span> (!FTPReply.isPositiveCompletion(reply)) &#123;</div><div class="line">				ftp.disconnect();</div><div class="line">				<span class="keyword">return</span> success;</div><div class="line">			&#125;</div><div class="line">			ftp.setFileType(FTPClient.BINARY_FILE_TYPE);</div><div class="line">			ftp.changeWorkingDirectory(path);</div><div class="line">			ftp.enterLocalPassiveMode();</div><div class="line">			ftp.storeFile(filename, input);</div><div class="line"></div><div class="line">			input.close();</div><div class="line">			ftp.logout();</div><div class="line">			success = <span class="keyword">true</span>;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			logger.<span class="keyword">error</span>(e.getMessage());</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (ftp.isConnected()) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					ftp.disconnect();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException ioe) &#123;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> success;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="注意：二进制不仅代码中要设置，对应的FTP服务器也需要设置对应的传输方式"><a href="#注意：二进制不仅代码中要设置，对应的FTP服务器也需要设置对应的传输方式" class="headerlink" title="注意：二进制不仅代码中要设置，对应的FTP服务器也需要设置对应的传输方式"></a>注意：二进制不仅代码中要设置，对应的FTP服务器也需要设置对应的传输方式</h5><h5 id="二进制设置"><a href="#二进制设置" class="headerlink" title="二进制设置"></a>二进制设置</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ftp</span><span class="selector-class">.setFileType</span>(<span class="selector-tag">FTPClient</span><span class="selector-class">.BINARY_FILE_TYPE</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，在做一个账单文件的业务，遇到了一些问题，几经周折，终于把功能业务完善，希望对大家有所帮助！&lt;/p&gt;
&lt;h4 id=&quot;问题1&quot;&gt;&lt;a href=&quot;#问题1&quot; class=&quot;headerlink&quot; title=&quot;问题1&quot;&gt;&lt;/a&gt;问题1&lt;/h4&gt;&lt;p&gt;调用某接口，接收一个
    
    </summary>
    
      <category term="Java" scheme="http://978420544.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
      <category term="FTP" scheme="http://978420544.github.io/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>Github2Hexo搭建</title>
    <link href="http://978420544.github.io/2017/05/12/Github2Hexo%E6%90%AD%E5%BB%BA/"/>
    <id>http://978420544.github.io/2017/05/12/Github2Hexo搭建/</id>
    <published>2017-05-12T04:57:48.000Z</published>
    <updated>2017-05-12T05:08:38.102Z</updated>
    
    <content type="html"><![CDATA[<p>在github社区越来越火的时代，越来越多的人在github上去做研究开发，它的博客也慢慢的兴起，并且为了在以后的求职中有更大的优势，我们需要在互联网上展现自己的优势和经验，那么一份个人的博客绝对是一个很好的选择，在这篇文章，我会给大家介绍github账户主页的创建和基于hexo的静态博客页面的生成，我们可以在markdown的语法的基础上上传我们的博客，更快更高效率的去展现自己文章的内容！</p>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><h3 id="1-github-SSL配置"><a href="#1-github-SSL配置" class="headerlink" title="1. github SSL配置"></a>1. github SSL配置</h3><h4 id="1-1-登录github社区，进入账户设置页面"><a href="#1-1-登录github社区，进入账户设置页面" class="headerlink" title="1.1 登录github社区，进入账户设置页面"></a>1.1 登录github社区，进入账户设置页面</h4><p>注册并登录github设置，点击个人账户图像进入如图的下拉菜单，点击<span style="color:red;">Setting</span>,进入个人账户设置的页面。</p>
<h5 id="1-1-1-账户菜单"><a href="#1-1-1-账户菜单" class="headerlink" title="1.1.1 账户菜单"></a>1.1.1 账户菜单</h5><center><img src="/images/git/git-setting.png" alt="hello"></center>

<h5 id="1-1-2-账户设置"><a href="#1-1-2-账户设置" class="headerlink" title="1.1.2 账户设置"></a>1.1.2 账户设置</h5><center><img src="/images/git/git-setting2.png" alt="hello"></center>

<h4 id="1-2-配置SSl-keys"><a href="#1-2-配置SSl-keys" class="headerlink" title="1.2  配置SSl keys"></a>1.2  配置SSl keys</h4><h5 id="1-2-1-本地安装GitBash"><a href="#1-2-1-本地安装GitBash" class="headerlink" title="1.2.1 本地安装GitBash"></a>1.2.1 本地安装<a href="https://git-scm.com/downloads" target="_blank" rel="external">GitBash</a></h5><p>仅需要点击exe文件安装，下一步即可，可选项可按照自己情况来选择</p>
<h5 id="1-2-2-设置Git的username和email"><a href="#1-2-2-设置Git的username和email" class="headerlink" title="1.2.2 设置Git的username和email"></a>1.2.2 设置Git的username和email</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"xuhaiyan"</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"haiyan.xu.vip@gmail.com"</span></span></div></pre></td></tr></table></figure>
<h5 id="1-2-3-生成SSH秘钥"><a href="#1-2-3-生成SSH秘钥" class="headerlink" title="1.2.3 生成SSH秘钥"></a>1.2.3 生成SSH秘钥</h5><h6 id="查看是否已经有了ssh密钥"><a href="#查看是否已经有了ssh密钥" class="headerlink" title="查看是否已经有了ssh密钥"></a>查看是否已经有了ssh密钥</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span></div></pre></td></tr></table></figure>
<h6 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -<span class="selector-tag">b</span> <span class="number">4096</span> -C <span class="string">"your_email@example.com"</span></div></pre></td></tr></table></figure>
<p>如果你不需要给秘钥另外设置存储位置的话，请以此按下Enter键：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Enter <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">in</span> which <span class="built_in">to</span> save <span class="keyword">the</span> key (/c/Users/you/.ssh/id_rsa):[Press enter]</div><div class="line">Enter passphrase (<span class="literal">empty</span> <span class="keyword">for</span> no passphrase): [Type <span class="keyword">a</span> passphrase]</div><div class="line">Enter same passphrase again: [Type passphrase again]</div></pre></td></tr></table></figure></p>
<h5 id="1-2-4-github账户配置SSH秘钥"><a href="#1-2-4-github账户配置SSH秘钥" class="headerlink" title="1.2.4 github账户配置SSH秘钥"></a>1.2.4 github账户配置SSH秘钥</h5><h6 id="粘贴生成的SSH秘钥到github上面"><a href="#粘贴生成的SSH秘钥到github上面" class="headerlink" title="粘贴生成的SSH秘钥到github上面"></a>粘贴生成的SSH秘钥到github上面</h6><ul>
<li>账户菜单-账户设置-SSH and GPG keys</li>
<li>新建SSH keys</li>
<li>把粘贴的秘钥放进去</li>
<li></li>
</ul>
<center><img src="/images/git/git-ssh.png" alt="hello"></center>

<center><img src="/images/git/git-ssh-new.png" alt="hello"></center>

<center><img src="/images/git/git-ssh-save.png" alt="hello"></center>




<h3 id="2-github-博客项目"><a href="#2-github-博客项目" class="headerlink" title="2. github 博客项目"></a>2. github 博客项目</h3><h4 id="2-1-创建博客项目"><a href="#2-1-创建博客项目" class="headerlink" title="2.1 创建博客项目"></a>2.1 创建博客项目</h4><p>博客项目创建应该按照这样的规范：username.github.io的项目命名规范，生成的主页可以使用域名:username.github.io访问；</p>
<h4 id="2-2-个人主页分支设置"><a href="#2-2-个人主页分支设置" class="headerlink" title="2.2 个人主页分支设置"></a>2.2 个人主页分支设置</h4><p>设置github访问的分支，用来存放生成的静态页面；<br>进入项目–setting，设置GitHub Pages分支，默认可以选择master分支，点击Save保存；</p>
<h5 id="2-2-1-setting"><a href="#2-2-1-setting" class="headerlink" title="2.2.1 setting"></a>2.2.1 setting</h5><center><img src="/images/git/git-project-setting.jpg" alt="hello"></center>

<h5 id="2-2-2-Repository"><a href="#2-2-2-Repository" class="headerlink" title="2.2.2 Repository"></a>2.2.2 Repository</h5><center><img src="/images/git/git-project-repository.jpg" alt="hello"></center>

<h5 id="2-2-3-GitHub-Pages"><a href="#2-2-3-GitHub-Pages" class="headerlink" title="2.2.3 GitHub Pages"></a>2.2.3 GitHub Pages</h5><center><img src="/images/git/git-project-pages.jpg" alt="hello"></center>


<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>依赖git和nodeJs，安装好git，可以在git上面执行对应的安装指令</p>
<h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1. 安装 Node.js"></a>1. 安装 Node.js</h3><p>hexo生成架构师基于Node.js的，需要安装Node.js;如果不对其进行其他的学习的话，只需要根据小白法则，进行下一步一次安装即可；如果需要学习就需要找对应的教程进行学习，这里不对安装过程赘述。</p>
<h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h3><h4 id="2-1-验证git和nodeJs的安装"><a href="#2-1-验证git和nodeJs的安装" class="headerlink" title="2.1 验证git和nodeJs的安装"></a>2.1 验证git和nodeJs的安装</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git --<span class="keyword">version</span></div><div class="line"><span class="keyword">node</span> <span class="title">-v</span></div></pre></td></tr></table></figure>
<h4 id="2-2-通过淘宝镜像安装hexo"><a href="#2-2-通过淘宝镜像安装hexo" class="headerlink" title="2.2 通过淘宝镜像安装hexo"></a>2.2 通过淘宝镜像安装hexo</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g cnpm <span class="comment">--registry=https://registry.npm.taobao.org</span></div><div class="line">cnpm <span class="keyword">install</span> -g hexo-cli</div><div class="line">cnpm <span class="keyword">install</span> hexo <span class="comment">--save</span></div></pre></td></tr></table></figure>
<p>注意：不需要理会出现的警告即可</p>
<h4 id="2-3-查看hexo版本"><a href="#2-3-查看hexo版本" class="headerlink" title="2.3 查看hexo版本"></a>2.3 查看hexo版本</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo -v</span></div></pre></td></tr></table></figure>
<h3 id="3-hexo博客搭建"><a href="#3-hexo博客搭建" class="headerlink" title="3. hexo博客搭建"></a>3. hexo博客搭建</h3><h4 id="3-1-hexo初始化"><a href="#3-1-hexo初始化" class="headerlink" title="3.1 hexo初始化"></a>3.1 hexo初始化</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo init</span></div></pre></td></tr></table></figure>
<h4 id="3-2-生成器的安装和博客简单介绍"><a href="#3-2-生成器的安装和博客简单介绍" class="headerlink" title="3.2 生成器的安装和博客简单介绍"></a>3.2 生成器的安装和博客简单介绍</h4><h5 id="3-2-1-生成器的安装"><a href="#3-2-1-生成器的安装" class="headerlink" title="3.2.1 生成器的安装"></a>3.2.1 生成器的安装</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm <span class="keyword">install</span></div></pre></td></tr></table></figure>
<h5 id="3-2-2-本地简单测试运行"><a href="#3-2-2-本地简单测试运行" class="headerlink" title="3.2.2 本地简单测试运行"></a>3.2.2 本地简单测试运行</h5><p>运行命令<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo s -g</span></div></pre></td></tr></table></figure></p>
<p>测试地址<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">localhost:</span><span class="number">4000</span></div></pre></td></tr></table></figure></p>
<h5 id="3-2-3-根目录下配置实例"><a href="#3-2-3-根目录下配置实例" class="headerlink" title="3.2.3 根目录下配置实例"></a>3.2.3 根目录下配置实例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#博客名称</span></div><div class="line"><span class="attr">title:</span> <span class="string">我的博客</span></div><div class="line"><span class="comment">#副标题</span></div><div class="line"><span class="attr">subtitle:</span> <span class="string">一天进步一点</span></div><div class="line"><span class="comment">#简介</span></div><div class="line"><span class="attr">description:</span> <span class="string">记录生活点滴</span></div><div class="line"><span class="comment">#博客作者</span></div><div class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span></div><div class="line"><span class="comment">#博客语言</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></div><div class="line"><span class="comment">#时区</span></div><div class="line"><span class="attr">timezone:</span></div><div class="line"></div><div class="line"><span class="comment">#博客地址,与申请的GitHub一致</span></div><div class="line"><span class="attr">url:</span> <span class="attr">http://elfwalk.github.io</span></div><div class="line"><span class="attr">root:</span> <span class="string">/</span></div><div class="line"><span class="comment">#博客链接格式</span></div><div class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></div><div class="line"><span class="attr">permalink_defaults:</span></div><div class="line"></div><div class="line"><span class="attr">source_dir:</span> <span class="string">source</span></div><div class="line"><span class="attr">public_dir:</span> <span class="string">public</span></div><div class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></div><div class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></div><div class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></div><div class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></div><div class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></div><div class="line"><span class="attr">skip_render:</span></div><div class="line"></div><div class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></div><div class="line"><span class="attr">default_layout:</span> <span class="string">post</span></div><div class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></div><div class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></div><div class="line"><span class="attr">filename_case:</span> <span class="number">0</span></div><div class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></div><div class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></div><div class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">future:</span> <span class="literal">true</span></div><div class="line"><span class="attr">highlight:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  tab_replace:</span></div><div class="line"></div><div class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></div><div class="line"><span class="attr">category_map:</span></div><div class="line"><span class="attr">tag_map:</span></div><div class="line"></div><div class="line"><span class="comment">#日期格式</span></div><div class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></div><div class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></div><div class="line"></div><div class="line"><span class="comment">#分页，每页文章数量</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">10</span></div><div class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></div><div class="line"></div><div class="line"><span class="comment">#博客主题</span></div><div class="line"><span class="attr">theme:</span> <span class="string">landscape</span></div><div class="line"></div><div class="line"><span class="comment">#发布设置</span></div><div class="line"><span class="attr">deploy:</span> </div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line">  <span class="comment">#elfwalk改为你的github用户名</span></div><div class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/elfwalk/elfwalk.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<h5 id="3-2-4-md文件实例"><a href="#3-2-4-md文件实例" class="headerlink" title="3.2.4 md文件实例"></a>3.2.4 md文件实例</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> <span class="string">hello</span></div><div class="line"><span class="attr">date:</span> <span class="number">2015</span><span class="bullet">-07</span><span class="bullet">-01</span> <span class="number">22</span><span class="string">:37:23</span></div><div class="line"><span class="attr">categories:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">日志</span></div><div class="line"><span class="bullet">  -</span> <span class="string">二级目录</span></div><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">hello</span></div><div class="line"><span class="meta">---</span></div><div class="line"></div><div class="line"><span class="string">摘要:</span></div><div class="line"><span class="string">&lt;!--more--&gt;</span></div><div class="line"><span class="string">正文:</span></div></pre></td></tr></table></figure>
<h5 id="3-2-5-博客发布"><a href="#3-2-5-博客发布" class="headerlink" title="3.2.5 博客发布"></a>3.2.5 博客发布</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo d -g</span></div></pre></td></tr></table></figure>
<h4 id="3-3-hexo命令简介"><a href="#3-3-hexo命令简介" class="headerlink" title="3.3 hexo命令简介"></a>3.3 hexo命令简介</h4><h5 id="3-3-1-命令简写"><a href="#3-3-1-命令简写" class="headerlink" title="3.3.1 命令简写"></a>3.3.1 命令简写</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo <span class="keyword">generate</span></div><div class="line">hexo n <span class="string">"我的博客"</span> == hexo <span class="keyword">new</span> <span class="string">"我的博客"</span> #新建文章</div><div class="line">hexo p == hexo publish</div><div class="line">hexo g == hexo <span class="keyword">generate</span>#生成</div><div class="line">hexo s == hexo server #启动服务预览</div><div class="line">hexo d == hexo deploy#部署</div></pre></td></tr></table></figure>
<h5 id="3-3-2-服务器"><a href="#3-3-2-服务器" class="headerlink" title="3.3.2 服务器"></a>3.3.2 服务器</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">server</span> <span class="meta">#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span></div><div class="line">hexo <span class="keyword">server</span> -s <span class="meta">#静态模式</span></div><div class="line">hexo <span class="keyword">server</span> -p <span class="number">5000</span> <span class="meta">#更改端口</span></div><div class="line">hexo <span class="keyword">server</span> -i <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> <span class="meta">#自定义 IP</span></div><div class="line"></div><div class="line">hexo clean <span class="meta">#清除缓存 网页正常情况下可以忽略此条命令</span></div><div class="line">hexo g <span class="meta">#生成静态网页</span></div><div class="line">hexo d <span class="meta">#开始部署</span></div></pre></td></tr></table></figure>
<h5 id="3-3-3-监视文件变动"><a href="#3-3-3-监视文件变动" class="headerlink" title="3.3.3 监视文件变动"></a>3.3.3 监视文件变动</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span> #使用 Hexo 生成静态文件快速而且简单</div><div class="line">hexo <span class="keyword">generate</span> --watch #监视文件变动</div></pre></td></tr></table></figure>
<h5 id="3-3-4-部署命令"><a href="#3-3-4-部署命令" class="headerlink" title="3.3.4 部署命令"></a>3.3.4 部署命令</h5><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span> --deploy</div><div class="line">hexo deploy --<span class="keyword">generate</span></div></pre></td></tr></table></figure>
<p>等效于<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo deploy -g</div><div class="line">hexo <span class="keyword">server</span> -g</div></pre></td></tr></table></figure></p>
<h5 id="3-3-5-页面的创建"><a href="#3-3-5-页面的创建" class="headerlink" title="3.3.5 页面的创建"></a>3.3.5 页面的创建</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] &lt;<span class="built_in">title</span>&gt; <span class="meta">#草稿</span></div><div class="line"></div><div class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="meta">#新建文章</span></div><div class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="meta">#新建页面</span></div><div class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></div><div class="line">hexo server <span class="meta">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy <span class="meta">#将.deploy目录部署到GitHub</span></div><div class="line"></div><div class="line">hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</div><div class="line">hexo <span class="keyword">new</span> photo <span class="string">"My Gallery"</span></div><div class="line">hexo <span class="keyword">new</span> <span class="string">"Hello World"</span> --lang tw</div></pre></td></tr></table></figure>
<h4 id="3-4-FAQ"><a href="#3-4-FAQ" class="headerlink" title="3.4 FAQ"></a>3.4 FAQ</h4><h5 id="3-4-1-ERROR-Deployer-not-found-git"><a href="#3-4-1-ERROR-Deployer-not-found-git" class="headerlink" title="3.4.1 ERROR Deployer not found: git"></a>3.4.1 ERROR Deployer not found: git</h5><p>解决方法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<h5 id="3-4-2-部署类型设置git"><a href="#3-4-2-部署类型设置git" class="headerlink" title="3.4.2 部署类型设置git"></a>3.4.2 部署类型设置git</h5><p>hexo 3.0 部署类型不再是github，_config.yml 中修改<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># Deployment</span></div><div class="line"><span class="meta">## Docs: http:<span class="comment">//hexo.io/docs/deployment.html</span></span></div><div class="line"><span class="symbol">deploy:</span></div><div class="line"><span class="symbol">  type:</span> git</div><div class="line"><span class="symbol">  repository:</span> git@***.github.com:***<span class="comment">/***.github.io.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h5 id="3-4-3-xcodebuild"><a href="#3-4-3-xcodebuild" class="headerlink" title="3.4.3 xcodebuild"></a>3.4.3 xcodebuild</h5><p>xcode-select: error: tool ‘xcodebuild’ requires Xcode, but active developer directory ‘/Library/Developer/CommandLineTools’ is a command line tools instance<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> bcrypt</div></pre></td></tr></table></figure></p>
<h5 id="3-4-4-RSS不显示"><a href="#3-4-4-RSS不显示" class="headerlink" title="3.4.4 RSS不显示"></a>3.4.4 RSS不显示</h5><p>安装RSS插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<h5 id="3-4-5-关于摘要"><a href="#3-4-5-关于摘要" class="headerlink" title="3.4.5 关于摘要"></a>3.4.5 关于摘要</h5><p>有的主题可能自带摘要，但是有的需要自己安装摘要或者修改源码</p>
<h5 id="3-4-6-关于网页计数器的使用"><a href="#3-4-6-关于网页计数器的使用" class="headerlink" title="3.4.6 关于网页计数器的使用"></a>3.4.6 关于网页计数器的使用</h5><p>建议使用不蒜子计数器，简单使用</p>
<h5 id="3-4-7-关于开启评论"><a href="#3-4-7-关于开启评论" class="headerlink" title="3.4.7 关于开启评论"></a>3.4.7 关于开启评论</h5><p>可以通过配置或者该源码，使用第三方插件进行开启</p>
<h5 id="3-4-8-关于google和百度的收录"><a href="#3-4-8-关于google和百度的收录" class="headerlink" title="3.4.8 关于google和百度的收录"></a>3.4.8 关于google和百度的收录</h5><p>google和百度站点地图的安装<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>根目录配置文件配置<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 自动生成sitemap</span></div><div class="line"><span class="symbol">sitemap:</span></div><div class="line"><span class="symbol">path:</span> sitemap.xml</div><div class="line"><span class="symbol">baidusitemap:</span></div><div class="line"><span class="symbol">path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>
<p>生成结果：sitemap.xml跟baidusitemap.xml<br>对应平台收录可以去谷歌和百度的站长平台去进行录入，提交使用站点地图提交的方式即可（使用sitemap提交）<br>注意：github禁止百度爬虫访问博客，可以采用其他的代码托管网站，比如说coding，进行提交<br>需要注意的是，baidusitemap.xml有可能是生成的github的链接，需要到node_modules文件夹下面的百度插件修改对应的链接的获取，重新生成即可</p>
<h5 id="3-4-9-关于md文件的提交"><a href="#3-4-9-关于md文件的提交" class="headerlink" title="3.4.9 关于md文件的提交"></a>3.4.9 关于md文件的提交</h5><p>可以在username.github.io的项目里面新建一个分支用于存放md文件</p>
<h5 id="3-4-10-关于-config-yml的修改"><a href="#3-4-10-关于-config-yml的修改" class="headerlink" title="3.4.10 关于_config.yml的修改"></a>3.4.10 关于_config.yml的修改</h5><p>需要注意的是根目录和主题目录下的_config.yml文件，视情况而定</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在github社区越来越火的时代，越来越多的人在github上去做研究开发，它的博客也慢慢的兴起，并且为了在以后的求职中有更大的优势，我们需要在互联网上展现自己的优势和经验，那么一份个人的博客绝对是一个很好的选择，在这篇文章，我会给大家介绍github账户主页的创建和基于h
    
    </summary>
    
      <category term="Hexo" scheme="http://978420544.github.io/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://978420544.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>JAVA解析xml的五种方式对比</title>
    <link href="http://978420544.github.io/2017/05/09/JAVA%E8%A7%A3%E6%9E%90xml%E7%9A%84%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/"/>
    <id>http://978420544.github.io/2017/05/09/JAVA解析xml的五种方式对比/</id>
    <published>2017-05-09T07:34:05.000Z</published>
    <updated>2017-05-09T07:35:21.134Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要对比Java即系xml的五种方式，这五种方式各有利弊，大家可以看情况采用哪一种。</p>
<h3 id="1-DOM解析"><a href="#1-DOM解析" class="headerlink" title="1. DOM解析"></a>1. DOM解析</h3><p>DOM是html和xml的应用程序接口(API)，以层次结构（类似于树型）来组织节点和信息片段，映射XML文档的结构，允许获取和操作文档的任意部分，是W3C的官方标准</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>①允许应用程序对数据和结构做出更改。</p>
<p>②访问是双向的，可以在任何时候在树中上下导航，获取和操作任意部分的数据。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>①通常需要加载整个XML文档来构造层次结构，消耗资源大。</p>
<h3 id="2-SAX-Simple-API-for-XML-解析"><a href="#2-SAX-Simple-API-for-XML-解析" class="headerlink" title="2. SAX(Simple API for XML)解析"></a>2. SAX(Simple API for XML)解析</h3><p>流模型中的”推”模型分析方式。通过事件驱动，每发现一个节点就引发一个事件，事件推给事件处理器，通过回调方法完成解析工作，解析XML文档的逻辑需要应用程序完成</p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>①不需要等待所有数据都被处理，分析就能立即开始。</p>
<p>②只在读取数据时检查数据，不需要保存在内存中。</p>
<p>③可以在某个条件得到满足时停止解析，不必解析整个文档。</p>
<p>④效率和性能较高，能解析大于系统内存的文档。</p>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>①需要应用程序自己负责TAG的处理逻辑（例如维护父/子关系等），文档越复杂程序就越复杂。</p>
<p>②单向导航，无法定位文档层次，很难同时访问同一文档的不同部分数据，不支持XPath。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>简单的说就是对文档进行顺序扫描，当扫描到文档(document)开始与结束、元素(element)开始与结束时通知事件处理函数(回调函数)，进行相应处理，直到文档结束</p>
<h3 id="3-JDOM-Java-based-Document-Object-Model"><a href="#3-JDOM-Java-based-Document-Object-Model" class="headerlink" title="3. JDOM(Java-based Document Object Model)"></a>3. JDOM(Java-based Document Object Model)</h3><p>Java特定的文档对象模型，自身不包含解析器，使用SAX</p>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><p>①使用具体类而不是接口，简化了DOM的API。</p>
<p>②大量使用了Java集合类，方便了Java开发人员。</p>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>①没有较好的灵活性。</p>
<p>②性能较差。</p>
<h3 id="4-DOM4J-Document-Object-Model-for-Java"><a href="#4-DOM4J-Document-Object-Model-for-Java" class="headerlink" title="4. DOM4J(Document Object Model for Java)"></a>4. DOM4J(Document Object Model for Java)</h3><p>简单易用，采用Java集合框架，并完全支持DOM、SAX和JAXP</p>
<h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><p>①大量使用了Java集合类，方便Java开发人员，同时提供一些提高性能的替代方法。</p>
<p>②支持XPath。</p>
<p>③有很好的性能。</p>
<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>①大量使用了接口，API较为复杂。</p>
<h3 id="5-StAX-Streaming-API-for-XML"><a href="#5-StAX-Streaming-API-for-XML" class="headerlink" title="5. StAX(Streaming API for XML)"></a>5. StAX(Streaming API for XML)</h3><p>流模型中的拉模型分析方式，提供基于指针和基于迭代器两种方式的支持,JDK1.6特性</p>
<p>StAX API的实现是使用了Java Web服务开发（JWSDP）1.6，并结合了Sun Java流式XML分析器(SJSXP)-它位于javax.xml.stream包中。XMLStreamReader接口用于分析一个XML文档，而XMLStreamWriter接口用于生成一个XML文档。XMLEventReader负责使用一个对象事件迭代子分析XML事件-这与XMLStreamReader所使用的光标机制形成对照。</p>
<h4 id="和推式解析相比的优点"><a href="#和推式解析相比的优点" class="headerlink" title="和推式解析相比的优点"></a>和推式解析相比的优点</h4><p>①在拉式解析中，事件是由解析应用产生的，因此拉式解析中向客户端提供的是解析规则，而不是解析器。</p>
<p>②同推式解析相比，拉式解析的代码更简单，而且不用那么多库。</p>
<p>③拉式解析客户端能够一次读取多个XML文件。</p>
<p>④拉式解析允许你过滤XML文件和跳过解析事件。</p>
<h3 id="DOM4J的Java-Object2Xml互相转化实例"><a href="#DOM4J的Java-Object2Xml互相转化实例" class="headerlink" title="DOM4J的Java-Object2Xml互相转化实例"></a>DOM4J的Java-Object2Xml互相转化实例</h3><h4 id="Object2Xml"><a href="#Object2Xml" class="headerlink" title="Object2Xml"></a>Object2Xml</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line">     * DMO4J写入XML  </div><div class="line">     * @param obj        泛型对象  </div><div class="line">     * @param entityPropertys 泛型对象的List集合  </div><div class="line">     * @param Encode     XML自定义编码类型(推荐使用GBK)  </div><div class="line">     * @param XMLPathAndName    XML文件的路径及文件名  </div><div class="line">     */  </div><div class="line">    public void writeXmlDocument(T obj, List&lt;T&gt; entityPropertys, <span class="keyword">String</span> Encode,   </div><div class="line">            <span class="keyword">String</span> XMLPathAndName) &#123;   </div><div class="line">        long lasting = <span class="keyword">System</span>.currentTimeMillis();<span class="comment">//效率检测   </span></div><div class="line">  </div><div class="line">        try &#123;   </div><div class="line">            XMLWriter <span class="built_in">writer</span> = <span class="built_in">null</span>;<span class="comment">// 声明写XML的对象    </span></div><div class="line">            OutputFormat <span class="keyword">format</span> = OutputFormat.createPrettyPrint();   </div><div class="line">            <span class="keyword">format</span>.setEncoding(Encode);<span class="comment">// 设置XML文件的编码格式   </span></div><div class="line">  </div><div class="line">            <span class="keyword">String</span> filePath = XMLPathAndName;<span class="comment">//获得文件地址   </span></div><div class="line">            File file = <span class="keyword">new</span> File(filePath);<span class="comment">//获得文件     </span></div><div class="line">  </div><div class="line">            <span class="keyword">if</span> (file.exists()) &#123;   </div><div class="line">                file.<span class="keyword">delete</span>();   </div><div class="line">  </div><div class="line">            &#125;   </div><div class="line">            <span class="comment">// 新建student.xml文件并新增内容   </span></div><div class="line">            Document document = DocumentHelper.createDocument();   </div><div class="line">            <span class="keyword">String</span> rootname = obj.getClass().getSimpleName();<span class="comment">//获得类名   </span></div><div class="line">            Element root = document.addElement(rootname + <span class="string">"s"</span>);<span class="comment">//添加根节点   </span></div><div class="line">            Field[] properties = obj.getClass().getDeclaredFields();<span class="comment">//获得实体类的所有属性   </span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span> (T t : entityPropertys) &#123;                                <span class="comment">//递归实体   </span></div><div class="line">                Element secondRoot = root.addElement(rootname);            <span class="comment">//二级节点   </span></div><div class="line">                </div><div class="line">                <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; properties.length; i++) &#123;                      </div><div class="line">                    <span class="comment">//反射get方法       </span></div><div class="line">                    Method meth = t.getClass().getMethod(                      </div><div class="line">                            <span class="string">"get"</span>  </div><div class="line">                                    + properties[i].<span class="built_in">getName</span>().substring(<span class="number">0</span>, <span class="number">1</span>)   </div><div class="line">                                            .toUpperCase()   </div><div class="line">                                    + properties[i].<span class="built_in">getName</span>().substring(<span class="number">1</span>));   </div><div class="line">                    <span class="comment">//为二级节点添加属性，属性值为对应属性的值   </span></div><div class="line">                    secondRoot.addElement(properties[i].<span class="built_in">getName</span>()).setText(   </div><div class="line">                            meth.invoke(t).toString());   </div><div class="line">  </div><div class="line">                &#125;   </div><div class="line">            &#125;   </div><div class="line">            <span class="comment">//生成XML文件   </span></div><div class="line">            <span class="built_in">writer</span> = <span class="keyword">new</span> XMLWriter(<span class="keyword">new</span> FileWriter(file), <span class="keyword">format</span>);   </div><div class="line">            <span class="built_in">writer</span>.write(document);   </div><div class="line">            <span class="built_in">writer</span>.<span class="built_in">close</span>();   </div><div class="line">            long lasting2 = <span class="keyword">System</span>.currentTimeMillis();   </div><div class="line">            <span class="keyword">System</span>.out.println(<span class="string">"写入XML文件结束,用时"</span>+(lasting2 - lasting)+<span class="string">"ms"</span>);   </div><div class="line">        &#125; catch (Exception e) &#123;   </div><div class="line">            <span class="keyword">System</span>.out.println(<span class="string">"XML文件写入失败"</span>);   </div><div class="line">        &#125;   </div><div class="line">  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="Xml2Object"><a href="#Xml2Object" class="headerlink" title="Xml2Object"></a>Xml2Object</h4><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line"> *   </div><div class="line"> * @param XMLPathAndName XML文件的路径和地址  </div><div class="line"> * @param t     泛型对象  </div><div class="line"> * @return  </div><div class="line"> */  </div><div class="line">       </div><div class="line">  </div><div class="line">    @<span class="type">SuppressWarnings</span>(<span class="string">"unchecked"</span>)   </div><div class="line">    public <span class="type">List</span>&lt;<span class="type">T</span>&gt; readXML(<span class="type">String</span> <span class="type">XMLPathAndName</span>, <span class="type">T</span> t) &#123;   </div><div class="line">        long lasting = <span class="type">System</span>.currentTimeMillis();<span class="comment">//效率检测   </span></div><div class="line">        <span class="type">List</span>&lt;<span class="type">T</span>&gt; list = <span class="function"><span class="keyword">new</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt;();<span class="comment">//创建list集合   </span></span></div><div class="line">        <span class="title">try</span> &#123;   </div><div class="line">            <span class="title">File</span> <span class="title">f</span> = <span class="title">new</span> <span class="title">File</span>(<span class="type">XMLPathAndName</span>);<span class="comment">//读取文件   </span></div><div class="line">            <span class="title">SAXReader</span> <span class="title">reader</span> = <span class="title">new</span> <span class="title">SAXReader</span>();   </div><div class="line">            <span class="title">Document</span> <span class="title">doc</span> = <span class="title">reader</span>.<span class="title">read</span>(f);<span class="comment">//dom4j读取   </span></div><div class="line">            <span class="title">Element</span> <span class="title">root</span> = <span class="title">doc</span>.<span class="title">getRootElement</span>();<span class="comment">//获得根节点   </span></div><div class="line">            <span class="title">Element</span> <span class="title">foo</span>;<span class="comment">//二级节点   </span></div><div class="line">            <span class="title">Field</span>[] <span class="title">properties</span> = <span class="title">t</span>.<span class="title">getClass</span>().<span class="title">getDeclaredFields</span>();<span class="comment">//获得实例的属性   </span></div><div class="line">            <span class="comment">//实例的get方法   </span></div><div class="line">            <span class="title">Method</span> <span class="title">getmeth</span>;   </div><div class="line">            <span class="comment">//实例的set方法   </span></div><div class="line">            <span class="title">Method</span> <span class="title">setmeth</span>;   </div><div class="line">               </div><div class="line">            <span class="title">for</span> (<span class="type">Iterator</span> i = root.elementIterator(t.getClass().<span class="title">getSimpleName</span>()); <span class="title">i</span>.<span class="title">hasNext</span>();) &#123;<span class="comment">//遍历t.getClass().getSimpleName()节点   </span></div><div class="line">                <span class="title">foo</span> = (<span class="type">Element</span>) <span class="title">i</span>.<span class="title">next</span>();<span class="comment">//下一个二级节点   </span></div><div class="line">                   </div><div class="line">               <span class="title">t</span>=(<span class="type">T</span>)<span class="title">t</span>.<span class="title">getClass</span>().<span class="title">newInstance</span>();<span class="comment">//获得对象的新的实例   </span></div><div class="line">  </div><div class="line">               <span class="title">for</span> (int j = <span class="number">0</span>; j &lt; properties.length; j++) &#123;<span class="comment">//遍历所有孙子节点   </span></div><div class="line">                       </div><div class="line">  </div><div class="line">                    <span class="comment">//实例的set方法   </span></div><div class="line">                      <span class="title">setmeth</span> = <span class="title">t</span>.<span class="title">getClass</span>().<span class="title">getMethod</span>(   </div><div class="line">                            "set"  </div><div class="line">                                    + properties[j].getName().<span class="title">substring</span>(<span class="number">0</span>, <span class="number">1</span>)   </div><div class="line">                                            .<span class="title">toUpperCase</span>()   </div><div class="line">                                    + <span class="title">properties</span>[<span class="title">j</span>].<span class="title">getName</span>().<span class="title">substring</span>(<span class="number">1</span>),<span class="title">properties</span>[<span class="title">j</span>].<span class="title">getType</span>());   </div><div class="line">                  <span class="comment">//properties[j].getType()为set方法入口参数的参数类型(Class类型)   </span></div><div class="line">                    <span class="title">setmeth</span>.<span class="title">invoke</span>(t, foo.elementText(properties[j].getName()));<span class="comment">//将对应节点的值存入   </span></div><div class="line">                    </div><div class="line">           </div><div class="line">                &#125;   </div><div class="line">       </div><div class="line">                   </div><div class="line">                <span class="title">list</span>.<span class="title">add</span>(t);   </div><div class="line">            &#125;   </div><div class="line">        &#125; <span class="title">catch</span> (<span class="type">Exception</span> e) &#123;   </div><div class="line">            <span class="title">e</span>.<span class="title">printStackTrace</span>();   </div><div class="line">        &#125;   </div><div class="line">        <span class="title">long</span> <span class="title">lasting2</span> = <span class="title">System</span>.<span class="title">currentTimeMillis</span>();   </div><div class="line">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span>("读取<span class="type">XML</span>文件结束,用时"+(lasting2 - lasting)+"<span class="title">ms</span>");   </div><div class="line">        <span class="title">return</span> <span class="title">list</span>;   </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要对比Java即系xml的五种方式，这五种方式各有利弊，大家可以看情况采用哪一种。&lt;/p&gt;
&lt;h3 id=&quot;1-DOM解析&quot;&gt;&lt;a href=&quot;#1-DOM解析&quot; class=&quot;headerlink&quot; title=&quot;1. DOM解析&quot;&gt;&lt;/a&gt;1. DOM解析&lt;/
    
    </summary>
    
      <category term="Java" scheme="http://978420544.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
      <category term="Xml" scheme="http://978420544.github.io/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>不蒜子小白网页计数器使用教程</title>
    <link href="http://978420544.github.io/2017/05/09/%E4%B8%8D%E8%92%9C%E5%AD%90%E5%B0%8F%E7%99%BD%E7%BD%91%E9%A1%B5%E8%AE%A1%E6%95%B0%E5%99%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://978420544.github.io/2017/05/09/不蒜子小白网页计数器使用教程/</id>
    <published>2017-05-09T05:45:23.000Z</published>
    <updated>2017-05-09T05:54:38.295Z</updated>
    
    <content type="html"><![CDATA[<p>不蒜子是一个极简的网页计数器，因为自己做的静态博客需要用到就把他的js给集成进去，简单说下原理，总访问量和总访客数基于域名一对一对应通过远程的js集成，将数据通过/busuanzi.ibruce.info/busuanzi的访问持久化，即便在次生成文章或者网站，只要链接没有变浏览量还是可以在原有的基础上在次往上加的。</p>
<h4 id="1-脚本安装"><a href="#1-脚本安装" class="headerlink" title="1. 脚本安装"></a>1. 脚本安装</h4><p>在需要的页面引入这个脚本即可：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-总访问量（算法A）"><a href="#2-总访问量（算法A）" class="headerlink" title="2. 总访问量（算法A）"></a>2. 总访问量（算法A）</h4><p>要显示站点总访问量，复制以下代码添加到你需要显示的位置</p>
<p>算法A：pv的方式，单个用户连续点击n篇文章，记录n次访问量</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></div><div class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>美化及其他嵌入的改动，其实只要内层的span就可以，然后用css美化或者做嵌入</p>
<h4 id="3-总访客数（算法B）"><a href="#3-总访客数（算法B）" class="headerlink" title="3. 总访客数（算法B）"></a>3. 总访客数（算法B）</h4><p>要显示站点总访客数，复制以下代码添加到你需要显示的位置</p>
<p>算法B：uv的方式，单个用户连续点击n篇文章，只记录1次访客数</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></div><div class="line">  本站访客数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人次</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>美化及其他嵌入的改动，其实只要内层的span就可以，然后用css美化或者做嵌入</p>
<h4 id="4-页面或者文章访问量"><a href="#4-页面或者文章访问量" class="headerlink" title="4. 页面或者文章访问量"></a>4. 页面或者文章访问量</h4><p>要显示每篇文章的访问量，复制以下代码添加到你需要显示的位置。</p>
<p>算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_page_pv"</span>&gt;</span></div><div class="line">  本文总阅读量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>美化及其他嵌入的改动，其实只要内层的span就可以，然后用css美化或者做嵌入</p>
<h4 id="5-代码中文字是可以修改的，只要保留id正确即可"><a href="#5-代码中文字是可以修改的，只要保留id正确即可" class="headerlink" title="5. 代码中文字是可以修改的，只要保留id正确即可"></a>5. 代码中文字是可以修改的，只要保留id正确即可</h4><h4 id="6-只计数不显示-只安装脚本代码，不安装标签代码"><a href="#6-只计数不显示-只安装脚本代码，不安装标签代码" class="headerlink" title="6. 只计数不显示,只安装脚本代码，不安装标签代码"></a>6. 只计数不显示,只安装脚本代码，不安装标签代码</h4><h4 id="7-注意"><a href="#7-注意" class="headerlink" title="7. 注意"></a>7. 注意</h4><p>暂时的话，像首页这样的会出现好多文章，不蒜子暂时满足不了这样的需求，原因是同样的文章技术器用的id选择器，一个页面只能有一个，多个也只能显示一个；但是不蒜子正在改进，希望可以越来越好。</p>
<h4 id="不蒜子交流群（419260983）"><a href="#不蒜子交流群（419260983）" class="headerlink" title="不蒜子交流群（419260983）"></a><a href="http://busuanzi.ibruce.info/" target="_blank" rel="external">不蒜子交流群（419260983）</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不蒜子是一个极简的网页计数器，因为自己做的静态博客需要用到就把他的js给集成进去，简单说下原理，总访问量和总访客数基于域名一对一对应通过远程的js集成，将数据通过/busuanzi.ibruce.info/busuanzi的访问持久化，即便在次生成文章或者网站，只要链接没有
    
    </summary>
    
      <category term="Hexo" scheme="http://978420544.github.io/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://978420544.github.io/tags/hexo/"/>
    
      <category term="Simpleblock" scheme="http://978420544.github.io/tags/simpleblock/"/>
    
  </entry>
  
  <entry>
    <title>支付平台开发--IOException : DerInputStream.getLength(): lengthTag=127, too big.</title>
    <link href="http://978420544.github.io/2017/05/05/%E6%94%AF%E4%BB%98%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91-IOException-DerInputStream-getLength-lengthTag-127-too-big/"/>
    <id>http://978420544.github.io/2017/05/05/支付平台开发-IOException-DerInputStream-getLength-lengthTag-127-too-big/</id>
    <published>2017-05-05T03:45:03.000Z</published>
    <updated>2017-05-05T03:48:38.313Z</updated>
    
    <content type="html"><![CDATA[<p>支付平台开发：IOException : DerInputStream.getLength(): lengthTag=127, too big.</p>
<p>原因：加密的私钥没有设置</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;支付平台开发：IOException : DerInputStream.getLength(): lengthTag=127, too big.&lt;/p&gt;
&lt;p&gt;原因：加密的私钥没有设置&lt;/p&gt;

    
    </summary>
    
      <category term="Bug笔记" scheme="http://978420544.github.io/categories/bug/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
      <category term="Bug" scheme="http://978420544.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Gradle学习笔记@2</title>
    <link href="http://978420544.github.io/2017/04/27/Gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2/"/>
    <id>http://978420544.github.io/2017/04/27/Gradle学习笔记-2/</id>
    <published>2017-04-27T10:02:16.000Z</published>
    <updated>2017-05-08T08:33:12.319Z</updated>
    
    <content type="html"><![CDATA[<p>Gradle中有两个基本的概念：project和task。每个Gradle的构建由一个project构成，它代表着需要被构建的组件或者构建的整个项目。每个project由一个或者多个task组成。task代表着Gradle构建过程中可执行的最小单元。例如当构建一个组件时，可能需要先编译、打包、然后再生成文档或者发布等，这其中的每个步骤都可以定义成一个task。</p>
<h3 id="1-Task创建及应用"><a href="#1-Task创建及应用" class="headerlink" title="1.Task创建及应用"></a>1.Task创建及应用</h3><h4 id="1-1-HelloWorld创建及源码详解"><a href="#1-1-HelloWorld创建及源码详解" class="headerlink" title="1.1 HelloWorld创建及源码详解"></a>1.1 HelloWorld创建及源码详解</h4><p>task的doLast、doFirst、及&lt;&lt;使用;doLast意思是定义一个行为(映射Gradle中的Action类)，放在当前task的最后，类似的，还有doFirst,表示将定义的行为放在当前task最前面,&lt;&lt;仅仅是doLast的一个别名。</p>
<h5 id="新建build-gradle文件，在文件中添加下方代码："><a href="#新建build-gradle文件，在文件中添加下方代码：" class="headerlink" title="新建build.gradle文件，在文件中添加下方代码："></a>新建build.gradle文件，在文件中添加下方代码：</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> helloWorld &lt;&lt; &#123;</div><div class="line">     <span class="keyword">println</span> <span class="string">"Hello World!"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-hello.png" alt="hello"></center>

<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> helloWorld1 &#123;</div><div class="line">     <span class="keyword">doLast</span>&#123;</div><div class="line">	   <span class="keyword">println</span> <span class="string">"doLast!"</span></div><div class="line">     &#125;</div><div class="line">     <span class="keyword">doFirst</span>&#123;</div><div class="line">	    <span class="keyword">println</span> <span class="string">"doFirst!"</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-hello1.png" alt="hello1"></center>

<h5 id="doLast-doFirst-lt-lt-——Java源码详解"><a href="#doLast-doFirst-lt-lt-——Java源码详解" class="headerlink" title="doLast,doFirst,&lt;&lt;——Java源码详解"></a>doLast,doFirst,&lt;&lt;——Java源码详解</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> AbstractTask <span class="keyword">implements</span> TaskInternal, DynamicObjectAware &#123;</div><div class="line">   <span class="keyword">private</span> List&lt;Action&lt;? <span class="keyword">super</span> <span class="keyword">Task</span>&gt;&gt; actions = <span class="keyword">new</span> ArrayList&lt;Action&lt;?   <span class="keyword">super</span> <span class="keyword">Task</span>&gt;&gt;();</div><div class="line"> </div><div class="line">   <span class="keyword">public</span> <span class="keyword">Task</span> <span class="keyword">doFirst</span>(Action&lt;? <span class="keyword">super</span> <span class="keyword">Task</span>&gt; action) &#123;</div><div class="line">         <span class="keyword">if</span> (action == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidUserDataException(<span class="string">"Action must not be null!"</span>);</div><div class="line">        &#125;</div><div class="line">        actions.add(<span class="number">0</span>, wrap(action));</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">     &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">Task</span> <span class="keyword">doLast</span>(Action&lt;? <span class="keyword">super</span> <span class="keyword">Task</span>&gt; action) &#123;</div><div class="line">         <span class="keyword">if</span> (action == <span class="keyword">null</span>) &#123;</div><div class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> InvalidUserDataException(<span class="string">"Action must not be null!"</span>);</div><div class="line">         &#125;</div><div class="line">         actions.add(wrap(action));</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>Task类里面实际执行部分都会转化成Action，支持动态DSL语言，动态添加到对应的集合中，最后执行该任务的所有Action。</p>
<h4 id="1-2-Task实现简单Java实例"><a href="#1-2-Task实现简单Java实例" class="headerlink" title="1.2 Task实现简单Java实例"></a>1.2 Task实现简单Java实例</h4><h5 id="英文字符串转成大写英文字符串"><a href="#英文字符串转成大写英文字符串" class="headerlink" title="英文字符串转成大写英文字符串"></a>英文字符串转成大写英文字符串</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> upper&#123;</div><div class="line">     <span class="keyword">doLast</span>&#123;</div><div class="line">        String inits=<span class="string">"mjy hello World"</span>;</div><div class="line">        <span class="keyword">println</span> <span class="string">"origin:"</span>+inits</div><div class="line">        <span class="keyword">println</span> <span class="string">"upperCase:"</span>+inits.toUpperCase()</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-upper.png" alt="upper"></center>

<h5 id="数字循环输出"><a href="#数字循环输出" class="headerlink" title="数字循环输出"></a>数字循环输出</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> <span class="keyword">count</span>&#123;</div><div class="line">     <span class="keyword">doLast</span>&#123;</div><div class="line">        <span class="number">4</span>.<span class="keyword">times</span> &#123; <span class="keyword">print</span> <span class="string">"$it "</span>&#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-count.png" alt="count"></center>


<h4 id="1-3-Task-dependencies"><a href="#1-3-Task-dependencies" class="headerlink" title="1.3 Task dependencies"></a>1.3 Task dependencies</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> helloWorld &lt;&lt; &#123;</div><div class="line">     <span class="keyword">println</span> <span class="string">"Hello World!"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">task</span> child(dependsOn: helloWorld)&#123;</div><div class="line">    <span class="keyword">doLast</span>&#123;</div><div class="line">	<span class="keyword">println</span> <span class="string">"I'm HelloWorld of child!"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-child.png" alt="child"></center>


<h5 id="dependsOn用来声明要依赖的对象，但是依赖的对象并不一定存在"><a href="#dependsOn用来声明要依赖的对象，但是依赖的对象并不一定存在" class="headerlink" title="dependsOn用来声明要依赖的对象，但是依赖的对象并不一定存在"></a>dependsOn用来声明要依赖的对象，但是依赖的对象并不一定存在</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> nochild(dependsOn: <span class="string">'nomjy'</span>)&#123;</div><div class="line">    <span class="keyword">doLast</span>&#123;</div><div class="line">	  <span class="keyword">println</span> <span class="string">"I'm nomjy of nochild!"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">task</span> nomjy&#123;</div><div class="line">     <span class="keyword">doLast</span>&#123;</div><div class="line">	  <span class="keyword">println</span> <span class="string">"I'm nomjy!"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-nochild.png" alt="nochild"></center>


<h4 id="1-4-动态创建任务"><a href="#1-4-动态创建任务" class="headerlink" title="1.4 动态创建任务"></a>1.4 动态创建任务</h4><h5 id="动态创建任务的两种方式"><a href="#动态创建任务的两种方式" class="headerlink" title="动态创建任务的两种方式"></a>动态创建任务的两种方式</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span>.<span class="keyword">times</span> &#123; counter -&gt;</div><div class="line">    <span class="keyword">task</span> <span class="string">"task$counter"</span> &#123;</div><div class="line">        <span class="keyword">doLast</span> &#123;</div><div class="line">            <span class="keyword">println</span> <span class="string">"task $name"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">(<span class="number">5</span>..<span class="number">6</span>).<span class="keyword">each</span> &#123;</div><div class="line">    <span class="keyword">task</span> <span class="string">"task$it"</span> &lt;&lt; &#123;</div><div class="line">        <span class="keyword">println</span> <span class="string">"task $name"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-dynamic.png" alt="dynamic"></center>


<h5 id="动态创建任务间的依赖关系"><a href="#动态创建任务间的依赖关系" class="headerlink" title="动态创建任务间的依赖关系"></a>动态创建任务间的依赖关系</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span>.<span class="keyword">times</span> &#123; counter -&gt;</div><div class="line">    <span class="keyword">task</span> <span class="string">"task$counter"</span> &#123;</div><div class="line">        <span class="keyword">doLast</span> &#123;</div><div class="line">            <span class="keyword">println</span> <span class="string">"task $name"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">task0.dependsOn task2, task3</div><div class="line">(<span class="number">5</span>..<span class="number">6</span>).<span class="keyword">each</span> &#123;</div><div class="line">    <span class="keyword">task</span> <span class="string">"task$it"</span> &lt;&lt; &#123;</div><div class="line">        <span class="keyword">println</span> <span class="string">"task $name"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/images/gradle-multi.png" alt="multi"></center>


<h4 id="1-5-定义默认任务"><a href="#1-5-定义默认任务" class="headerlink" title="1.5 定义默认任务"></a>1.5 定义默认任务</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">defaultTasks <span class="string">'clean'</span>, <span class="string">'run'</span></div><div class="line"></div><div class="line"><span class="keyword">task</span> clean &#123;</div><div class="line">    <span class="keyword">doLast</span> &#123;</div><div class="line">        <span class="keyword">println</span> <span class="string">'Default Cleaning!'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">task</span> run &#123;</div><div class="line">    <span class="keyword">doLast</span> &#123;</div><div class="line">        <span class="keyword">println</span> <span class="string">'Default Running!'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">task</span> other &#123;</div><div class="line">    <span class="keyword">doLast</span> &#123;</div><div class="line">        <span class="keyword">println</span> <span class="string">"I'm not a default task!"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Gradle构建基础（Build-Script-Basics）"><a href="#Gradle构建基础（Build-Script-Basics）" class="headerlink" title="Gradle构建基础（Build Script Basics）"></a>Gradle构建基础（<a href="https://docs.gradle.org/3.5/userguide/tutorial_using_tasks.html" target="_blank" rel="external">Build Script Basics</a>）</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gradle中有两个基本的概念：project和task。每个Gradle的构建由一个project构成，它代表着需要被构建的组件或者构建的整个项目。每个project由一个或者多个task组成。task代表着Gradle构建过程中可执行的最小单元。例如当构建一个组件时，可
    
    </summary>
    
      <category term="Gradle" scheme="http://978420544.github.io/categories/gradle/"/>
    
    
      <category term="Gradle" scheme="http://978420544.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle学习笔记@1</title>
    <link href="http://978420544.github.io/2017/04/27/Gradle%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://978420544.github.io/2017/04/27/Gradle学习笔记-1/</id>
    <published>2017-04-27T07:21:33.000Z</published>
    <updated>2017-04-27T07:26:14.605Z</updated>
    
    <content type="html"><![CDATA[<p>Gradle是一个基于JVM的构建工具，是一款通用灵活的构建工具，支持maven， Ivy仓库，支持传递性依赖管理，而不需要远程仓库或者是pom.xml和ivy.xml配置文件，基于Groovy，build脚本使用Groovy编写。</p>
<p>和Maven一样，Gradle只是提供了构建项目的一个框架，真正起作用的是Plugin。Gradle在默认情况下为我们提供了许多常用的Plugin，其中包括有构建Java项目的Plugin，还有War，Ear等。与Maven不同的是，Gradle不提供内建的项目生命周期管理，只是java Plugin向Project中添加了许多Task，这些Task依次执行，为我们营造了一种如同Maven般项目构建周期。</p>
<h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h3><h4 id="Gradle下载地址"><a href="#Gradle下载地址" class="headerlink" title="Gradle下载地址"></a><a href="https://gradle.org/releases" target="_blank" rel="external">Gradle下载地址</a></h4><center><img src="/images/gradle-download.png" alt="Complete图文"></center>

<h4 id="解压gradle-3-5-all-zip"><a href="#解压gradle-3-5-all-zip" class="headerlink" title="解压gradle-3.5-all.zip"></a>解压gradle-3.5-all.zip</h4><center><img src="/images/gradle-zip.png" alt="zip"></center>

<center><img src="/images/gradle-dir.png" alt="dir"></center>

<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><h5 id="添加GRADLE-HOME环境变量"><a href="#添加GRADLE-HOME环境变量" class="headerlink" title="添加GRADLE_HOME环境变量"></a>添加GRADLE_HOME环境变量</h5><center><img src="/images/gradle-home.png" alt="home"></center>

<h5 id="环境变量Path追加-GRADLE-HOME-bin"><a href="#环境变量Path追加-GRADLE-HOME-bin" class="headerlink" title="环境变量Path追加%GRADLE_HOME%\bin;"></a>环境变量Path追加%GRADLE_HOME%\bin;</h5><center><img src="/images/gradle-path.png" alt="path"></center>

<h3 id="2-简单测试"><a href="#2-简单测试" class="headerlink" title="2.简单测试"></a>2.简单测试</h3><h4 id="vesion查看"><a href="#vesion查看" class="headerlink" title="vesion查看"></a>vesion查看</h4><center><img src="/images/gradle-version.png" alt="version"></center>

<h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h4><h5 id="新建build-gradle文件，在文件中添加下方代码："><a href="#新建build-gradle文件，在文件中添加下方代码：" class="headerlink" title="新建build.gradle文件，在文件中添加下方代码："></a>新建build.gradle文件，在文件中添加下方代码：</h5><p>task helloWorld &lt;&lt; {<br>     println “Hello World!”<br>}</p>
<center><img src="/images/gradle-hello.png" alt="hello"></center>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gradle是一个基于JVM的构建工具，是一款通用灵活的构建工具，支持maven， Ivy仓库，支持传递性依赖管理，而不需要远程仓库或者是pom.xml和ivy.xml配置文件，基于Groovy，build脚本使用Groovy编写。&lt;/p&gt;
&lt;p&gt;和Maven一样，Grad
    
    </summary>
    
      <category term="Gradle" scheme="http://978420544.github.io/categories/gradle/"/>
    
    
      <category term="Gradle" scheme="http://978420544.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码解读（2）</title>
    <link href="http://978420544.github.io/2017/04/25/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%EF%BC%882%EF%BC%89/"/>
    <id>http://978420544.github.io/2017/04/25/Spring源码解读（2）/</id>
    <published>2017-04-25T03:43:15.000Z</published>
    <updated>2017-04-25T03:43:15.842Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring源码解读（1）</title>
    <link href="http://978420544.github.io/2017/04/24/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%EF%BC%881%EF%BC%89/"/>
    <id>http://978420544.github.io/2017/04/24/Spring源码解读（1）/</id>
    <published>2017-04-24T01:56:56.000Z</published>
    <updated>2017-04-24T01:56:56.797Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo源文件的远程托管解决方案</title>
    <link href="http://978420544.github.io/2017/04/13/hexo%E6%BA%90%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%89%98%E7%AE%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://978420544.github.io/2017/04/13/hexo源文件的远程托管解决方案/</id>
    <published>2017-04-13T08:08:11.000Z</published>
    <updated>2017-04-17T09:57:47.299Z</updated>
    
    <content type="html"><![CDATA[<p>最近，使用hexo的simpleblock主题时遇到一个问题，然后就去研究了一下。关于hexo博客Markdown文件的上传同时也可以上传相关的配置文件，用做源文件链接或者在其他的电脑上编辑博客。</p>
<p>解决方案：在git上面新建一个分支，在这个分支把所有的源文件和配置的文件上传，但是不能上传一些安装的目录和文件，然后在其他地方Clone下来，安装hexo使用，但是不能hexo init，init会把所有的文件初始化。</p>
<p>gitignore忽略文件：<br>.DS_Store<br>Thumbs.db<br>db.json<br>*.log<br>node_modules/</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，使用hexo的simpleblock主题时遇到一个问题，然后就去研究了一下。关于hexo博客Markdown文件的上传同时也可以上传相关的配置文件，用做源文件链接或者在其他的电脑上编辑博客。&lt;/p&gt;
&lt;p&gt;解决方案：在git上面新建一个分支，在这个分支把所有的源文件和
    
    </summary>
    
      <category term="Hexo" scheme="http://978420544.github.io/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://978420544.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于Spring定时任务的整理</title>
    <link href="http://978420544.github.io/2017/04/13/%E5%85%B3%E4%BA%8ESpring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%95%B4%E7%90%86/"/>
    <id>http://978420544.github.io/2017/04/13/关于Spring定时任务的整理/</id>
    <published>2017-04-13T02:54:48.000Z</published>
    <updated>2017-04-24T01:40:43.843Z</updated>
    
    <content type="html"><![CDATA[<p>最近，在做多个第三方支付平台的接入时，发现许多平台的支付交易状态需要异步的去获取，这就需要一个定时任务去做这些交易状态查询接口的调用，然后碰到一系列定时任务的使用问题，因此就对这些定时任务做一些整理和总结。</p>
<h4 id="当前定时任务的三种产品"><a href="#当前定时任务的三种产品" class="headerlink" title="当前定时任务的三种产品"></a>当前定时任务的三种产品</h4><ul>
<li>Java自带的java.util.Timer类，这个类允许你调度一个java.util.TimerTask任务。使用这种方式可以让你的程序按照某一个频度执行，但不能在指定时间运行。一般用的较少，这篇文章将不做详细介绍。</li>
<li><a href="http://www.quartz-scheduler.org/" target="_blank" rel="external">Quartz</a>是一个完全由Java编写的开源作业调度框架，为在Java应用程序中进行作业调度提供了简单却强大的机制。Quartz允许开发人员根据时间间隔来调度作业。它实现了作业和触发器的多对多的关系，还能把多个作业与不同的触发器关联。</li>
<li>Spring3.0以后自带的task，可以将它看成一个轻量级的Quartz，而且使用起来比Quartz简单许多。</li>
</ul>
<h4 id="从作业类的继承方式来讲，可以分为两类："><a href="#从作业类的继承方式来讲，可以分为两类：" class="headerlink" title="从作业类的继承方式来讲，可以分为两类："></a>从作业类的继承方式来讲，可以分为两类：</h4><ul>
<li>作业类需要继承自特定的作业类基类，如Quartz中需要继承自org.springframework.scheduling.quartz.QuartzJobBean；java.util.Timer中需要继承自java.util.TimerTask。</li>
<li>作业类即普通的java类，不需要继承自任何基类</li>
</ul>
<h4 id="从任务调度的触发时机来分，这里主要是针对作业使用的触发器，主要有以下两种："><a href="#从任务调度的触发时机来分，这里主要是针对作业使用的触发器，主要有以下两种：" class="headerlink" title="从任务调度的触发时机来分，这里主要是针对作业使用的触发器，主要有以下两种："></a>从任务调度的触发时机来分，这里主要是针对作业使用的触发器，主要有以下两种：</h4><ul>
<li>每隔指定时间则触发一次，在Quartz中对应的触发器为：org.springframework.scheduling.quartz.SimpleTriggerBean</li>
<li>每到指定时间则触发一次，在Quartz中对应的调度器为：org.springframework.scheduling.quartz.CronTriggerBean</li>
</ul>
<h5 id="注：并非每种任务都可以使用这两种触发器，如java-util-TimerTask任务就只能使用第一种。Quartz和spring-task都可以支持这两种触发条件。"><a href="#注：并非每种任务都可以使用这两种触发器，如java-util-TimerTask任务就只能使用第一种。Quartz和spring-task都可以支持这两种触发条件。" class="headerlink" title="注：并非每种任务都可以使用这两种触发器，如java.util.TimerTask任务就只能使用第一种。Quartz和spring task都可以支持这两种触发条件。"></a>注：并非每种任务都可以使用这两种触发器，如java.util.TimerTask任务就只能使用第一种。Quartz和spring task都可以支持这两种触发条件。</h5><hr>
<h2 id="Quartz和SpringTask"><a href="#Quartz和SpringTask" class="headerlink" title="Quartz和SpringTask"></a>Quartz和SpringTask</h2><ul>
<li>Quartz的继承方式和非继承方式，SimpleTriggerBean触发器和CronTriggerBean触发器。</li>
<li>SpringTask的@Scheduled注解方式（cron,fixedRate,fixedDelay）。</li>
</ul>
<h3 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h3><h4 id="作业类继承自特定的基类-org-springframework-scheduling-quartz-QuartzJobBean"><a href="#作业类继承自特定的基类-org-springframework-scheduling-quartz-QuartzJobBean" class="headerlink" title="作业类继承自特定的基类:org.springframework.scheduling.quartz.QuartzJobBean"></a>作业类继承自特定的基类:org.springframework.scheduling.quartz.QuartzJobBean</h4><h5 id="作业类的继承（一）"><a href="#作业类的继承（一）" class="headerlink" title="作业类的继承（一）"></a>作业类的继承（一）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;  </div><div class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;  </div><div class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Job1</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;  </div><div class="line">  </div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> timeout;  </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;  </div><div class="line"><span class="comment">//调度工厂实例化后，经过timeout时间开始执行调度  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeout</span><span class="params">(<span class="keyword">int</span> timeout)</span> </span>&#123;  </div><div class="line"><span class="keyword">this</span>.timeout = timeout;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">/** </span></div><div class="line">* 要调度的具体任务 </div><div class="line">*/  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span>  </span></div><div class="line"><span class="keyword">throws</span> JobExecutionException &#123;  </div><div class="line">  System.out.println(<span class="string">"定时任务执行中…"</span>);  </div><div class="line">&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="配置作业类JobDetailBean（二）"><a href="#配置作业类JobDetailBean（二）" class="headerlink" title="配置作业类JobDetailBean（二）"></a>配置作业类JobDetailBean（二）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;bean name=<span class="string">"job1"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.JobDetailBean"</span>&gt;  </div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobClass"</span> <span class="attr">value</span>=<span class="string">"com.gy.Job1"</span> /&gt;</span>  </span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDataAsMap"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="配置触发器（三）"><a href="#配置触发器（三）" class="headerlink" title="配置触发器（三）"></a>配置触发器（三）</h5><ul>
<li>SimpleTriggerBean</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleTrigger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SimpleTriggerBean"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"job1"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"startDelay"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span><span class="comment">&lt;!-- 调度工厂实例化后，经过0秒开始执行调度 --&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"repeatInterval"</span> <span class="attr">value</span>=<span class="string">"2000"</span> /&gt;</span><span class="comment">&lt;!-- 每2秒调度一次 --&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>CronTriggerBean</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"cronTrigger"</span> <span class="built_in">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerBean"</span>&gt;  </div><div class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"jobDetail"</span> <span class="keyword">ref</span>=<span class="string">"job1"</span> /&gt;  </div><div class="line">&lt;!—每天<span class="number">12</span>:<span class="number">00</span>运行一次 <span class="comment">--&gt;  </span></div><div class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"cronExpression"</span> value=<span class="string">"0 0 12 * * ?"</span> /&gt;  </div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<h5 id="配置调度工厂（四）"><a href="#配置调度工厂（四）" class="headerlink" title="配置调度工厂（四）"></a>配置调度工厂（四）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;  </div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span>  </span></div><div class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"cronTrigger"</span> /&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="无需继承的作业类"><a href="#无需继承的作业类" class="headerlink" title="无需继承的作业类"></a>无需继承的作业类</h4><h5 id="作业类（一）"><a href="#作业类（一）" class="headerlink" title="作业类（一）"></a>作业类（一）</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TradeStatusQueryTask</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tradeQuery</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"交易状态查询进程"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="作业类的配置（二）"><a href="#作业类的配置（二）" class="headerlink" title="作业类的配置（二）"></a>作业类的配置（二）</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"tradeStatusScheduling"</span> <span class="built_in">class</span>=<span class="string">"com.mjy.task.TradeStatusQueryTask"</span> /&gt; </div><div class="line"> &lt;bean <span class="built_in">id</span>=<span class="string">"myJobDetail"</span></div><div class="line">    <span class="built_in">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</div><div class="line">  &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"targetObject"</span>&gt;</div><div class="line">   &lt;<span class="keyword">ref</span> bean=<span class="string">"tradeStatusQueryTask"</span> /&gt;</div><div class="line">  &lt;/<span class="keyword">property</span>&gt;</div><div class="line">  &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"targetMethod"</span>&gt;</div><div class="line">   &lt;value&gt;ExecCheckStatusTask&lt;/value&gt;</div><div class="line">  &lt;/<span class="keyword">property</span>&gt;</div><div class="line"> &lt;/bean&gt;</div></pre></td></tr></table></figure>
<ul>
<li>注册Bean：MethodInvokingJobDetailFactoryBean，有两个关键属性：targetObject指定任务类，targetMethod指定运行的方法。</li>
</ul>
<h5 id="作业类的配置（三）"><a href="#作业类的配置（三）" class="headerlink" title="作业类的配置（三）"></a>作业类的配置（三）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"myJobTrigger"</span></div><div class="line">   <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</div><div class="line"> <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myJobDetail"</span> /&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>0 0/2 * * * ?<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>ref参数指定的就是之前配置的作业类的MethodInvokingJobDetailFactoryBean——beanName</li>
<li>Quartz的作业触发器有两种，分别是<br>org.springframework.scheduling.quartz.SimpleTriggerBean<br>org.springframework.scheduling.quartz.CronTriggerBean，两种触发器都可以使用，这里用的是CronTriggerBean。<h5 id="调度工厂的配置（四）"><a href="#调度工厂的配置（四）" class="headerlink" title="调度工厂的配置（四）"></a>调度工厂的配置（四）</h5></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;bean name=<span class="string">"startQuertz"</span></div><div class="line">   <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</div><div class="line"> <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"myJobTrigger"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>ref参数指定的就是之前配置的触发器的beanName</li>
</ul>
<h5 id="启动Spring的容器（五）"><a href="#启动Spring的容器（五）" class="headerlink" title="启动Spring的容器（五）"></a>启动Spring的容器（五）</h5><h3 id="SpringTask"><a href="#SpringTask" class="headerlink" title="SpringTask"></a>SpringTask</h3><ul>
<li>xml配置方式</li>
<li>注解配置方式</li>
<li>命名空间的添加<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">xmlns:</span>task=<span class="string">"http://www.springframework.org/schema/task"</span>   </div><div class="line"><span class="symbol">xsi:</span>schemaLocation=<span class="string">"http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="xml配置方式"><a href="#xml配置方式" class="headerlink" title="xml配置方式"></a>xml配置方式</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">task</span>:scheduled-tasks&gt;   </div><div class="line">&lt;<span class="keyword">task</span>:scheduled <span class="keyword">ref</span>=<span class="string">"taskJob"</span> method=<span class="string">"job1"</span> cron=<span class="string">"0 * * * * ?"</span>/&gt;   </div><div class="line">&lt;/<span class="keyword">task</span>:scheduled-tasks&gt;</div><div class="line">&lt;<span class="keyword">context</span>:component-scan base-<span class="keyword">package</span>=<span class="string">" com.gy.mytask "</span> /&gt;</div></pre></td></tr></table></figure>
<ul>
<li>ref参数指定的即作业类，method指定的即需要运行的方法，cron及cronExpression表达式.</li>
</ul>
<h4 id="注解配置方式"><a href="#注解配置方式" class="headerlink" title="注解配置方式"></a>注解配置方式</h4><h5 id="配置注解扫描"><a href="#配置注解扫描" class="headerlink" title="配置注解扫描"></a>配置注解扫描</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="string">context:</span>component-scan base-<span class="keyword">package</span>=<span class="string">" com.mjy.task "</span> /&gt;</div><div class="line">&lt;!—开启这个配置，spring才能识别<span class="meta">@Scheduled</span>注解   --&gt;  </div><div class="line">    &lt;<span class="string">task:</span>annotation-driven scheduler=<span class="string">"qbScheduler"</span> mode=<span class="string">"proxy"</span>/&gt;  </div><div class="line">    &lt;<span class="string">task:</span>scheduler id=<span class="string">"qbScheduler"</span> pool-size=<span class="string">"10"</span>/&gt;</div></pre></td></tr></table></figure>
<h5 id="注解的方式（Scheduled）"><a href="#注解的方式（Scheduled）" class="headerlink" title="注解的方式（Scheduled）"></a>注解的方式（Scheduled）</h5><ul>
<li>cron：cron表达式</li>
<li>fixedDelay：表示从上一个任务完成到下一个任务开始的间隔, 单位是毫秒</li>
<li>fixed-rate：表示从上一个任务开始到下一个任务开始的间隔, 单位是毫秒（如果某次任务开始时上次任务还没有结束，那么在上次任务执行完成时，当前任务会立即执行）</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Target</span>(&#123;java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.ANNOTATION_TYPE&#125;) </div><div class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME) </div><div class="line"><span class="variable">@Documented</span> </div><div class="line">public <span class="variable">@interface</span> Scheduled </div><div class="line">&#123; </div><div class="line">  <span class="selector-tag">public</span> <span class="selector-tag">abstract</span> <span class="selector-tag">String</span> <span class="selector-tag">cron</span>(); </div><div class="line">   </div><div class="line">  <span class="selector-tag">public</span> <span class="selector-tag">abstract</span> <span class="selector-tag">long</span> <span class="selector-tag">fixedDelay</span>(); </div><div class="line">   </div><div class="line">  <span class="selector-tag">public</span> <span class="selector-tag">abstract</span> <span class="selector-tag">long</span> <span class="selector-tag">fixedRate</span>(); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="Cron表达式"></a>Cron表达式</h3><h4 id="Cron表达式的格式：秒-分-时-日-月-周-年-可选"><a href="#Cron表达式的格式：秒-分-时-日-月-周-年-可选" class="headerlink" title="Cron表达式的格式：秒 分 时 日 月 周 年(可选)"></a>Cron表达式的格式：秒 分 时 日 月 周 年(可选)</h4><table>
<thead>
<tr>
<th>字段名</th>
<th>允许的值</th>
<th>允许的特殊字符</th>
</tr>
</thead>
<tbody>
<tr>
<td>秒</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>分</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时</td>
<td>0-23</td>
<td>, - * /  </td>
</tr>
<tr>
<td>日</td>
<td>1-31</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>月</td>
<td>1-12 or JAN-DEC</td>
<td>, - * /  </td>
</tr>
<tr>
<td>周几</td>
<td>1-7 or SUN-SAT</td>
<td>, - * ? / L C #</td>
</tr>
<tr>
<td>年 (可选字段)</td>
<td>empty, 1970-2099</td>
<td>, - * /</td>
</tr>
</tbody>
</table>
<h4 id="Cron表达式符号解释"><a href="#Cron表达式符号解释" class="headerlink" title="Cron表达式符号解释"></a>Cron表达式符号解释</h4><ul>
<li>“?”字符：表示不确定的值</li>
<li>“,”字符：指定数个值</li>
<li>“-”字符：指定一个值的范围</li>
<li>“/”字符：指定一个值的增加幅度。n/m表示从n开始，每次增加m</li>
<li>“L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X</li>
<li>“W”字符：指定离给定日期最近的工作日(周一到周五)</li>
<li>“#”字符：表示该月第几个周X。6#3表示该月第3个周五</li>
</ul>
<h4 id="Cron表达式范例"><a href="#Cron表达式范例" class="headerlink" title="Cron表达式范例"></a>Cron表达式范例</h4><ul>
<li>每隔5秒执行一次：<em>/5 </em> <em> </em> * ?</li>
<li>每隔1分钟执行一次：0 <em>/1 </em> <em> </em> ?</li>
<li>每天23点执行一次：0 0 23 <em> </em> ?</li>
<li>每天凌晨1点执行一次：0 0 1 <em> </em> ?</li>
<li>每月1号凌晨1点执行一次：0 0 1 1 * ?</li>
<li>每月最后一天23点执行一次：0 0 23 L * ?</li>
<li>每周星期天凌晨1点实行一次：0 0 1 ? * L</li>
<li>在26分、29分、33分执行一次：0 26,29,33 <em> </em> * ?</li>
<li>每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 <em> </em> ?</li>
<li>“0 0 12 <em> </em> ?” 每天中午12点触发</li>
<li>“0 15 10 ? <em> </em>“ 每天上午10:15触发</li>
<li>“0 15 10 <em> </em> ?” 每天上午10:15触发</li>
<li>“0 15 10 <em> </em> ? *” 每天上午10:15触发</li>
<li>“0 15 10 <em> </em> ? 2005” 2005年的每天上午10:15触发</li>
<li>“0 <em> 14 </em> * ?” 在每天下午2点到下午2:59期间的每1分钟触发</li>
<li>“0 0/5 14 <em> </em> ?” 在每天下午2点到下午2:55期间的每5分钟触发</li>
<li>“0 0/5 14,18 <em> </em> ?” 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</li>
<li>“0 0-5 14 <em> </em> ?” 在每天下午2点到下午2:05期间的每1分钟触发</li>
<li>“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发</li>
<li>“0 15 10 ? * MON-FRI” 周一至周五的上午10:15触发</li>
<li>“0 15 10 15 * ?” 每月15日上午10:15触发</li>
<li>“0 15 10 L * ?” 每月最后一日的上午10:15触发</li>
<li>“0 15 10 ? * 6L” 每月的最后一个星期五上午10:15触发</li>
<li>“0 15 10 ? * 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发</li>
<li>“0 15 10 ? * 6#3” 每月的第三个星期五上午10:15触发</li>
<li>0 6 <em> </em> * 每天早上6点</li>
<li>0 <em>/2 </em> <em> </em> 每两个小时</li>
<li>0 23-7/2，8 <em> </em> * 晚上11点到早上8点之间每两个小时，早上八点</li>
<li>0 11 4 * 1-3 每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点</li>
<li>0 4 1 1 * 1月1日早上4点</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，在做多个第三方支付平台的接入时，发现许多平台的支付交易状态需要异步的去获取，这就需要一个定时任务去做这些交易状态查询接口的调用，然后碰到一系列定时任务的使用问题，因此就对这些定时任务做一些整理和总结。&lt;/p&gt;
&lt;h4 id=&quot;当前定时任务的三种产品&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Spring" scheme="http://978420544.github.io/categories/spring/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
      <category term="Spring" scheme="http://978420544.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Map浅复制及深复制思考</title>
    <link href="http://978420544.github.io/2017/04/07/Map%E6%B5%85%E5%A4%8D%E5%88%B6%E5%8F%8A%E6%B7%B1%E5%A4%8D%E5%88%B6%E6%80%9D%E8%80%83/"/>
    <id>http://978420544.github.io/2017/04/07/Map浅复制及深复制思考/</id>
    <published>2017-04-07T03:50:00.000Z</published>
    <updated>2017-04-28T06:51:51.991Z</updated>
    
    <content type="html"><![CDATA[<p>文章主要介绍关于深复制和浅复制的原理和不同，然后引出Map浅复制和深复制的用法。</p>
<h4 id="浅复制与深复制概念"><a href="#浅复制与深复制概念" class="headerlink" title="浅复制与深复制概念"></a>浅复制与深复制概念</h4><ul>
<li>浅复制： 浅层复制仅仅复制所考虑的对象，而不复制它所引用的对象。</li>
<li>深复制：深层复制要复制的对象引用的对象都复制一遍。</li>
</ul>
<h4 id="通用点"><a href="#通用点" class="headerlink" title="通用点"></a>通用点</h4><p>实现Cloneable接口，实现clone方法</p>
<h4 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span></span>&#123;</div><div class="line">    Object o = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        o = <span class="keyword">super</span>.clone();</div><div class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h4><h5 id="实现接口Cloneable-Serializable"><a href="#实现接口Cloneable-Serializable" class="headerlink" title="实现接口Cloneable,Serializable"></a>实现接口Cloneable,Serializable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">    ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</div><div class="line">    oos.writeObject(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">//从流里读出来</span></div><div class="line">    ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</div><div class="line">    ObjectInputStream oi=<span class="keyword">new</span> ObjectInputStream(bais);</div><div class="line">    <span class="keyword">return</span>(oi.readObject());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="浅复制与深复制区别"><a href="#浅复制与深复制区别" class="headerlink" title="浅复制与深复制区别"></a>浅复制与深复制区别</h4><p>浅复制不能复制对象包含的引用对象，深复制则是所有的对象都会进行复制</p>
<h4 id="Map的引用"><a href="#Map的引用" class="headerlink" title="Map的引用"></a>Map的引用</h4><p>Map的引用改变其中一个将改变另一个Map的内容<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map map=<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">Map map2=map;</div><div class="line">map2.put(<span class="string">"name"</span>,<span class="string">"mjy"</span>);</div></pre></td></tr></table></figure></p>
<h4 id="Map的浅复制"><a href="#Map的浅复制" class="headerlink" title="Map的浅复制"></a>Map的浅复制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Map map=<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">Map map2=<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">map2.putAll(map);</div><div class="line">map2.put(<span class="string">"name"</span>,<span class="string">"mjy"</span>);</div></pre></td></tr></table></figure>
<h4 id="Map的深复制"><a href="#Map的深复制" class="headerlink" title="Map的深复制"></a>Map的深复制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Serializable&gt; <span class="function">T <span class="title">clone</span><span class="params">(T obj)</span></span>&#123;</div><div class="line">    T clonedObj = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">    ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</div><div class="line">    oos.writeObject(obj);</div><div class="line">    oos.close();</div><div class="line">    </div><div class="line">    ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</div><div class="line">    ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</div><div class="line">    clonedObj = (T) ois.readObject();</div><div class="line">    ois.close();</div><div class="line">    </div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章主要介绍关于深复制和浅复制的原理和不同，然后引出Map浅复制和深复制的用法。&lt;/p&gt;
&lt;h4 id=&quot;浅复制与深复制概念&quot;&gt;&lt;a href=&quot;#浅复制与深复制概念&quot; class=&quot;headerlink&quot; title=&quot;浅复制与深复制概念&quot;&gt;&lt;/a&gt;浅复制与深复制概念&lt;/
    
    </summary>
    
      <category term="Java" scheme="http://978420544.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java有继承关系的初始化顺序</title>
    <link href="http://978420544.github.io/2017/04/06/java%E6%9C%89%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <id>http://978420544.github.io/2017/04/06/java有继承关系的初始化顺序/</id>
    <published>2017-04-06T10:41:36.000Z</published>
    <updated>2017-04-24T01:40:33.108Z</updated>
    
    <content type="html"><![CDATA[<p>由于Java 中的一切东西都是对象，所以许多活动 变得更加简单，这个问题便是其中的一例。正如下一章会讲到的那样，每个对象的代码都存在于独立的文件中。除非真的需要代码，否则那个文件是不会载入的。通常，我们可认为除非那个类的一个对象构造完毕，否则代码不会真的载入。由于static 方法存在一些细微的歧义，所以也能认为“类代码在首次使用的时候载入”。首次使用的地方也是static初始化发生的地方。装载的时候，所有static对象和static代码块都会按照本来的顺序初始化（亦即它们在类定义代码里写入的顺序）。当然，static 数据只会初始化一次。</p>
<h4 id="—《Thinking-in-Java-4》"><a href="#—《Thinking-in-Java-4》" class="headerlink" title="—《Thinking in Java 4》"></a>—《Thinking in Java 4》</h4><p>简要的说就是，在类有继承关系时，类加载器上溯造型，进行相关类的加载工作。</p>
<h4 id="初始化循序"><a href="#初始化循序" class="headerlink" title="初始化循序"></a>初始化循序</h4><p>含有继承的类的初始化顺序：父类的静态变量-&gt;父类的静态块-&gt;子类静态变量-&gt;子类静态初始化块-&gt;父类变量-&gt;父类初始化块-&gt;父类的构造函数-&gt;子类的变量-&gt;子类初始化块-&gt;子类构造函数;(变量和初始化块之间的先后顺序根据类中的先后位置而定)。</p>
<h4 id="Parent"><a href="#Parent" class="headerlink" title="Parent"></a>Parent</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Parent &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> name =getName();</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> <span class="built_in">width</span>=getWidth();</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"父类-----"</span>+<span class="string">"静态代码块"</span>);</div><div class="line">	&#125;</div><div class="line">	&#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"父类-----"</span>+<span class="string">"非静态代码块"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> Parent()&#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"父类-----"</span>+<span class="string">"构造方法"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> getName()&#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"父类-----"</span>+<span class="string">"静态成员变量"</span>);</div><div class="line">		<span class="built_in">return</span> <span class="string">"mjy"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> getWidth()&#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"父类-----"</span>+<span class="string">"非静态成员变量"</span>);</div><div class="line">		<span class="built_in">return</span> <span class="string">"mjy"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Son"><a href="#Son" class="headerlink" title="Son"></a>Son</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Son extends Parent &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> age =getAge();</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> <span class="built_in">height</span>=getHeight();</div><div class="line">	</div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"子类-----"</span>+<span class="string">"静态代码块"</span>);</div><div class="line">	&#125;</div><div class="line">	&#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"子类-----"</span>+<span class="string">"非静态代码块"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> Son()&#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"子类-----"</span>+<span class="string">"构造方法"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> getAge()&#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"子类-----"</span>+<span class="string">"静态成员变量"</span>);</div><div class="line">		<span class="built_in">return</span> <span class="string">"12"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">String</span> getHeight()&#123;</div><div class="line">		System.out.<span class="built_in">println</span>(<span class="string">"子类-----"</span>+<span class="string">"非静态成员变量"</span>);</div><div class="line">		<span class="built_in">return</span> <span class="string">"12"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">		Son son = <span class="keyword">new</span> Son();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">父类<span class="comment">-----静态成员变量</span></div><div class="line">父类<span class="comment">-----静态代码块</span></div><div class="line">子类<span class="comment">-----静态成员变量</span></div><div class="line">子类<span class="comment">-----静态代码块</span></div><div class="line">父类<span class="comment">-----非静态成员变量</span></div><div class="line">父类<span class="comment">-----非静态代码块</span></div><div class="line">父类<span class="comment">-----构造方法</span></div><div class="line">子类<span class="comment">-----非静态成员变量</span></div><div class="line">子类<span class="comment">-----非静态代码块</span></div><div class="line">子类<span class="comment">-----构造方法</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于Java 中的一切东西都是对象，所以许多活动 变得更加简单，这个问题便是其中的一例。正如下一章会讲到的那样，每个对象的代码都存在于独立的文件中。除非真的需要代码，否则那个文件是不会载入的。通常，我们可认为除非那个类的一个对象构造完毕，否则代码不会真的载入。由于stati
    
    </summary>
    
      <category term="Java" scheme="http://978420544.github.io/categories/java/"/>
    
    
      <category term="Java" scheme="http://978420544.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>hexo simpleblock解决首页无法显示摘要的问题</title>
    <link href="http://978420544.github.io/2017/04/06/hexo-simpleblock%E8%A7%A3%E5%86%B3%E9%A6%96%E9%A1%B5%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E6%91%98%E8%A6%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://978420544.github.io/2017/04/06/hexo-simpleblock解决首页无法显示摘要的问题/</id>
    <published>2017-04-06T03:33:21.000Z</published>
    <updated>2017-04-24T01:40:15.332Z</updated>
    
    <content type="html"><![CDATA[<p>博主在使用simpleblock的时候，发现首页和其他的一些地方显示的文章分页中，文章都是全部显示的，这样很影响首页的展示效果，并且不便于读者浏览博客的所有文章，因此我需要写一个摘要来解决这些问题。</p>
<p>摘要的原理则是利用标签内部的文字做为摘要，把生成后的这些截取下来作为整个文章的摘要显示。</p>
<h4 id="主题方案和想法"><a href="#主题方案和想法" class="headerlink" title="主题方案和想法"></a>主题方案和想法</h4><p>博主用的是simpleblock的主题方案，尽管还不完善，但是却是我喜欢的，不完善的可以自己去完善，这样才能达到自己想要的目的。</p>
<h4 id="helper-js"><a href="#helper-js" class="headerlink" title="helper.js"></a>helper.js</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hexo.extend.helper.register(<span class="string">'page_excerpt'</span>, <span class="function"><span class="keyword">function</span><span class="params">(post)</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> p = post ? post : <span class="keyword">this</span>.page;</div><div class="line">  <span class="keyword">var</span> excerpt = p.excerpt;</div><div class="line">  <span class="keyword">if</span> (!excerpt) &#123;</div><div class="line">    <span class="keyword">var</span> pos = p.content.indexOf(<span class="string">'&lt;/p&gt;'</span>);</div><div class="line">    <span class="keyword">if</span> (pos &gt; <span class="number">0</span>)&#123;</div><div class="line">      excerpt = p.content.substring(<span class="number">0</span>, pos + <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> excerpt;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="index-jade"><a href="#index-jade" class="headerlink" title="index.jade"></a>index.jade</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> is_home()</div><div class="line">  .markdown-<span class="keyword">body</span>!= page_excerpt(post)</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> is_archive()</div><div class="line">  .markdown-<span class="keyword">body</span>!= page_excerpt(post)</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> is_year()</div><div class="line">  .markdown-<span class="keyword">body</span>!= page_excerpt(post)</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> is_month()</div><div class="line">  .markdown-<span class="keyword">body</span>!= page_excerpt(post)</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> is_category()</div><div class="line">  .markdown-<span class="keyword">body</span>!= page_excerpt(post)</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> is_tag()</div><div class="line">  .markdown-<span class="keyword">body</span>!= page_excerpt(post)</div><div class="line"><span class="keyword">else</span> </div><div class="line">  .markdown-<span class="keyword">body</span>!= post.content</div></pre></td></tr></table></figure>
<h4 id="赘述"><a href="#赘述" class="headerlink" title="赘述"></a>赘述</h4><p>注册hexo摘要获取方法，首页显示的时候取第一个p标签的内容做为摘要</p>
<h4 id="自定义hexo主题"><a href="#自定义hexo主题" class="headerlink" title="自定义hexo主题"></a>自定义hexo主题</h4><p>如果对自定义hexo主题有兴趣的话，参考博客–<a href="http://blog.csdn.net/melordljm/article/details/51985129" target="_blank" rel="external">Hexo高级教程之主题开发</a>!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博主在使用simpleblock的时候，发现首页和其他的一些地方显示的文章分页中，文章都是全部显示的，这样很影响首页的展示效果，并且不便于读者浏览博客的所有文章，因此我需要写一个摘要来解决这些问题。&lt;/p&gt;
&lt;p&gt;摘要的原理则是利用标签内部的文字做为摘要，把生成后的这些截取
    
    </summary>
    
      <category term="Hexo" scheme="http://978420544.github.io/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://978420544.github.io/tags/hexo/"/>
    
      <category term="Simpleblock" scheme="http://978420544.github.io/tags/simpleblock/"/>
    
  </entry>
  
  <entry>
    <title>设计模式概述</title>
    <link href="http://978420544.github.io/2017/04/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
    <id>http://978420544.github.io/2017/04/01/设计模式概述/</id>
    <published>2017-04-01T09:49:49.000Z</published>
    <updated>2017-04-24T01:40:51.438Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式（Designpattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是它能被广泛应用的原因</p>
<h3 id="—-—可复用面向对象软件的基础"><a href="#—-—可复用面向对象软件的基础" class="headerlink" title="— —可复用面向对象软件的基础"></a>— —可复用面向对象软件的基础</h3><h4 id="总体来说设计模式分为三大类："><a href="#总体来说设计模式分为三大类：" class="headerlink" title="总体来说设计模式分为三大类："></a>总体来说设计模式分为三大类：</h4><h5 id="创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。"><a href="#创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。" class="headerlink" title="创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。"></a>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</h5><h5 id="结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。"><a href="#结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。" class="headerlink" title="结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。"></a>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</h5><h5 id="行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。"><a href="#行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。" class="headerlink" title="行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。"></a>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</h5><h5 id="其实还有两类：并发型模式和线程池模式。"><a href="#其实还有两类：并发型模式和线程池模式。" class="headerlink" title="其实还有两类：并发型模式和线程池模式。"></a>其实还有两类：并发型模式和线程池模式。</h5><h4 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h4><h5 id="1、开闭原则（Open-Close-Principle）"><a href="#1、开闭原则（Open-Close-Principle）" class="headerlink" title="1、开闭原则（Open Close Principle）"></a>1、开闭原则（Open Close Principle）</h5><p>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
<h5 id="2、里氏代换原则（Liskov-Substitution-Principle）"><a href="#2、里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="2、里氏代换原则（Liskov Substitution Principle）"></a>2、里氏代换原则（Liskov Substitution Principle）</h5><p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p>
<h5 id="3、依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3、依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3、依赖倒转原则（Dependence Inversion Principle）"></a>3、依赖倒转原则（Dependence Inversion Principle）</h5><p>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</p>
<h5 id="4、接口隔离原则（Interface-Segregation-Principle）"><a href="#4、接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4、接口隔离原则（Interface Segregation Principle）"></a>4、接口隔离原则（Interface Segregation Principle）</h5><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p>
<h5 id="5、迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#5、迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="5、迪米特法则（最少知道原则）（Demeter Principle）"></a>5、迪米特法则（最少知道原则）（Demeter Principle）</h5><p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<h5 id="6、合成复用原则（Composite-Reuse-Principle）"><a href="#6、合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6、合成复用原则（Composite Reuse Principle）"></a>6、合成复用原则（Composite Reuse Principle）</h5><p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式（Designpattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基
    
    </summary>
    
      <category term="设计模式" scheme="http://978420544.github.io/categories/design/"/>
    
    
      <category term="设计模式" scheme="http://978420544.github.io/tags/design/"/>
    
  </entry>
  
</feed>
